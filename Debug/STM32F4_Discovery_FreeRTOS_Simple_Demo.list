
STM32F4_Discovery_FreeRTOS_Simple_Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000554c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000004  080056dc  080056dc  000156dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  080056e0  080056e0  000156e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000007c  20000000  080056e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
  6 .bss          00001e74  2000007c  2000007c  0002007c  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  20001ef0  20001ef0  0002007c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00011313  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002bda  00000000  00000000  000313bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000e20  00000000  00000000  00033f98  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000cb8  00000000  00000000  00034db8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00006877  00000000  00000000  00035a70  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004c0f  00000000  00000000  0003c2e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00040ef6  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00004130  00000000  00000000  00040f74  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080056c4 	.word	0x080056c4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	080056c4 	.word	0x080056c4

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800030e:	f1a4 0401 	sub.w	r4, r4, #1
 8000312:	d1e9      	bne.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f092 0f00 	teq	r2, #0
 80004ba:	bf14      	ite	ne
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e720      	b.n	8000314 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aedc 	beq.w	80002c2 <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6c1      	b.n	80002c2 <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__gedf2>:
 8000540:	f04f 3cff 	mov.w	ip, #4294967295
 8000544:	e006      	b.n	8000554 <__cmpdf2+0x4>
 8000546:	bf00      	nop

08000548 <__ledf2>:
 8000548:	f04f 0c01 	mov.w	ip, #1
 800054c:	e002      	b.n	8000554 <__cmpdf2+0x4>
 800054e:	bf00      	nop

08000550 <__cmpdf2>:
 8000550:	f04f 0c01 	mov.w	ip, #1
 8000554:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000558:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800055c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000560:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000564:	bf18      	it	ne
 8000566:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800056a:	d01b      	beq.n	80005a4 <__cmpdf2+0x54>
 800056c:	b001      	add	sp, #4
 800056e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000572:	bf0c      	ite	eq
 8000574:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000578:	ea91 0f03 	teqne	r1, r3
 800057c:	bf02      	ittt	eq
 800057e:	ea90 0f02 	teqeq	r0, r2
 8000582:	2000      	moveq	r0, #0
 8000584:	4770      	bxeq	lr
 8000586:	f110 0f00 	cmn.w	r0, #0
 800058a:	ea91 0f03 	teq	r1, r3
 800058e:	bf58      	it	pl
 8000590:	4299      	cmppl	r1, r3
 8000592:	bf08      	it	eq
 8000594:	4290      	cmpeq	r0, r2
 8000596:	bf2c      	ite	cs
 8000598:	17d8      	asrcs	r0, r3, #31
 800059a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800059e:	f040 0001 	orr.w	r0, r0, #1
 80005a2:	4770      	bx	lr
 80005a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005ac:	d102      	bne.n	80005b4 <__cmpdf2+0x64>
 80005ae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80005b2:	d107      	bne.n	80005c4 <__cmpdf2+0x74>
 80005b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005bc:	d1d6      	bne.n	800056c <__cmpdf2+0x1c>
 80005be:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80005c2:	d0d3      	beq.n	800056c <__cmpdf2+0x1c>
 80005c4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <__aeabi_cdrcmple>:
 80005cc:	4684      	mov	ip, r0
 80005ce:	4610      	mov	r0, r2
 80005d0:	4662      	mov	r2, ip
 80005d2:	468c      	mov	ip, r1
 80005d4:	4619      	mov	r1, r3
 80005d6:	4663      	mov	r3, ip
 80005d8:	e000      	b.n	80005dc <__aeabi_cdcmpeq>
 80005da:	bf00      	nop

080005dc <__aeabi_cdcmpeq>:
 80005dc:	b501      	push	{r0, lr}
 80005de:	f7ff ffb7 	bl	8000550 <__cmpdf2>
 80005e2:	2800      	cmp	r0, #0
 80005e4:	bf48      	it	mi
 80005e6:	f110 0f00 	cmnmi.w	r0, #0
 80005ea:	bd01      	pop	{r0, pc}

080005ec <__aeabi_dcmpeq>:
 80005ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005f0:	f7ff fff4 	bl	80005dc <__aeabi_cdcmpeq>
 80005f4:	bf0c      	ite	eq
 80005f6:	2001      	moveq	r0, #1
 80005f8:	2000      	movne	r0, #0
 80005fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80005fe:	bf00      	nop

08000600 <__aeabi_dcmplt>:
 8000600:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000604:	f7ff ffea 	bl	80005dc <__aeabi_cdcmpeq>
 8000608:	bf34      	ite	cc
 800060a:	2001      	movcc	r0, #1
 800060c:	2000      	movcs	r0, #0
 800060e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000612:	bf00      	nop

08000614 <__aeabi_dcmple>:
 8000614:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000618:	f7ff ffe0 	bl	80005dc <__aeabi_cdcmpeq>
 800061c:	bf94      	ite	ls
 800061e:	2001      	movls	r0, #1
 8000620:	2000      	movhi	r0, #0
 8000622:	f85d fb08 	ldr.w	pc, [sp], #8
 8000626:	bf00      	nop

08000628 <__aeabi_dcmpge>:
 8000628:	f84d ed08 	str.w	lr, [sp, #-8]!
 800062c:	f7ff ffce 	bl	80005cc <__aeabi_cdrcmple>
 8000630:	bf94      	ite	ls
 8000632:	2001      	movls	r0, #1
 8000634:	2000      	movhi	r0, #0
 8000636:	f85d fb08 	ldr.w	pc, [sp], #8
 800063a:	bf00      	nop

0800063c <__aeabi_dcmpgt>:
 800063c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000640:	f7ff ffc4 	bl	80005cc <__aeabi_cdrcmple>
 8000644:	bf34      	ite	cc
 8000646:	2001      	movcc	r0, #1
 8000648:	2000      	movcs	r0, #0
 800064a:	f85d fb08 	ldr.w	pc, [sp], #8
 800064e:	bf00      	nop

08000650 <__aeabi_d2uiz>:
 8000650:	004a      	lsls	r2, r1, #1
 8000652:	d211      	bcs.n	8000678 <__aeabi_d2uiz+0x28>
 8000654:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000658:	d211      	bcs.n	800067e <__aeabi_d2uiz+0x2e>
 800065a:	d50d      	bpl.n	8000678 <__aeabi_d2uiz+0x28>
 800065c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000660:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000664:	d40e      	bmi.n	8000684 <__aeabi_d2uiz+0x34>
 8000666:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800066a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800066e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000672:	fa23 f002 	lsr.w	r0, r3, r2
 8000676:	4770      	bx	lr
 8000678:	f04f 0000 	mov.w	r0, #0
 800067c:	4770      	bx	lr
 800067e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000682:	d102      	bne.n	800068a <__aeabi_d2uiz+0x3a>
 8000684:	f04f 30ff 	mov.w	r0, #4294967295
 8000688:	4770      	bx	lr
 800068a:	f04f 0000 	mov.w	r0, #0
 800068e:	4770      	bx	lr

08000690 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 8000696:	2018      	movs	r0, #24
 8000698:	f000 fc52 	bl	8000f40 <pvPortMalloc>
 800069c:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d007      	beq.n	80006b4 <xEventGroupCreate+0x24>
		{
			pxEventBits->uxEventBits = 0;
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	3304      	adds	r3, #4
 80006ae:	4618      	mov	r0, r3
 80006b0:	f000 f979 	bl	80009a6 <vListInitialise>
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 80006b4:	687b      	ldr	r3, [r7, #4]
	}
 80006b6:	4618      	mov	r0, r3
 80006b8:	3708      	adds	r7, #8
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
	...

080006c0 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b090      	sub	sp, #64	; 0x40
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	60f8      	str	r0, [r7, #12]
 80006c8:	60b9      	str	r1, [r7, #8]
 80006ca:	607a      	str	r2, [r7, #4]
 80006cc:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 80006d6:	2300      	movs	r3, #0
 80006d8:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d109      	bne.n	80006f4 <xEventGroupWaitBits+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80006e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006e4:	f383 8811 	msr	BASEPRI, r3
 80006e8:	f3bf 8f6f 	isb	sy
 80006ec:	f3bf 8f4f 	dsb	sy
 80006f0:	623b      	str	r3, [r7, #32]
 80006f2:	e7fe      	b.n	80006f2 <xEventGroupWaitBits+0x32>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80006f4:	68bb      	ldr	r3, [r7, #8]
 80006f6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d009      	beq.n	8000712 <xEventGroupWaitBits+0x52>
 80006fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000702:	f383 8811 	msr	BASEPRI, r3
 8000706:	f3bf 8f6f 	isb	sy
 800070a:	f3bf 8f4f 	dsb	sy
 800070e:	61fb      	str	r3, [r7, #28]
 8000710:	e7fe      	b.n	8000710 <xEventGroupWaitBits+0x50>
	configASSERT( uxBitsToWaitFor != 0 );
 8000712:	68bb      	ldr	r3, [r7, #8]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d109      	bne.n	800072c <xEventGroupWaitBits+0x6c>
 8000718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800071c:	f383 8811 	msr	BASEPRI, r3
 8000720:	f3bf 8f6f 	isb	sy
 8000724:	f3bf 8f4f 	dsb	sy
 8000728:	61bb      	str	r3, [r7, #24]
 800072a:	e7fe      	b.n	800072a <xEventGroupWaitBits+0x6a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800072c:	f001 ff96 	bl	800265c <xTaskGetSchedulerState>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d102      	bne.n	800073c <xEventGroupWaitBits+0x7c>
 8000736:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000738:	2b00      	cmp	r3, #0
 800073a:	d101      	bne.n	8000740 <xEventGroupWaitBits+0x80>
 800073c:	2301      	movs	r3, #1
 800073e:	e000      	b.n	8000742 <xEventGroupWaitBits+0x82>
 8000740:	2300      	movs	r3, #0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d109      	bne.n	800075a <xEventGroupWaitBits+0x9a>
 8000746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800074a:	f383 8811 	msr	BASEPRI, r3
 800074e:	f3bf 8f6f 	isb	sy
 8000752:	f3bf 8f4f 	dsb	sy
 8000756:	617b      	str	r3, [r7, #20]
 8000758:	e7fe      	b.n	8000758 <xEventGroupWaitBits+0x98>
	}
	#endif

	vTaskSuspendAll();
 800075a:	f001 fadf 	bl	8001d1c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800075e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8000764:	683a      	ldr	r2, [r7, #0]
 8000766:	68b9      	ldr	r1, [r7, #8]
 8000768:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800076a:	f000 f8fa 	bl	8000962 <prvTestWaitCondition>
 800076e:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8000770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000772:	2b00      	cmp	r3, #0
 8000774:	d00e      	beq.n	8000794 <xEventGroupWaitBits+0xd4>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8000776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000778:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800077a:	2300      	movs	r3, #0
 800077c:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d026      	beq.n	80007d2 <xEventGroupWaitBits+0x112>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8000784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000786:	681a      	ldr	r2, [r3, #0]
 8000788:	68bb      	ldr	r3, [r7, #8]
 800078a:	43db      	mvns	r3, r3
 800078c:	401a      	ands	r2, r3
 800078e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	e01e      	b.n	80007d2 <xEventGroupWaitBits+0x112>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8000794:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000796:	2b00      	cmp	r3, #0
 8000798:	d102      	bne.n	80007a0 <xEventGroupWaitBits+0xe0>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800079a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800079c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800079e:	e018      	b.n	80007d2 <xEventGroupWaitBits+0x112>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d003      	beq.n	80007ae <xEventGroupWaitBits+0xee>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80007a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80007a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80007ac:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d003      	beq.n	80007bc <xEventGroupWaitBits+0xfc>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80007b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80007b6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80007ba:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80007bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007be:	1d18      	adds	r0, r3, #4
 80007c0:	68ba      	ldr	r2, [r7, #8]
 80007c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80007c4:	4313      	orrs	r3, r2
 80007c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80007c8:	4619      	mov	r1, r3
 80007ca:	f001 fcc1 	bl	8002150 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 80007ce:	2300      	movs	r3, #0
 80007d0:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80007d2:	f001 fab1 	bl	8001d38 <xTaskResumeAll>
 80007d6:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 80007d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d031      	beq.n	8000842 <xEventGroupWaitBits+0x182>
	{
		if( xAlreadyYielded == pdFALSE )
 80007de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d107      	bne.n	80007f4 <xEventGroupWaitBits+0x134>
		{
			portYIELD_WITHIN_API();
 80007e4:	4b19      	ldr	r3, [pc, #100]	; (800084c <xEventGroupWaitBits+0x18c>)
 80007e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	f3bf 8f4f 	dsb	sy
 80007f0:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80007f4:	f002 f84a 	bl	800288c <uxTaskResetEventItemValue>
 80007f8:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80007fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80007fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000800:	2b00      	cmp	r3, #0
 8000802:	d11a      	bne.n	800083a <xEventGroupWaitBits+0x17a>
		{
			taskENTER_CRITICAL();
 8000804:	f000 fa8c 	bl	8000d20 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8000808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800080e:	683a      	ldr	r2, [r7, #0]
 8000810:	68b9      	ldr	r1, [r7, #8]
 8000812:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000814:	f000 f8a5 	bl	8000962 <prvTestWaitCondition>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d009      	beq.n	8000832 <xEventGroupWaitBits+0x172>
				{
					if( xClearOnExit != pdFALSE )
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d006      	beq.n	8000832 <xEventGroupWaitBits+0x172>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8000824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000826:	681a      	ldr	r2, [r3, #0]
 8000828:	68bb      	ldr	r3, [r7, #8]
 800082a:	43db      	mvns	r3, r3
 800082c:	401a      	ands	r2, r3
 800082e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000830:	601a      	str	r2, [r3, #0]
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8000832:	f000 faa3 	bl	8000d7c <vPortExitCritical>

			/* Prevent compiler warnings when trace macros are not used. */
			xTimeoutOccurred = pdFALSE;
 8000836:	2300      	movs	r3, #0
 8000838:	633b      	str	r3, [r7, #48]	; 0x30
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800083a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800083c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000840:	63fb      	str	r3, [r7, #60]	; 0x3c
	}
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	return uxReturn;
 8000842:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8000844:	4618      	mov	r0, r3
 8000846:	3740      	adds	r7, #64	; 0x40
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	e000ed04 	.word	0xe000ed04

08000850 <xEventGroupSetBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b08e      	sub	sp, #56	; 0x38
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800085a:	2300      	movs	r3, #0
 800085c:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8000862:	2300      	movs	r3, #0
 8000864:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d109      	bne.n	8000880 <xEventGroupSetBits+0x30>
 800086c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000870:	f383 8811 	msr	BASEPRI, r3
 8000874:	f3bf 8f6f 	isb	sy
 8000878:	f3bf 8f4f 	dsb	sy
 800087c:	613b      	str	r3, [r7, #16]
 800087e:	e7fe      	b.n	800087e <xEventGroupSetBits+0x2e>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8000886:	2b00      	cmp	r3, #0
 8000888:	d009      	beq.n	800089e <xEventGroupSetBits+0x4e>
 800088a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800088e:	f383 8811 	msr	BASEPRI, r3
 8000892:	f3bf 8f6f 	isb	sy
 8000896:	f3bf 8f4f 	dsb	sy
 800089a:	60fb      	str	r3, [r7, #12]
 800089c:	e7fe      	b.n	800089c <xEventGroupSetBits+0x4c>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800089e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008a0:	3304      	adds	r3, #4
 80008a2:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80008a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008a6:	3308      	adds	r3, #8
 80008a8:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80008aa:	f001 fa37 	bl	8001d1c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80008ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008b0:	68db      	ldr	r3, [r3, #12]
 80008b2:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80008b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008b6:	681a      	ldr	r2, [r3, #0]
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	431a      	orrs	r2, r3
 80008bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008be:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80008c0:	e03c      	b.n	800093c <xEventGroupSetBits+0xec>
		{
			pxNext = listGET_NEXT( pxListItem );
 80008c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008c4:	685b      	ldr	r3, [r3, #4]
 80008c6:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80008c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80008ce:	2300      	movs	r3, #0
 80008d0:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80008d2:	69bb      	ldr	r3, [r7, #24]
 80008d4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80008d8:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80008da:	69bb      	ldr	r3, [r7, #24]
 80008dc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80008e0:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80008e2:	697b      	ldr	r3, [r7, #20]
 80008e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d108      	bne.n	80008fe <xEventGroupSetBits+0xae>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80008ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008ee:	681a      	ldr	r2, [r3, #0]
 80008f0:	69bb      	ldr	r3, [r7, #24]
 80008f2:	4013      	ands	r3, r2
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d00b      	beq.n	8000910 <xEventGroupSetBits+0xc0>
				{
					xMatchFound = pdTRUE;
 80008f8:	2301      	movs	r3, #1
 80008fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80008fc:	e008      	b.n	8000910 <xEventGroupSetBits+0xc0>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80008fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000900:	681a      	ldr	r2, [r3, #0]
 8000902:	69bb      	ldr	r3, [r7, #24]
 8000904:	401a      	ands	r2, r3
 8000906:	69bb      	ldr	r3, [r7, #24]
 8000908:	429a      	cmp	r2, r3
 800090a:	d101      	bne.n	8000910 <xEventGroupSetBits+0xc0>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800090c:	2301      	movs	r3, #1
 800090e:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8000910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000912:	2b00      	cmp	r3, #0
 8000914:	d010      	beq.n	8000938 <xEventGroupSetBits+0xe8>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8000916:	697b      	ldr	r3, [r7, #20]
 8000918:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800091c:	2b00      	cmp	r3, #0
 800091e:	d003      	beq.n	8000928 <xEventGroupSetBits+0xd8>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8000920:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000922:	69bb      	ldr	r3, [r7, #24]
 8000924:	4313      	orrs	r3, r2
 8000926:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				( void ) xTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8000928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000930:	4619      	mov	r1, r3
 8000932:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000934:	f001 fcd2 	bl	80022dc <xTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8000938:	69fb      	ldr	r3, [r7, #28]
 800093a:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 800093c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800093e:	6a3b      	ldr	r3, [r7, #32]
 8000940:	429a      	cmp	r2, r3
 8000942:	d1be      	bne.n	80008c2 <xEventGroupSetBits+0x72>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8000944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000946:	681a      	ldr	r2, [r3, #0]
 8000948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800094a:	43db      	mvns	r3, r3
 800094c:	401a      	ands	r2, r3
 800094e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000950:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8000952:	f001 f9f1 	bl	8001d38 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8000956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000958:	681b      	ldr	r3, [r3, #0]
}
 800095a:	4618      	mov	r0, r3
 800095c:	3738      	adds	r7, #56	; 0x38
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}

08000962 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8000962:	b480      	push	{r7}
 8000964:	b087      	sub	sp, #28
 8000966:	af00      	add	r7, sp, #0
 8000968:	60f8      	str	r0, [r7, #12]
 800096a:	60b9      	str	r1, [r7, #8]
 800096c:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800096e:	2300      	movs	r3, #0
 8000970:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d107      	bne.n	8000988 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8000978:	68fa      	ldr	r2, [r7, #12]
 800097a:	68bb      	ldr	r3, [r7, #8]
 800097c:	4013      	ands	r3, r2
 800097e:	2b00      	cmp	r3, #0
 8000980:	d00a      	beq.n	8000998 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8000982:	2301      	movs	r3, #1
 8000984:	617b      	str	r3, [r7, #20]
 8000986:	e007      	b.n	8000998 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8000988:	68fa      	ldr	r2, [r7, #12]
 800098a:	68bb      	ldr	r3, [r7, #8]
 800098c:	401a      	ands	r2, r3
 800098e:	68bb      	ldr	r3, [r7, #8]
 8000990:	429a      	cmp	r2, r3
 8000992:	d101      	bne.n	8000998 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8000994:	2301      	movs	r3, #1
 8000996:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8000998:	697b      	ldr	r3, [r7, #20]
}
 800099a:	4618      	mov	r0, r3
 800099c:	371c      	adds	r7, #28
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr

080009a6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80009a6:	b480      	push	{r7}
 80009a8:	b083      	sub	sp, #12
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	f103 0208 	add.w	r2, r3, #8
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	f04f 32ff 	mov.w	r2, #4294967295
 80009be:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	f103 0208 	add.w	r2, r3, #8
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	f103 0208 	add.w	r2, r3, #8
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80009da:	bf00      	nop
 80009dc:	370c      	adds	r7, #12
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr

080009e6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80009e6:	b480      	push	{r7}
 80009e8:	b083      	sub	sp, #12
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	2200      	movs	r2, #0
 80009f2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80009f4:	bf00      	nop
 80009f6:	370c      	adds	r7, #12
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr

08000a00 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000a00:	b480      	push	{r7}
 8000a02:	b085      	sub	sp, #20
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
 8000a08:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	685b      	ldr	r3, [r3, #4]
 8000a0e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	68fa      	ldr	r2, [r7, #12]
 8000a14:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	689a      	ldr	r2, [r3, #8]
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	689b      	ldr	r3, [r3, #8]
 8000a22:	683a      	ldr	r2, [r7, #0]
 8000a24:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	683a      	ldr	r2, [r7, #0]
 8000a2a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	687a      	ldr	r2, [r7, #4]
 8000a30:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	1c5a      	adds	r2, r3, #1
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	601a      	str	r2, [r3, #0]
}
 8000a3c:	bf00      	nop
 8000a3e:	3714      	adds	r7, #20
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr

08000a48 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b085      	sub	sp, #20
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
 8000a50:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a5e:	d103      	bne.n	8000a68 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	691b      	ldr	r3, [r3, #16]
 8000a64:	60fb      	str	r3, [r7, #12]
 8000a66:	e00c      	b.n	8000a82 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	3308      	adds	r3, #8
 8000a6c:	60fb      	str	r3, [r7, #12]
 8000a6e:	e002      	b.n	8000a76 <vListInsert+0x2e>
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	685b      	ldr	r3, [r3, #4]
 8000a74:	60fb      	str	r3, [r7, #12]
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	685b      	ldr	r3, [r3, #4]
 8000a7a:	681a      	ldr	r2, [r3, #0]
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	429a      	cmp	r2, r3
 8000a80:	d9f6      	bls.n	8000a70 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	685a      	ldr	r2, [r3, #4]
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	685b      	ldr	r3, [r3, #4]
 8000a8e:	683a      	ldr	r2, [r7, #0]
 8000a90:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	68fa      	ldr	r2, [r7, #12]
 8000a96:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	683a      	ldr	r2, [r7, #0]
 8000a9c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	687a      	ldr	r2, [r7, #4]
 8000aa2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	1c5a      	adds	r2, r3, #1
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	601a      	str	r2, [r3, #0]
}
 8000aae:	bf00      	nop
 8000ab0:	3714      	adds	r7, #20
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr

08000aba <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000aba:	b480      	push	{r7}
 8000abc:	b085      	sub	sp, #20
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	691b      	ldr	r3, [r3, #16]
 8000ac6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	687a      	ldr	r2, [r7, #4]
 8000ace:	6892      	ldr	r2, [r2, #8]
 8000ad0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	689b      	ldr	r3, [r3, #8]
 8000ad6:	687a      	ldr	r2, [r7, #4]
 8000ad8:	6852      	ldr	r2, [r2, #4]
 8000ada:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	685a      	ldr	r2, [r3, #4]
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	429a      	cmp	r2, r3
 8000ae4:	d103      	bne.n	8000aee <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	689a      	ldr	r2, [r3, #8]
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	2200      	movs	r2, #0
 8000af2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	1e5a      	subs	r2, r3, #1
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	681b      	ldr	r3, [r3, #0]
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3714      	adds	r7, #20
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
	...

08000b10 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8000b10:	b480      	push	{r7}
 8000b12:	b085      	sub	sp, #20
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	60f8      	str	r0, [r7, #12]
 8000b18:	60b9      	str	r1, [r7, #8]
 8000b1a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	3b04      	subs	r3, #4
 8000b20:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000b28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	3b04      	subs	r3, #4
 8000b2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	f023 0201 	bic.w	r2, r3, #1
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	3b04      	subs	r3, #4
 8000b3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8000b40:	4a0c      	ldr	r2, [pc, #48]	; (8000b74 <pxPortInitialiseStack+0x64>)
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	3b14      	subs	r3, #20
 8000b4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8000b4c:	687a      	ldr	r2, [r7, #4]
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	3b04      	subs	r3, #4
 8000b56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	f06f 0202 	mvn.w	r2, #2
 8000b5e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	3b20      	subs	r3, #32
 8000b64:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8000b66:	68fb      	ldr	r3, [r7, #12]
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	3714      	adds	r7, #20
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr
 8000b74:	08000b79 	.word	0x08000b79

08000b78 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8000b7e:	4b0c      	ldr	r3, [pc, #48]	; (8000bb0 <prvTaskExitError+0x38>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b86:	d009      	beq.n	8000b9c <prvTaskExitError+0x24>
 8000b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b8c:	f383 8811 	msr	BASEPRI, r3
 8000b90:	f3bf 8f6f 	isb	sy
 8000b94:	f3bf 8f4f 	dsb	sy
 8000b98:	607b      	str	r3, [r7, #4]
 8000b9a:	e7fe      	b.n	8000b9a <prvTaskExitError+0x22>
 8000b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ba0:	f383 8811 	msr	BASEPRI, r3
 8000ba4:	f3bf 8f6f 	isb	sy
 8000ba8:	f3bf 8f4f 	dsb	sy
 8000bac:	603b      	str	r3, [r7, #0]
	portDISABLE_INTERRUPTS();
	for( ;; );
 8000bae:	e7fe      	b.n	8000bae <prvTaskExitError+0x36>
 8000bb0:	20000000 	.word	0x20000000
	...

08000bc0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8000bc0:	4b07      	ldr	r3, [pc, #28]	; (8000be0 <pxCurrentTCBConst2>)
 8000bc2:	6819      	ldr	r1, [r3, #0]
 8000bc4:	6808      	ldr	r0, [r1, #0]
 8000bc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000bca:	f380 8809 	msr	PSP, r0
 8000bce:	f3bf 8f6f 	isb	sy
 8000bd2:	f04f 0000 	mov.w	r0, #0
 8000bd6:	f380 8811 	msr	BASEPRI, r0
 8000bda:	4770      	bx	lr
 8000bdc:	f3af 8000 	nop.w

08000be0 <pxCurrentTCBConst2>:
 8000be0:	20001ca8 	.word	0x20001ca8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8000be4:	bf00      	nop
 8000be6:	bf00      	nop

08000be8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8000be8:	4806      	ldr	r0, [pc, #24]	; (8000c04 <prvPortStartFirstTask+0x1c>)
 8000bea:	6800      	ldr	r0, [r0, #0]
 8000bec:	6800      	ldr	r0, [r0, #0]
 8000bee:	f380 8808 	msr	MSP, r0
 8000bf2:	b662      	cpsie	i
 8000bf4:	b661      	cpsie	f
 8000bf6:	f3bf 8f4f 	dsb	sy
 8000bfa:	f3bf 8f6f 	isb	sy
 8000bfe:	df00      	svc	0
 8000c00:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8000c02:	bf00      	nop
 8000c04:	e000ed08 	.word	0xe000ed08

08000c08 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b086      	sub	sp, #24
 8000c0c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8000c0e:	4b3b      	ldr	r3, [pc, #236]	; (8000cfc <xPortStartScheduler+0xf4>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a3b      	ldr	r2, [pc, #236]	; (8000d00 <xPortStartScheduler+0xf8>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d109      	bne.n	8000c2c <xPortStartScheduler+0x24>
 8000c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c1c:	f383 8811 	msr	BASEPRI, r3
 8000c20:	f3bf 8f6f 	isb	sy
 8000c24:	f3bf 8f4f 	dsb	sy
 8000c28:	613b      	str	r3, [r7, #16]
 8000c2a:	e7fe      	b.n	8000c2a <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8000c2c:	4b33      	ldr	r3, [pc, #204]	; (8000cfc <xPortStartScheduler+0xf4>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a34      	ldr	r2, [pc, #208]	; (8000d04 <xPortStartScheduler+0xfc>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d109      	bne.n	8000c4a <xPortStartScheduler+0x42>
 8000c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c3a:	f383 8811 	msr	BASEPRI, r3
 8000c3e:	f3bf 8f6f 	isb	sy
 8000c42:	f3bf 8f4f 	dsb	sy
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	e7fe      	b.n	8000c48 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8000c4a:	4b2f      	ldr	r3, [pc, #188]	; (8000d08 <xPortStartScheduler+0x100>)
 8000c4c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	22ff      	movs	r2, #255	; 0xff
 8000c5a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	b2db      	uxtb	r3, r3
 8000c62:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8000c64:	79fb      	ldrb	r3, [r7, #7]
 8000c66:	b2db      	uxtb	r3, r3
 8000c68:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8000c6c:	b2da      	uxtb	r2, r3
 8000c6e:	4b27      	ldr	r3, [pc, #156]	; (8000d0c <xPortStartScheduler+0x104>)
 8000c70:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8000c72:	4b27      	ldr	r3, [pc, #156]	; (8000d10 <xPortStartScheduler+0x108>)
 8000c74:	2207      	movs	r2, #7
 8000c76:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000c78:	e009      	b.n	8000c8e <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8000c7a:	4b25      	ldr	r3, [pc, #148]	; (8000d10 <xPortStartScheduler+0x108>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	3b01      	subs	r3, #1
 8000c80:	4a23      	ldr	r2, [pc, #140]	; (8000d10 <xPortStartScheduler+0x108>)
 8000c82:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8000c84:	79fb      	ldrb	r3, [r7, #7]
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	005b      	lsls	r3, r3, #1
 8000c8a:	b2db      	uxtb	r3, r3
 8000c8c:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000c8e:	79fb      	ldrb	r3, [r7, #7]
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c96:	2b80      	cmp	r3, #128	; 0x80
 8000c98:	d0ef      	beq.n	8000c7a <xPortStartScheduler+0x72>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8000c9a:	4b1d      	ldr	r3, [pc, #116]	; (8000d10 <xPortStartScheduler+0x108>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	021b      	lsls	r3, r3, #8
 8000ca0:	4a1b      	ldr	r2, [pc, #108]	; (8000d10 <xPortStartScheduler+0x108>)
 8000ca2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8000ca4:	4b1a      	ldr	r3, [pc, #104]	; (8000d10 <xPortStartScheduler+0x108>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000cac:	4a18      	ldr	r2, [pc, #96]	; (8000d10 <xPortStartScheduler+0x108>)
 8000cae:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	b2da      	uxtb	r2, r3
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8000cb8:	4a16      	ldr	r2, [pc, #88]	; (8000d14 <xPortStartScheduler+0x10c>)
 8000cba:	4b16      	ldr	r3, [pc, #88]	; (8000d14 <xPortStartScheduler+0x10c>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cc2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8000cc4:	4a13      	ldr	r2, [pc, #76]	; (8000d14 <xPortStartScheduler+0x10c>)
 8000cc6:	4b13      	ldr	r3, [pc, #76]	; (8000d14 <xPortStartScheduler+0x10c>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8000cce:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8000cd0:	f000 f8d2 	bl	8000e78 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8000cd4:	4b10      	ldr	r3, [pc, #64]	; (8000d18 <xPortStartScheduler+0x110>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8000cda:	f000 f8e9 	bl	8000eb0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8000cde:	4a0f      	ldr	r2, [pc, #60]	; (8000d1c <xPortStartScheduler+0x114>)
 8000ce0:	4b0e      	ldr	r3, [pc, #56]	; (8000d1c <xPortStartScheduler+0x114>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8000ce8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8000cea:	f7ff ff7d 	bl	8000be8 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 8000cee:	f7ff ff43 	bl	8000b78 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8000cf2:	2300      	movs	r3, #0
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3718      	adds	r7, #24
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	e000ed00 	.word	0xe000ed00
 8000d00:	410fc271 	.word	0x410fc271
 8000d04:	410fc270 	.word	0x410fc270
 8000d08:	e000e400 	.word	0xe000e400
 8000d0c:	20000098 	.word	0x20000098
 8000d10:	2000009c 	.word	0x2000009c
 8000d14:	e000ed20 	.word	0xe000ed20
 8000d18:	20000000 	.word	0x20000000
 8000d1c:	e000ef34 	.word	0xe000ef34

08000d20 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d2a:	f383 8811 	msr	BASEPRI, r3
 8000d2e:	f3bf 8f6f 	isb	sy
 8000d32:	f3bf 8f4f 	dsb	sy
 8000d36:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8000d38:	4b0e      	ldr	r3, [pc, #56]	; (8000d74 <vPortEnterCritical+0x54>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	4a0d      	ldr	r2, [pc, #52]	; (8000d74 <vPortEnterCritical+0x54>)
 8000d40:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8000d42:	4b0c      	ldr	r3, [pc, #48]	; (8000d74 <vPortEnterCritical+0x54>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d10e      	bne.n	8000d68 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8000d4a:	4b0b      	ldr	r3, [pc, #44]	; (8000d78 <vPortEnterCritical+0x58>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	b2db      	uxtb	r3, r3
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d009      	beq.n	8000d68 <vPortEnterCritical+0x48>
 8000d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d58:	f383 8811 	msr	BASEPRI, r3
 8000d5c:	f3bf 8f6f 	isb	sy
 8000d60:	f3bf 8f4f 	dsb	sy
 8000d64:	603b      	str	r3, [r7, #0]
 8000d66:	e7fe      	b.n	8000d66 <vPortEnterCritical+0x46>
	}
}
 8000d68:	bf00      	nop
 8000d6a:	370c      	adds	r7, #12
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	20000000 	.word	0x20000000
 8000d78:	e000ed04 	.word	0xe000ed04

08000d7c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8000d82:	4b11      	ldr	r3, [pc, #68]	; (8000dc8 <vPortExitCritical+0x4c>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d109      	bne.n	8000d9e <vPortExitCritical+0x22>
 8000d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d8e:	f383 8811 	msr	BASEPRI, r3
 8000d92:	f3bf 8f6f 	isb	sy
 8000d96:	f3bf 8f4f 	dsb	sy
 8000d9a:	607b      	str	r3, [r7, #4]
 8000d9c:	e7fe      	b.n	8000d9c <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8000d9e:	4b0a      	ldr	r3, [pc, #40]	; (8000dc8 <vPortExitCritical+0x4c>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	3b01      	subs	r3, #1
 8000da4:	4a08      	ldr	r2, [pc, #32]	; (8000dc8 <vPortExitCritical+0x4c>)
 8000da6:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8000da8:	4b07      	ldr	r3, [pc, #28]	; (8000dc8 <vPortExitCritical+0x4c>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d104      	bne.n	8000dba <vPortExitCritical+0x3e>
 8000db0:	2300      	movs	r3, #0
 8000db2:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8000dba:	bf00      	nop
 8000dbc:	370c      	adds	r7, #12
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	20000000 	.word	0x20000000
 8000dcc:	00000000 	.word	0x00000000

08000dd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8000dd0:	f3ef 8009 	mrs	r0, PSP
 8000dd4:	f3bf 8f6f 	isb	sy
 8000dd8:	4b15      	ldr	r3, [pc, #84]	; (8000e30 <pxCurrentTCBConst>)
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	f01e 0f10 	tst.w	lr, #16
 8000de0:	bf08      	it	eq
 8000de2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8000de6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000dea:	6010      	str	r0, [r2, #0]
 8000dec:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8000df0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000df4:	f380 8811 	msr	BASEPRI, r0
 8000df8:	f3bf 8f4f 	dsb	sy
 8000dfc:	f3bf 8f6f 	isb	sy
 8000e00:	f001 f902 	bl	8002008 <vTaskSwitchContext>
 8000e04:	f04f 0000 	mov.w	r0, #0
 8000e08:	f380 8811 	msr	BASEPRI, r0
 8000e0c:	bc08      	pop	{r3}
 8000e0e:	6819      	ldr	r1, [r3, #0]
 8000e10:	6808      	ldr	r0, [r1, #0]
 8000e12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e16:	f01e 0f10 	tst.w	lr, #16
 8000e1a:	bf08      	it	eq
 8000e1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8000e20:	f380 8809 	msr	PSP, r0
 8000e24:	f3bf 8f6f 	isb	sy
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	f3af 8000 	nop.w

08000e30 <pxCurrentTCBConst>:
 8000e30:	20001ca8 	.word	0x20001ca8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8000e34:	bf00      	nop
 8000e36:	bf00      	nop

08000e38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
	__asm volatile
 8000e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e42:	f383 8811 	msr	BASEPRI, r3
 8000e46:	f3bf 8f6f 	isb	sy
 8000e4a:	f3bf 8f4f 	dsb	sy
 8000e4e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8000e50:	f001 f81e 	bl	8001e90 <xTaskIncrementTick>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d003      	beq.n	8000e62 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8000e5a:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <SysTick_Handler+0x3c>)
 8000e5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	2300      	movs	r3, #0
 8000e64:	603b      	str	r3, [r7, #0]
	__asm volatile
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8000e6c:	bf00      	nop
 8000e6e:	3708      	adds	r7, #8
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	e000ed04 	.word	0xe000ed04

08000e78 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8000e7c:	4a08      	ldr	r2, [pc, #32]	; (8000ea0 <vPortSetupTimerInterrupt+0x28>)
 8000e7e:	4b09      	ldr	r3, [pc, #36]	; (8000ea4 <vPortSetupTimerInterrupt+0x2c>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4909      	ldr	r1, [pc, #36]	; (8000ea8 <vPortSetupTimerInterrupt+0x30>)
 8000e84:	fba1 1303 	umull	r1, r3, r1, r3
 8000e88:	099b      	lsrs	r3, r3, #6
 8000e8a:	3b01      	subs	r3, #1
 8000e8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8000e8e:	4b07      	ldr	r3, [pc, #28]	; (8000eac <vPortSetupTimerInterrupt+0x34>)
 8000e90:	2207      	movs	r2, #7
 8000e92:	601a      	str	r2, [r3, #0]
}
 8000e94:	bf00      	nop
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	e000e014 	.word	0xe000e014
 8000ea4:	20000014 	.word	0x20000014
 8000ea8:	10624dd3 	.word	0x10624dd3
 8000eac:	e000e010 	.word	0xe000e010

08000eb0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8000eb0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8000ec0 <vPortEnableVFP+0x10>
 8000eb4:	6801      	ldr	r1, [r0, #0]
 8000eb6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000eba:	6001      	str	r1, [r0, #0]
 8000ebc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8000ebe:	bf00      	nop
 8000ec0:	e000ed88 	.word	0xe000ed88

08000ec4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b085      	sub	sp, #20
 8000ec8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8000eca:	f3ef 8305 	mrs	r3, IPSR
 8000ece:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	2b0f      	cmp	r3, #15
 8000ed4:	d913      	bls.n	8000efe <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8000ed6:	4a16      	ldr	r2, [pc, #88]	; (8000f30 <vPortValidateInterruptPriority+0x6c>)
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	4413      	add	r3, r2
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8000ee0:	4b14      	ldr	r3, [pc, #80]	; (8000f34 <vPortValidateInterruptPriority+0x70>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	7afa      	ldrb	r2, [r7, #11]
 8000ee6:	429a      	cmp	r2, r3
 8000ee8:	d209      	bcs.n	8000efe <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8000eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000eee:	f383 8811 	msr	BASEPRI, r3
 8000ef2:	f3bf 8f6f 	isb	sy
 8000ef6:	f3bf 8f4f 	dsb	sy
 8000efa:	607b      	str	r3, [r7, #4]
 8000efc:	e7fe      	b.n	8000efc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8000efe:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <vPortValidateInterruptPriority+0x74>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8000f06:	4b0d      	ldr	r3, [pc, #52]	; (8000f3c <vPortValidateInterruptPriority+0x78>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	429a      	cmp	r2, r3
 8000f0c:	d909      	bls.n	8000f22 <vPortValidateInterruptPriority+0x5e>
 8000f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f12:	f383 8811 	msr	BASEPRI, r3
 8000f16:	f3bf 8f6f 	isb	sy
 8000f1a:	f3bf 8f4f 	dsb	sy
 8000f1e:	603b      	str	r3, [r7, #0]
 8000f20:	e7fe      	b.n	8000f20 <vPortValidateInterruptPriority+0x5c>
	}
 8000f22:	bf00      	nop
 8000f24:	3714      	adds	r7, #20
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	e000e3f0 	.word	0xe000e3f0
 8000f34:	20000098 	.word	0x20000098
 8000f38:	e000ed0c 	.word	0xe000ed0c
 8000f3c:	2000009c 	.word	0x2000009c

08000f40 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	f003 0307 	and.w	r3, r3, #7
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d004      	beq.n	8000f60 <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	f023 0307 	bic.w	r3, r3, #7
 8000f5c:	3308      	adds	r3, #8
 8000f5e:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
 8000f60:	f000 fedc 	bl	8001d1c <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 8000f64:	4b18      	ldr	r3, [pc, #96]	; (8000fc8 <pvPortMalloc+0x88>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d105      	bne.n	8000f78 <pvPortMalloc+0x38>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8000f6c:	4b17      	ldr	r3, [pc, #92]	; (8000fcc <pvPortMalloc+0x8c>)
 8000f6e:	f023 0307 	bic.w	r3, r3, #7
 8000f72:	461a      	mov	r2, r3
 8000f74:	4b14      	ldr	r3, [pc, #80]	; (8000fc8 <pvPortMalloc+0x88>)
 8000f76:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8000f78:	4b15      	ldr	r3, [pc, #84]	; (8000fd0 <pvPortMalloc+0x90>)
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	4413      	add	r3, r2
 8000f80:	f641 32f7 	movw	r2, #7159	; 0x1bf7
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d813      	bhi.n	8000fb0 <pvPortMalloc+0x70>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 8000f88:	4b11      	ldr	r3, [pc, #68]	; (8000fd0 <pvPortMalloc+0x90>)
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	441a      	add	r2, r3
 8000f90:	4b0f      	ldr	r3, [pc, #60]	; (8000fd0 <pvPortMalloc+0x90>)
 8000f92:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8000f94:	429a      	cmp	r2, r3
 8000f96:	d90b      	bls.n	8000fb0 <pvPortMalloc+0x70>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 8000f98:	4b0b      	ldr	r3, [pc, #44]	; (8000fc8 <pvPortMalloc+0x88>)
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	4b0c      	ldr	r3, [pc, #48]	; (8000fd0 <pvPortMalloc+0x90>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4413      	add	r3, r2
 8000fa2:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
 8000fa4:	4b0a      	ldr	r3, [pc, #40]	; (8000fd0 <pvPortMalloc+0x90>)
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	4413      	add	r3, r2
 8000fac:	4a08      	ldr	r2, [pc, #32]	; (8000fd0 <pvPortMalloc+0x90>)
 8000fae:	6013      	str	r3, [r2, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000fb0:	f000 fec2 	bl	8001d38 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d101      	bne.n	8000fbe <pvPortMalloc+0x7e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8000fba:	f003 f8fb 	bl	80041b4 <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3710      	adds	r7, #16
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	20001ca4 	.word	0x20001ca4
 8000fcc:	200000a8 	.word	0x200000a8
 8000fd0:	20001ca0 	.word	0x20001ca0

08000fd4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d009      	beq.n	8000ff6 <vPortFree+0x22>
 8000fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fe6:	f383 8811 	msr	BASEPRI, r3
 8000fea:	f3bf 8f6f 	isb	sy
 8000fee:	f3bf 8f4f 	dsb	sy
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	e7fe      	b.n	8000ff4 <vPortFree+0x20>
}
 8000ff6:	bf00      	nop
 8000ff8:	3714      	adds	r7, #20
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
	...

08001004 <xPortGetFreeHeapSize>:
	xNextFreeByte = ( size_t ) 0;
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
 8001008:	4b04      	ldr	r3, [pc, #16]	; (800101c <xPortGetFreeHeapSize+0x18>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f5c3 53df 	rsb	r3, r3, #7136	; 0x1be0
 8001010:	3318      	adds	r3, #24
}
 8001012:	4618      	mov	r0, r3
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	20001ca0 	.word	0x20001ca0

08001020 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d109      	bne.n	8001048 <xQueueGenericReset+0x28>
 8001034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001038:	f383 8811 	msr	BASEPRI, r3
 800103c:	f3bf 8f6f 	isb	sy
 8001040:	f3bf 8f4f 	dsb	sy
 8001044:	60bb      	str	r3, [r7, #8]
 8001046:	e7fe      	b.n	8001046 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8001048:	f7ff fe6a 	bl	8000d20 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001054:	68f9      	ldr	r1, [r7, #12]
 8001056:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001058:	fb01 f303 	mul.w	r3, r1, r3
 800105c:	441a      	add	r2, r3
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	2200      	movs	r2, #0
 8001066:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001078:	3b01      	subs	r3, #1
 800107a:	68f9      	ldr	r1, [r7, #12]
 800107c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800107e:	fb01 f303 	mul.w	r3, r1, r3
 8001082:	441a      	add	r2, r3
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	22ff      	movs	r2, #255	; 0xff
 800108c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	22ff      	movs	r2, #255	; 0xff
 8001094:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d114      	bne.n	80010c8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	691b      	ldr	r3, [r3, #16]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d01a      	beq.n	80010dc <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	3310      	adds	r3, #16
 80010aa:	4618      	mov	r0, r3
 80010ac:	f001 f8b4 	bl	8002218 <xTaskRemoveFromEventList>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d012      	beq.n	80010dc <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80010b6:	4b0d      	ldr	r3, [pc, #52]	; (80010ec <xQueueGenericReset+0xcc>)
 80010b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	f3bf 8f4f 	dsb	sy
 80010c2:	f3bf 8f6f 	isb	sy
 80010c6:	e009      	b.n	80010dc <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	3310      	adds	r3, #16
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff fc6a 	bl	80009a6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	3324      	adds	r3, #36	; 0x24
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff fc65 	bl	80009a6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80010dc:	f7ff fe4e 	bl	8000d7c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80010e0:	2301      	movs	r3, #1
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3710      	adds	r7, #16
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	e000ed04 	.word	0xe000ed04

080010f0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b08a      	sub	sp, #40	; 0x28
 80010f4:	af02      	add	r7, sp, #8
 80010f6:	60f8      	str	r0, [r7, #12]
 80010f8:	60b9      	str	r1, [r7, #8]
 80010fa:	4613      	mov	r3, r2
 80010fc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d109      	bne.n	8001118 <xQueueGenericCreate+0x28>
 8001104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001108:	f383 8811 	msr	BASEPRI, r3
 800110c:	f3bf 8f6f 	isb	sy
 8001110:	f3bf 8f4f 	dsb	sy
 8001114:	613b      	str	r3, [r7, #16]
 8001116:	e7fe      	b.n	8001116 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d102      	bne.n	8001124 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800111e:	2300      	movs	r3, #0
 8001120:	61fb      	str	r3, [r7, #28]
 8001122:	e004      	b.n	800112e <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	68ba      	ldr	r2, [r7, #8]
 8001128:	fb02 f303 	mul.w	r3, r2, r3
 800112c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	3348      	adds	r3, #72	; 0x48
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff ff04 	bl	8000f40 <pvPortMalloc>
 8001138:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800113a:	69bb      	ldr	r3, [r7, #24]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d00b      	beq.n	8001158 <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	3348      	adds	r3, #72	; 0x48
 8001144:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001146:	79fa      	ldrb	r2, [r7, #7]
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	9300      	str	r3, [sp, #0]
 800114c:	4613      	mov	r3, r2
 800114e:	697a      	ldr	r2, [r7, #20]
 8001150:	68b9      	ldr	r1, [r7, #8]
 8001152:	68f8      	ldr	r0, [r7, #12]
 8001154:	f000 f805 	bl	8001162 <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 8001158:	69bb      	ldr	r3, [r7, #24]
	}
 800115a:	4618      	mov	r0, r3
 800115c:	3720      	adds	r7, #32
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001162:	b580      	push	{r7, lr}
 8001164:	b084      	sub	sp, #16
 8001166:	af00      	add	r7, sp, #0
 8001168:	60f8      	str	r0, [r7, #12]
 800116a:	60b9      	str	r1, [r7, #8]
 800116c:	607a      	str	r2, [r7, #4]
 800116e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d103      	bne.n	800117e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	e002      	b.n	8001184 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800117e:	69bb      	ldr	r3, [r7, #24]
 8001180:	687a      	ldr	r2, [r7, #4]
 8001182:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	68fa      	ldr	r2, [r7, #12]
 8001188:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800118a:	69bb      	ldr	r3, [r7, #24]
 800118c:	68ba      	ldr	r2, [r7, #8]
 800118e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001190:	2101      	movs	r1, #1
 8001192:	69b8      	ldr	r0, [r7, #24]
 8001194:	f7ff ff44 	bl	8001020 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001198:	bf00      	nop
 800119a:	3710      	adds	r7, #16
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b08e      	sub	sp, #56	; 0x38
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	60b9      	str	r1, [r7, #8]
 80011aa:	607a      	str	r2, [r7, #4]
 80011ac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80011ae:	2300      	movs	r3, #0
 80011b0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80011b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d109      	bne.n	80011d0 <xQueueGenericSend+0x30>
 80011bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011c0:	f383 8811 	msr	BASEPRI, r3
 80011c4:	f3bf 8f6f 	isb	sy
 80011c8:	f3bf 8f4f 	dsb	sy
 80011cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80011ce:	e7fe      	b.n	80011ce <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d103      	bne.n	80011de <xQueueGenericSend+0x3e>
 80011d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d101      	bne.n	80011e2 <xQueueGenericSend+0x42>
 80011de:	2301      	movs	r3, #1
 80011e0:	e000      	b.n	80011e4 <xQueueGenericSend+0x44>
 80011e2:	2300      	movs	r3, #0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d109      	bne.n	80011fc <xQueueGenericSend+0x5c>
 80011e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011ec:	f383 8811 	msr	BASEPRI, r3
 80011f0:	f3bf 8f6f 	isb	sy
 80011f4:	f3bf 8f4f 	dsb	sy
 80011f8:	627b      	str	r3, [r7, #36]	; 0x24
 80011fa:	e7fe      	b.n	80011fa <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	2b02      	cmp	r3, #2
 8001200:	d103      	bne.n	800120a <xQueueGenericSend+0x6a>
 8001202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001206:	2b01      	cmp	r3, #1
 8001208:	d101      	bne.n	800120e <xQueueGenericSend+0x6e>
 800120a:	2301      	movs	r3, #1
 800120c:	e000      	b.n	8001210 <xQueueGenericSend+0x70>
 800120e:	2300      	movs	r3, #0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d109      	bne.n	8001228 <xQueueGenericSend+0x88>
 8001214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001218:	f383 8811 	msr	BASEPRI, r3
 800121c:	f3bf 8f6f 	isb	sy
 8001220:	f3bf 8f4f 	dsb	sy
 8001224:	623b      	str	r3, [r7, #32]
 8001226:	e7fe      	b.n	8001226 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001228:	f001 fa18 	bl	800265c <xTaskGetSchedulerState>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d102      	bne.n	8001238 <xQueueGenericSend+0x98>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d101      	bne.n	800123c <xQueueGenericSend+0x9c>
 8001238:	2301      	movs	r3, #1
 800123a:	e000      	b.n	800123e <xQueueGenericSend+0x9e>
 800123c:	2300      	movs	r3, #0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d109      	bne.n	8001256 <xQueueGenericSend+0xb6>
 8001242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001246:	f383 8811 	msr	BASEPRI, r3
 800124a:	f3bf 8f6f 	isb	sy
 800124e:	f3bf 8f4f 	dsb	sy
 8001252:	61fb      	str	r3, [r7, #28]
 8001254:	e7fe      	b.n	8001254 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001256:	f7ff fd63 	bl	8000d20 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800125a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800125c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800125e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001262:	429a      	cmp	r2, r3
 8001264:	d302      	bcc.n	800126c <xQueueGenericSend+0xcc>
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	2b02      	cmp	r3, #2
 800126a:	d129      	bne.n	80012c0 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800126c:	683a      	ldr	r2, [r7, #0]
 800126e:	68b9      	ldr	r1, [r7, #8]
 8001270:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001272:	f000 fa35 	bl	80016e0 <prvCopyDataToQueue>
 8001276:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800127a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800127c:	2b00      	cmp	r3, #0
 800127e:	d010      	beq.n	80012a2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001282:	3324      	adds	r3, #36	; 0x24
 8001284:	4618      	mov	r0, r3
 8001286:	f000 ffc7 	bl	8002218 <xTaskRemoveFromEventList>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d013      	beq.n	80012b8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001290:	4b3f      	ldr	r3, [pc, #252]	; (8001390 <xQueueGenericSend+0x1f0>)
 8001292:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	f3bf 8f4f 	dsb	sy
 800129c:	f3bf 8f6f 	isb	sy
 80012a0:	e00a      	b.n	80012b8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80012a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d007      	beq.n	80012b8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80012a8:	4b39      	ldr	r3, [pc, #228]	; (8001390 <xQueueGenericSend+0x1f0>)
 80012aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	f3bf 8f4f 	dsb	sy
 80012b4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80012b8:	f7ff fd60 	bl	8000d7c <vPortExitCritical>
				return pdPASS;
 80012bc:	2301      	movs	r3, #1
 80012be:	e063      	b.n	8001388 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d103      	bne.n	80012ce <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80012c6:	f7ff fd59 	bl	8000d7c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80012ca:	2300      	movs	r3, #0
 80012cc:	e05c      	b.n	8001388 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80012ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d106      	bne.n	80012e2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 80012d4:	f107 0314 	add.w	r3, r7, #20
 80012d8:	4618      	mov	r0, r3
 80012da:	f001 f865 	bl	80023a8 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80012de:	2301      	movs	r3, #1
 80012e0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80012e2:	f7ff fd4b 	bl	8000d7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80012e6:	f000 fd19 	bl	8001d1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80012ea:	f7ff fd19 	bl	8000d20 <vPortEnterCritical>
 80012ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80012f4:	b25b      	sxtb	r3, r3
 80012f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012fa:	d103      	bne.n	8001304 <xQueueGenericSend+0x164>
 80012fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012fe:	2200      	movs	r2, #0
 8001300:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001306:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800130a:	b25b      	sxtb	r3, r3
 800130c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001310:	d103      	bne.n	800131a <xQueueGenericSend+0x17a>
 8001312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001314:	2200      	movs	r2, #0
 8001316:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800131a:	f7ff fd2f 	bl	8000d7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800131e:	1d3a      	adds	r2, r7, #4
 8001320:	f107 0314 	add.w	r3, r7, #20
 8001324:	4611      	mov	r1, r2
 8001326:	4618      	mov	r0, r3
 8001328:	f001 f862 	bl	80023f0 <xTaskCheckForTimeOut>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d124      	bne.n	800137c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001332:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001334:	f000 facc 	bl	80018d0 <prvIsQueueFull>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d018      	beq.n	8001370 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800133e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001340:	3310      	adds	r3, #16
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	4611      	mov	r1, r2
 8001346:	4618      	mov	r0, r3
 8001348:	f000 fede 	bl	8002108 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800134c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800134e:	f000 fa57 	bl	8001800 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001352:	f000 fcf1 	bl	8001d38 <xTaskResumeAll>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	f47f af7c 	bne.w	8001256 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800135e:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <xQueueGenericSend+0x1f0>)
 8001360:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	f3bf 8f4f 	dsb	sy
 800136a:	f3bf 8f6f 	isb	sy
 800136e:	e772      	b.n	8001256 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001370:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001372:	f000 fa45 	bl	8001800 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001376:	f000 fcdf 	bl	8001d38 <xTaskResumeAll>
 800137a:	e76c      	b.n	8001256 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800137c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800137e:	f000 fa3f 	bl	8001800 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001382:	f000 fcd9 	bl	8001d38 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8001386:	2300      	movs	r3, #0
		}
	}
}
 8001388:	4618      	mov	r0, r3
 800138a:	3738      	adds	r7, #56	; 0x38
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	e000ed04 	.word	0xe000ed04

08001394 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b08e      	sub	sp, #56	; 0x38
 8001398:	af00      	add	r7, sp, #0
 800139a:	60f8      	str	r0, [r7, #12]
 800139c:	60b9      	str	r1, [r7, #8]
 800139e:	607a      	str	r2, [r7, #4]
 80013a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80013a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d109      	bne.n	80013c0 <xQueueGenericSendFromISR+0x2c>
 80013ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013b0:	f383 8811 	msr	BASEPRI, r3
 80013b4:	f3bf 8f6f 	isb	sy
 80013b8:	f3bf 8f4f 	dsb	sy
 80013bc:	627b      	str	r3, [r7, #36]	; 0x24
 80013be:	e7fe      	b.n	80013be <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d103      	bne.n	80013ce <xQueueGenericSendFromISR+0x3a>
 80013c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d101      	bne.n	80013d2 <xQueueGenericSendFromISR+0x3e>
 80013ce:	2301      	movs	r3, #1
 80013d0:	e000      	b.n	80013d4 <xQueueGenericSendFromISR+0x40>
 80013d2:	2300      	movs	r3, #0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d109      	bne.n	80013ec <xQueueGenericSendFromISR+0x58>
 80013d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013dc:	f383 8811 	msr	BASEPRI, r3
 80013e0:	f3bf 8f6f 	isb	sy
 80013e4:	f3bf 8f4f 	dsb	sy
 80013e8:	623b      	str	r3, [r7, #32]
 80013ea:	e7fe      	b.n	80013ea <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d103      	bne.n	80013fa <xQueueGenericSendFromISR+0x66>
 80013f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d101      	bne.n	80013fe <xQueueGenericSendFromISR+0x6a>
 80013fa:	2301      	movs	r3, #1
 80013fc:	e000      	b.n	8001400 <xQueueGenericSendFromISR+0x6c>
 80013fe:	2300      	movs	r3, #0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d109      	bne.n	8001418 <xQueueGenericSendFromISR+0x84>
 8001404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001408:	f383 8811 	msr	BASEPRI, r3
 800140c:	f3bf 8f6f 	isb	sy
 8001410:	f3bf 8f4f 	dsb	sy
 8001414:	61fb      	str	r3, [r7, #28]
 8001416:	e7fe      	b.n	8001416 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001418:	f7ff fd54 	bl	8000ec4 <vPortValidateInterruptPriority>
	__asm volatile
 800141c:	f3ef 8211 	mrs	r2, BASEPRI
 8001420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001424:	f383 8811 	msr	BASEPRI, r3
 8001428:	f3bf 8f6f 	isb	sy
 800142c:	f3bf 8f4f 	dsb	sy
 8001430:	61ba      	str	r2, [r7, #24]
 8001432:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8001434:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001436:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800143a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800143c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800143e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001440:	429a      	cmp	r2, r3
 8001442:	d302      	bcc.n	800144a <xQueueGenericSendFromISR+0xb6>
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	2b02      	cmp	r3, #2
 8001448:	d12c      	bne.n	80014a4 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800144a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800144c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001450:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001454:	683a      	ldr	r2, [r7, #0]
 8001456:	68b9      	ldr	r1, [r7, #8]
 8001458:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800145a:	f000 f941 	bl	80016e0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800145e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8001462:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001466:	d112      	bne.n	800148e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800146a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800146c:	2b00      	cmp	r3, #0
 800146e:	d016      	beq.n	800149e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001472:	3324      	adds	r3, #36	; 0x24
 8001474:	4618      	mov	r0, r3
 8001476:	f000 fecf 	bl	8002218 <xTaskRemoveFromEventList>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d00e      	beq.n	800149e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d00b      	beq.n	800149e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2201      	movs	r2, #1
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	e007      	b.n	800149e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800148e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001492:	3301      	adds	r3, #1
 8001494:	b2db      	uxtb	r3, r3
 8001496:	b25a      	sxtb	r2, r3
 8001498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800149a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800149e:	2301      	movs	r3, #1
 80014a0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80014a2:	e001      	b.n	80014a8 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80014a4:	2300      	movs	r3, #0
 80014a6:	637b      	str	r3, [r7, #52]	; 0x34
 80014a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014aa:	613b      	str	r3, [r7, #16]
	__asm volatile
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80014b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3738      	adds	r7, #56	; 0x38
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}

080014bc <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b08e      	sub	sp, #56	; 0x38
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	60f8      	str	r0, [r7, #12]
 80014c4:	60b9      	str	r1, [r7, #8]
 80014c6:	607a      	str	r2, [r7, #4]
 80014c8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80014ca:	2300      	movs	r3, #0
 80014cc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80014d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d109      	bne.n	80014ec <xQueueGenericReceive+0x30>
	__asm volatile
 80014d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014dc:	f383 8811 	msr	BASEPRI, r3
 80014e0:	f3bf 8f6f 	isb	sy
 80014e4:	f3bf 8f4f 	dsb	sy
 80014e8:	627b      	str	r3, [r7, #36]	; 0x24
 80014ea:	e7fe      	b.n	80014ea <xQueueGenericReceive+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d103      	bne.n	80014fa <xQueueGenericReceive+0x3e>
 80014f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d101      	bne.n	80014fe <xQueueGenericReceive+0x42>
 80014fa:	2301      	movs	r3, #1
 80014fc:	e000      	b.n	8001500 <xQueueGenericReceive+0x44>
 80014fe:	2300      	movs	r3, #0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d109      	bne.n	8001518 <xQueueGenericReceive+0x5c>
 8001504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001508:	f383 8811 	msr	BASEPRI, r3
 800150c:	f3bf 8f6f 	isb	sy
 8001510:	f3bf 8f4f 	dsb	sy
 8001514:	623b      	str	r3, [r7, #32]
 8001516:	e7fe      	b.n	8001516 <xQueueGenericReceive+0x5a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001518:	f001 f8a0 	bl	800265c <xTaskGetSchedulerState>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d102      	bne.n	8001528 <xQueueGenericReceive+0x6c>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d101      	bne.n	800152c <xQueueGenericReceive+0x70>
 8001528:	2301      	movs	r3, #1
 800152a:	e000      	b.n	800152e <xQueueGenericReceive+0x72>
 800152c:	2300      	movs	r3, #0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d109      	bne.n	8001546 <xQueueGenericReceive+0x8a>
 8001532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001536:	f383 8811 	msr	BASEPRI, r3
 800153a:	f3bf 8f6f 	isb	sy
 800153e:	f3bf 8f4f 	dsb	sy
 8001542:	61fb      	str	r3, [r7, #28]
 8001544:	e7fe      	b.n	8001544 <xQueueGenericReceive+0x88>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8001546:	f7ff fbeb 	bl	8000d20 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800154a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800154c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800154e:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001552:	2b00      	cmp	r3, #0
 8001554:	d046      	beq.n	80015e4 <xQueueGenericReceive+0x128>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8001556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001558:	68db      	ldr	r3, [r3, #12]
 800155a:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800155c:	68b9      	ldr	r1, [r7, #8]
 800155e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001560:	f000 f928 	bl	80017b4 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d121      	bne.n	80015ae <xQueueGenericReceive+0xf2>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 800156a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800156c:	1e5a      	subs	r2, r3, #1
 800156e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001570:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d104      	bne.n	8001584 <xQueueGenericReceive+0xc8>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800157a:	f001 f99f 	bl	80028bc <pvTaskIncrementMutexHeldCount>
 800157e:	4602      	mov	r2, r0
 8001580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001582:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001586:	691b      	ldr	r3, [r3, #16]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d027      	beq.n	80015dc <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800158c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800158e:	3310      	adds	r3, #16
 8001590:	4618      	mov	r0, r3
 8001592:	f000 fe41 	bl	8002218 <xTaskRemoveFromEventList>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d01f      	beq.n	80015dc <xQueueGenericReceive+0x120>
						{
							queueYIELD_IF_USING_PREEMPTION();
 800159c:	4b4f      	ldr	r3, [pc, #316]	; (80016dc <xQueueGenericReceive+0x220>)
 800159e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	f3bf 8f4f 	dsb	sy
 80015a8:	f3bf 8f6f 	isb	sy
 80015ac:	e016      	b.n	80015dc <xQueueGenericReceive+0x120>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 80015ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015b2:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80015b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d00f      	beq.n	80015dc <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80015bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015be:	3324      	adds	r3, #36	; 0x24
 80015c0:	4618      	mov	r0, r3
 80015c2:	f000 fe29 	bl	8002218 <xTaskRemoveFromEventList>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d007      	beq.n	80015dc <xQueueGenericReceive+0x120>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 80015cc:	4b43      	ldr	r3, [pc, #268]	; (80016dc <xQueueGenericReceive+0x220>)
 80015ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	f3bf 8f4f 	dsb	sy
 80015d8:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 80015dc:	f7ff fbce 	bl	8000d7c <vPortExitCritical>
				return pdPASS;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e077      	b.n	80016d4 <xQueueGenericReceive+0x218>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d103      	bne.n	80015f2 <xQueueGenericReceive+0x136>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80015ea:	f7ff fbc7 	bl	8000d7c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80015ee:	2300      	movs	r3, #0
 80015f0:	e070      	b.n	80016d4 <xQueueGenericReceive+0x218>
				}
				else if( xEntryTimeSet == pdFALSE )
 80015f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d106      	bne.n	8001606 <xQueueGenericReceive+0x14a>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 80015f8:	f107 0314 	add.w	r3, r7, #20
 80015fc:	4618      	mov	r0, r3
 80015fe:	f000 fed3 	bl	80023a8 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001602:	2301      	movs	r3, #1
 8001604:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001606:	f7ff fbb9 	bl	8000d7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800160a:	f000 fb87 	bl	8001d1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800160e:	f7ff fb87 	bl	8000d20 <vPortEnterCritical>
 8001612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001614:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001618:	b25b      	sxtb	r3, r3
 800161a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800161e:	d103      	bne.n	8001628 <xQueueGenericReceive+0x16c>
 8001620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001622:	2200      	movs	r2, #0
 8001624:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800162a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800162e:	b25b      	sxtb	r3, r3
 8001630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001634:	d103      	bne.n	800163e <xQueueGenericReceive+0x182>
 8001636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001638:	2200      	movs	r2, #0
 800163a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800163e:	f7ff fb9d 	bl	8000d7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001642:	1d3a      	adds	r2, r7, #4
 8001644:	f107 0314 	add.w	r3, r7, #20
 8001648:	4611      	mov	r1, r2
 800164a:	4618      	mov	r0, r3
 800164c:	f000 fed0 	bl	80023f0 <xTaskCheckForTimeOut>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d131      	bne.n	80016ba <xQueueGenericReceive+0x1fe>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001656:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001658:	f000 f924 	bl	80018a4 <prvIsQueueEmpty>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d025      	beq.n	80016ae <xQueueGenericReceive+0x1f2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d108      	bne.n	800167c <xQueueGenericReceive+0x1c0>
					{
						taskENTER_CRITICAL();
 800166a:	f7ff fb59 	bl	8000d20 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800166e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	4618      	mov	r0, r3
 8001674:	f001 f810 	bl	8002698 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 8001678:	f7ff fb80 	bl	8000d7c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800167c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800167e:	3324      	adds	r3, #36	; 0x24
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	4611      	mov	r1, r2
 8001684:	4618      	mov	r0, r3
 8001686:	f000 fd3f 	bl	8002108 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800168a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800168c:	f000 f8b8 	bl	8001800 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001690:	f000 fb52 	bl	8001d38 <xTaskResumeAll>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	f47f af55 	bne.w	8001546 <xQueueGenericReceive+0x8a>
				{
					portYIELD_WITHIN_API();
 800169c:	4b0f      	ldr	r3, [pc, #60]	; (80016dc <xQueueGenericReceive+0x220>)
 800169e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	f3bf 8f4f 	dsb	sy
 80016a8:	f3bf 8f6f 	isb	sy
 80016ac:	e74b      	b.n	8001546 <xQueueGenericReceive+0x8a>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80016ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80016b0:	f000 f8a6 	bl	8001800 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80016b4:	f000 fb40 	bl	8001d38 <xTaskResumeAll>
 80016b8:	e745      	b.n	8001546 <xQueueGenericReceive+0x8a>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 80016ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80016bc:	f000 f8a0 	bl	8001800 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80016c0:	f000 fb3a 	bl	8001d38 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80016c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80016c6:	f000 f8ed 	bl	80018a4 <prvIsQueueEmpty>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	f43f af3a 	beq.w	8001546 <xQueueGenericReceive+0x8a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80016d2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3738      	adds	r7, #56	; 0x38
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	e000ed04 	.word	0xe000ed04

080016e0 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b086      	sub	sp, #24
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	60b9      	str	r1, [r7, #8]
 80016ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80016ec:	2300      	movs	r3, #0
 80016ee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016f4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d10d      	bne.n	800171a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d14d      	bne.n	80017a2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	4618      	mov	r0, r3
 800170c:	f001 f83a 	bl	8002784 <xTaskPriorityDisinherit>
 8001710:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	2200      	movs	r2, #0
 8001716:	605a      	str	r2, [r3, #4]
 8001718:	e043      	b.n	80017a2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d119      	bne.n	8001754 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	6898      	ldr	r0, [r3, #8]
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001728:	461a      	mov	r2, r3
 800172a:	68b9      	ldr	r1, [r7, #8]
 800172c:	f003 f97c 	bl	8004a28 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	689a      	ldr	r2, [r3, #8]
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001738:	441a      	add	r2, r3
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	689a      	ldr	r2, [r3, #8]
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	429a      	cmp	r2, r3
 8001748:	d32b      	bcc.n	80017a2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	609a      	str	r2, [r3, #8]
 8001752:	e026      	b.n	80017a2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	68d8      	ldr	r0, [r3, #12]
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175c:	461a      	mov	r2, r3
 800175e:	68b9      	ldr	r1, [r7, #8]
 8001760:	f003 f962 	bl	8004a28 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	68da      	ldr	r2, [r3, #12]
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176c:	425b      	negs	r3, r3
 800176e:	441a      	add	r2, r3
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	68da      	ldr	r2, [r3, #12]
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	429a      	cmp	r2, r3
 800177e:	d207      	bcs.n	8001790 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	685a      	ldr	r2, [r3, #4]
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001788:	425b      	negs	r3, r3
 800178a:	441a      	add	r2, r3
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2b02      	cmp	r3, #2
 8001794:	d105      	bne.n	80017a2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d002      	beq.n	80017a2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	3b01      	subs	r3, #1
 80017a0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	1c5a      	adds	r2, r3, #1
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80017aa:	697b      	ldr	r3, [r7, #20]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3718      	adds	r7, #24
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d018      	beq.n	80017f8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	68da      	ldr	r2, [r3, #12]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ce:	441a      	add	r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	68da      	ldr	r2, [r3, #12]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d303      	bcc.n	80017e8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	68d9      	ldr	r1, [r3, #12]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f0:	461a      	mov	r2, r3
 80017f2:	6838      	ldr	r0, [r7, #0]
 80017f4:	f003 f918 	bl	8004a28 <memcpy>
	}
}
 80017f8:	bf00      	nop
 80017fa:	3708      	adds	r7, #8
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}

08001800 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8001808:	f7ff fa8a 	bl	8000d20 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001812:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001814:	e011      	b.n	800183a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181a:	2b00      	cmp	r3, #0
 800181c:	d012      	beq.n	8001844 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	3324      	adds	r3, #36	; 0x24
 8001822:	4618      	mov	r0, r3
 8001824:	f000 fcf8 	bl	8002218 <xTaskRemoveFromEventList>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800182e:	f000 fe3d 	bl	80024ac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8001832:	7bfb      	ldrb	r3, [r7, #15]
 8001834:	3b01      	subs	r3, #1
 8001836:	b2db      	uxtb	r3, r3
 8001838:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800183a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800183e:	2b00      	cmp	r3, #0
 8001840:	dce9      	bgt.n	8001816 <prvUnlockQueue+0x16>
 8001842:	e000      	b.n	8001846 <prvUnlockQueue+0x46>
					break;
 8001844:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	22ff      	movs	r2, #255	; 0xff
 800184a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800184e:	f7ff fa95 	bl	8000d7c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8001852:	f7ff fa65 	bl	8000d20 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800185c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800185e:	e011      	b.n	8001884 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	691b      	ldr	r3, [r3, #16]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d012      	beq.n	800188e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	3310      	adds	r3, #16
 800186c:	4618      	mov	r0, r3
 800186e:	f000 fcd3 	bl	8002218 <xTaskRemoveFromEventList>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8001878:	f000 fe18 	bl	80024ac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800187c:	7bbb      	ldrb	r3, [r7, #14]
 800187e:	3b01      	subs	r3, #1
 8001880:	b2db      	uxtb	r3, r3
 8001882:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001884:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001888:	2b00      	cmp	r3, #0
 800188a:	dce9      	bgt.n	8001860 <prvUnlockQueue+0x60>
 800188c:	e000      	b.n	8001890 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800188e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	22ff      	movs	r2, #255	; 0xff
 8001894:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8001898:	f7ff fa70 	bl	8000d7c <vPortExitCritical>
}
 800189c:	bf00      	nop
 800189e:	3710      	adds	r7, #16
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80018ac:	f7ff fa38 	bl	8000d20 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d102      	bne.n	80018be <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80018b8:	2301      	movs	r3, #1
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	e001      	b.n	80018c2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80018be:	2300      	movs	r3, #0
 80018c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80018c2:	f7ff fa5b 	bl	8000d7c <vPortExitCritical>

	return xReturn;
 80018c6:	68fb      	ldr	r3, [r7, #12]
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3710      	adds	r7, #16
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80018d8:	f7ff fa22 	bl	8000d20 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d102      	bne.n	80018ee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80018e8:	2301      	movs	r3, #1
 80018ea:	60fb      	str	r3, [r7, #12]
 80018ec:	e001      	b.n	80018f2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80018ee:	2300      	movs	r3, #0
 80018f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80018f2:	f7ff fa43 	bl	8000d7c <vPortExitCritical>

	return xReturn;
 80018f6:	68fb      	ldr	r3, [r7, #12]
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3710      	adds	r7, #16
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}

08001900 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8001900:	b480      	push	{r7}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800190a:	2300      	movs	r3, #0
 800190c:	60fb      	str	r3, [r7, #12]
 800190e:	e014      	b.n	800193a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8001910:	4a0e      	ldr	r2, [pc, #56]	; (800194c <vQueueAddToRegistry+0x4c>)
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d10b      	bne.n	8001934 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800191c:	490b      	ldr	r1, [pc, #44]	; (800194c <vQueueAddToRegistry+0x4c>)
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	683a      	ldr	r2, [r7, #0]
 8001922:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8001926:	4a09      	ldr	r2, [pc, #36]	; (800194c <vQueueAddToRegistry+0x4c>)
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	00db      	lsls	r3, r3, #3
 800192c:	4413      	add	r3, r2
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8001932:	e005      	b.n	8001940 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	3301      	adds	r3, #1
 8001938:	60fb      	str	r3, [r7, #12]
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	2b07      	cmp	r3, #7
 800193e:	d9e7      	bls.n	8001910 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8001940:	bf00      	nop
 8001942:	3714      	adds	r7, #20
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	20001e0c 	.word	0x20001e0c

08001950 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001950:	b580      	push	{r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	60b9      	str	r1, [r7, #8]
 800195a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8001960:	f7ff f9de 	bl	8000d20 <vPortEnterCritical>
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800196a:	b25b      	sxtb	r3, r3
 800196c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001970:	d103      	bne.n	800197a <vQueueWaitForMessageRestricted+0x2a>
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	2200      	movs	r2, #0
 8001976:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001980:	b25b      	sxtb	r3, r3
 8001982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001986:	d103      	bne.n	8001990 <vQueueWaitForMessageRestricted+0x40>
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	2200      	movs	r2, #0
 800198c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001990:	f7ff f9f4 	bl	8000d7c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001998:	2b00      	cmp	r3, #0
 800199a:	d106      	bne.n	80019aa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	3324      	adds	r3, #36	; 0x24
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	68b9      	ldr	r1, [r7, #8]
 80019a4:	4618      	mov	r0, r3
 80019a6:	f000 fc0d 	bl	80021c4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80019aa:	6978      	ldr	r0, [r7, #20]
 80019ac:	f7ff ff28 	bl	8001800 <prvUnlockQueue>
	}
 80019b0:	bf00      	nop
 80019b2:	3718      	adds	r7, #24
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b08c      	sub	sp, #48	; 0x30
 80019bc:	af04      	add	r7, sp, #16
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	60b9      	str	r1, [r7, #8]
 80019c2:	603b      	str	r3, [r7, #0]
 80019c4:	4613      	mov	r3, r2
 80019c6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80019c8:	88fb      	ldrh	r3, [r7, #6]
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7ff fab7 	bl	8000f40 <pvPortMalloc>
 80019d2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d00e      	beq.n	80019f8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80019da:	2050      	movs	r0, #80	; 0x50
 80019dc:	f7ff fab0 	bl	8000f40 <pvPortMalloc>
 80019e0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d003      	beq.n	80019f0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	697a      	ldr	r2, [r7, #20]
 80019ec:	631a      	str	r2, [r3, #48]	; 0x30
 80019ee:	e005      	b.n	80019fc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80019f0:	6978      	ldr	r0, [r7, #20]
 80019f2:	f7ff faef 	bl	8000fd4 <vPortFree>
 80019f6:	e001      	b.n	80019fc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80019f8:	2300      	movs	r3, #0
 80019fa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d013      	beq.n	8001a2a <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001a02:	88fa      	ldrh	r2, [r7, #6]
 8001a04:	2300      	movs	r3, #0
 8001a06:	9303      	str	r3, [sp, #12]
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	9302      	str	r3, [sp, #8]
 8001a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a0e:	9301      	str	r3, [sp, #4]
 8001a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a12:	9300      	str	r3, [sp, #0]
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	68b9      	ldr	r1, [r7, #8]
 8001a18:	68f8      	ldr	r0, [r7, #12]
 8001a1a:	f000 f80e 	bl	8001a3a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001a1e:	69f8      	ldr	r0, [r7, #28]
 8001a20:	f000 f892 	bl	8001b48 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001a24:	2301      	movs	r3, #1
 8001a26:	61bb      	str	r3, [r7, #24]
 8001a28:	e002      	b.n	8001a30 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a2e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001a30:	69bb      	ldr	r3, [r7, #24]
	}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3720      	adds	r7, #32
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b088      	sub	sp, #32
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	60f8      	str	r0, [r7, #12]
 8001a42:	60b9      	str	r1, [r7, #8]
 8001a44:	607a      	str	r2, [r7, #4]
 8001a46:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a4a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	461a      	mov	r2, r3
 8001a52:	21a5      	movs	r1, #165	; 0xa5
 8001a54:	f002 fff3 	bl	8004a3e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001a62:	3b01      	subs	r3, #1
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	4413      	add	r3, r2
 8001a68:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	f023 0307 	bic.w	r3, r3, #7
 8001a70:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	f003 0307 	and.w	r3, r3, #7
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d009      	beq.n	8001a90 <prvInitialiseNewTask+0x56>
 8001a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a80:	f383 8811 	msr	BASEPRI, r3
 8001a84:	f3bf 8f6f 	isb	sy
 8001a88:	f3bf 8f4f 	dsb	sy
 8001a8c:	617b      	str	r3, [r7, #20]
 8001a8e:	e7fe      	b.n	8001a8e <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001a90:	2300      	movs	r3, #0
 8001a92:	61fb      	str	r3, [r7, #28]
 8001a94:	e012      	b.n	8001abc <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001a96:	68ba      	ldr	r2, [r7, #8]
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	7819      	ldrb	r1, [r3, #0]
 8001a9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	3334      	adds	r3, #52	; 0x34
 8001aa6:	460a      	mov	r2, r1
 8001aa8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8001aaa:	68ba      	ldr	r2, [r7, #8]
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	4413      	add	r3, r2
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d006      	beq.n	8001ac4 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	61fb      	str	r3, [r7, #28]
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	2b09      	cmp	r3, #9
 8001ac0:	d9e9      	bls.n	8001a96 <prvInitialiseNewTask+0x5c>
 8001ac2:	e000      	b.n	8001ac6 <prvInitialiseNewTask+0x8c>
		{
			break;
 8001ac4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ad0:	2b04      	cmp	r3, #4
 8001ad2:	d901      	bls.n	8001ad8 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001ad4:	2304      	movs	r3, #4
 8001ad6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ada:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001adc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ae0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ae2:	641a      	str	r2, [r3, #64]	; 0x40
		pxNewTCB->uxMutexesHeld = 0;
 8001ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aec:	3304      	adds	r3, #4
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7fe ff79 	bl	80009e6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001af6:	3318      	adds	r3, #24
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7fe ff74 	bl	80009e6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b02:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b06:	f1c3 0205 	rsb	r2, r3, #5
 8001b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b0c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b12:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b16:	2200      	movs	r2, #0
 8001b18:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001b22:	683a      	ldr	r2, [r7, #0]
 8001b24:	68f9      	ldr	r1, [r7, #12]
 8001b26:	69b8      	ldr	r0, [r7, #24]
 8001b28:	f7fe fff2 	bl	8000b10 <pxPortInitialiseStack>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b30:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8001b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d002      	beq.n	8001b3e <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b3c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001b3e:	bf00      	nop
 8001b40:	3720      	adds	r7, #32
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
	...

08001b48 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001b50:	f7ff f8e6 	bl	8000d20 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001b54:	4b2a      	ldr	r3, [pc, #168]	; (8001c00 <prvAddNewTaskToReadyList+0xb8>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	3301      	adds	r3, #1
 8001b5a:	4a29      	ldr	r2, [pc, #164]	; (8001c00 <prvAddNewTaskToReadyList+0xb8>)
 8001b5c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001b5e:	4b29      	ldr	r3, [pc, #164]	; (8001c04 <prvAddNewTaskToReadyList+0xbc>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d109      	bne.n	8001b7a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001b66:	4a27      	ldr	r2, [pc, #156]	; (8001c04 <prvAddNewTaskToReadyList+0xbc>)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001b6c:	4b24      	ldr	r3, [pc, #144]	; (8001c00 <prvAddNewTaskToReadyList+0xb8>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d110      	bne.n	8001b96 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001b74:	f000 fcc0 	bl	80024f8 <prvInitialiseTaskLists>
 8001b78:	e00d      	b.n	8001b96 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8001b7a:	4b23      	ldr	r3, [pc, #140]	; (8001c08 <prvAddNewTaskToReadyList+0xc0>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d109      	bne.n	8001b96 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001b82:	4b20      	ldr	r3, [pc, #128]	; (8001c04 <prvAddNewTaskToReadyList+0xbc>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d802      	bhi.n	8001b96 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001b90:	4a1c      	ldr	r2, [pc, #112]	; (8001c04 <prvAddNewTaskToReadyList+0xbc>)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8001b96:	4b1d      	ldr	r3, [pc, #116]	; (8001c0c <prvAddNewTaskToReadyList+0xc4>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	4a1b      	ldr	r2, [pc, #108]	; (8001c0c <prvAddNewTaskToReadyList+0xc4>)
 8001b9e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	409a      	lsls	r2, r3
 8001ba8:	4b19      	ldr	r3, [pc, #100]	; (8001c10 <prvAddNewTaskToReadyList+0xc8>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	4a18      	ldr	r2, [pc, #96]	; (8001c10 <prvAddNewTaskToReadyList+0xc8>)
 8001bb0:	6013      	str	r3, [r2, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	4413      	add	r3, r2
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	4a15      	ldr	r2, [pc, #84]	; (8001c14 <prvAddNewTaskToReadyList+0xcc>)
 8001bc0:	441a      	add	r2, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	3304      	adds	r3, #4
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	4610      	mov	r0, r2
 8001bca:	f7fe ff19 	bl	8000a00 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001bce:	f7ff f8d5 	bl	8000d7c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001bd2:	4b0d      	ldr	r3, [pc, #52]	; (8001c08 <prvAddNewTaskToReadyList+0xc0>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d00e      	beq.n	8001bf8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001bda:	4b0a      	ldr	r3, [pc, #40]	; (8001c04 <prvAddNewTaskToReadyList+0xbc>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d207      	bcs.n	8001bf8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001be8:	4b0b      	ldr	r3, [pc, #44]	; (8001c18 <prvAddNewTaskToReadyList+0xd0>)
 8001bea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	f3bf 8f4f 	dsb	sy
 8001bf4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001bf8:	bf00      	nop
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	20001d80 	.word	0x20001d80
 8001c04:	20001ca8 	.word	0x20001ca8
 8001c08:	20001d8c 	.word	0x20001d8c
 8001c0c:	20001d9c 	.word	0x20001d9c
 8001c10:	20001d88 	.word	0x20001d88
 8001c14:	20001cac 	.word	0x20001cac
 8001c18:	e000ed04 	.word	0xe000ed04

08001c1c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8001c24:	2300      	movs	r3, #0
 8001c26:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d016      	beq.n	8001c5c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8001c2e:	4b13      	ldr	r3, [pc, #76]	; (8001c7c <vTaskDelay+0x60>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d009      	beq.n	8001c4a <vTaskDelay+0x2e>
 8001c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c3a:	f383 8811 	msr	BASEPRI, r3
 8001c3e:	f3bf 8f6f 	isb	sy
 8001c42:	f3bf 8f4f 	dsb	sy
 8001c46:	60bb      	str	r3, [r7, #8]
 8001c48:	e7fe      	b.n	8001c48 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8001c4a:	f000 f867 	bl	8001d1c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001c4e:	2100      	movs	r1, #0
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f000 fe47 	bl	80028e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8001c56:	f000 f86f 	bl	8001d38 <xTaskResumeAll>
 8001c5a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d107      	bne.n	8001c72 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8001c62:	4b07      	ldr	r3, [pc, #28]	; (8001c80 <vTaskDelay+0x64>)
 8001c64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c68:	601a      	str	r2, [r3, #0]
 8001c6a:	f3bf 8f4f 	dsb	sy
 8001c6e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001c72:	bf00      	nop
 8001c74:	3710      	adds	r7, #16
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	20001da8 	.word	0x20001da8
 8001c80:	e000ed04 	.word	0xe000ed04

08001c84 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b086      	sub	sp, #24
 8001c88:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8001c8a:	4b1e      	ldr	r3, [pc, #120]	; (8001d04 <vTaskStartScheduler+0x80>)
 8001c8c:	9301      	str	r3, [sp, #4]
 8001c8e:	2300      	movs	r3, #0
 8001c90:	9300      	str	r3, [sp, #0]
 8001c92:	2300      	movs	r3, #0
 8001c94:	2282      	movs	r2, #130	; 0x82
 8001c96:	491c      	ldr	r1, [pc, #112]	; (8001d08 <vTaskStartScheduler+0x84>)
 8001c98:	481c      	ldr	r0, [pc, #112]	; (8001d0c <vTaskStartScheduler+0x88>)
 8001c9a:	f7ff fe8d 	bl	80019b8 <xTaskCreate>
 8001c9e:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d102      	bne.n	8001cac <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8001ca6:	f000 fe83 	bl	80029b0 <xTimerCreateTimerTask>
 8001caa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d115      	bne.n	8001cde <vTaskStartScheduler+0x5a>
 8001cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cb6:	f383 8811 	msr	BASEPRI, r3
 8001cba:	f3bf 8f6f 	isb	sy
 8001cbe:	f3bf 8f4f 	dsb	sy
 8001cc2:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001cc4:	4b12      	ldr	r3, [pc, #72]	; (8001d10 <vTaskStartScheduler+0x8c>)
 8001cc6:	f04f 32ff 	mov.w	r2, #4294967295
 8001cca:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001ccc:	4b11      	ldr	r3, [pc, #68]	; (8001d14 <vTaskStartScheduler+0x90>)
 8001cce:	2201      	movs	r2, #1
 8001cd0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8001cd2:	4b11      	ldr	r3, [pc, #68]	; (8001d18 <vTaskStartScheduler+0x94>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001cd8:	f7fe ff96 	bl	8000c08 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001cdc:	e00d      	b.n	8001cfa <vTaskStartScheduler+0x76>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ce4:	d109      	bne.n	8001cfa <vTaskStartScheduler+0x76>
 8001ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cea:	f383 8811 	msr	BASEPRI, r3
 8001cee:	f3bf 8f6f 	isb	sy
 8001cf2:	f3bf 8f4f 	dsb	sy
 8001cf6:	607b      	str	r3, [r7, #4]
 8001cf8:	e7fe      	b.n	8001cf8 <vTaskStartScheduler+0x74>
}
 8001cfa:	bf00      	nop
 8001cfc:	3710      	adds	r7, #16
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	20001da4 	.word	0x20001da4
 8001d08:	080053b0 	.word	0x080053b0
 8001d0c:	080024c5 	.word	0x080024c5
 8001d10:	20001da0 	.word	0x20001da0
 8001d14:	20001d8c 	.word	0x20001d8c
 8001d18:	20001d84 	.word	0x20001d84

08001d1c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8001d20:	4b04      	ldr	r3, [pc, #16]	; (8001d34 <vTaskSuspendAll+0x18>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	3301      	adds	r3, #1
 8001d26:	4a03      	ldr	r2, [pc, #12]	; (8001d34 <vTaskSuspendAll+0x18>)
 8001d28:	6013      	str	r3, [r2, #0]
}
 8001d2a:	bf00      	nop
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr
 8001d34:	20001da8 	.word	0x20001da8

08001d38 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8001d42:	2300      	movs	r3, #0
 8001d44:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001d46:	4b41      	ldr	r3, [pc, #260]	; (8001e4c <xTaskResumeAll+0x114>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d109      	bne.n	8001d62 <xTaskResumeAll+0x2a>
 8001d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d52:	f383 8811 	msr	BASEPRI, r3
 8001d56:	f3bf 8f6f 	isb	sy
 8001d5a:	f3bf 8f4f 	dsb	sy
 8001d5e:	603b      	str	r3, [r7, #0]
 8001d60:	e7fe      	b.n	8001d60 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001d62:	f7fe ffdd 	bl	8000d20 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001d66:	4b39      	ldr	r3, [pc, #228]	; (8001e4c <xTaskResumeAll+0x114>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	4a37      	ldr	r2, [pc, #220]	; (8001e4c <xTaskResumeAll+0x114>)
 8001d6e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001d70:	4b36      	ldr	r3, [pc, #216]	; (8001e4c <xTaskResumeAll+0x114>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d161      	bne.n	8001e3c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001d78:	4b35      	ldr	r3, [pc, #212]	; (8001e50 <xTaskResumeAll+0x118>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d05d      	beq.n	8001e3c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001d80:	e02e      	b.n	8001de0 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001d82:	4b34      	ldr	r3, [pc, #208]	; (8001e54 <xTaskResumeAll+0x11c>)
 8001d84:	68db      	ldr	r3, [r3, #12]
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	3318      	adds	r3, #24
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7fe fe93 	bl	8000aba <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	3304      	adds	r3, #4
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7fe fe8e 	bl	8000aba <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da2:	2201      	movs	r2, #1
 8001da4:	409a      	lsls	r2, r3
 8001da6:	4b2c      	ldr	r3, [pc, #176]	; (8001e58 <xTaskResumeAll+0x120>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	4a2a      	ldr	r2, [pc, #168]	; (8001e58 <xTaskResumeAll+0x120>)
 8001dae:	6013      	str	r3, [r2, #0]
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001db4:	4613      	mov	r3, r2
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	4413      	add	r3, r2
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	4a27      	ldr	r2, [pc, #156]	; (8001e5c <xTaskResumeAll+0x124>)
 8001dbe:	441a      	add	r2, r3
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	3304      	adds	r3, #4
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	4610      	mov	r0, r2
 8001dc8:	f7fe fe1a 	bl	8000a00 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dd0:	4b23      	ldr	r3, [pc, #140]	; (8001e60 <xTaskResumeAll+0x128>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d302      	bcc.n	8001de0 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8001dda:	4b22      	ldr	r3, [pc, #136]	; (8001e64 <xTaskResumeAll+0x12c>)
 8001ddc:	2201      	movs	r2, #1
 8001dde:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001de0:	4b1c      	ldr	r3, [pc, #112]	; (8001e54 <xTaskResumeAll+0x11c>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d1cc      	bne.n	8001d82 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001dee:	f000 fc0f 	bl	8002610 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8001df2:	4b1d      	ldr	r3, [pc, #116]	; (8001e68 <xTaskResumeAll+0x130>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d010      	beq.n	8001e20 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8001dfe:	f000 f847 	bl	8001e90 <xTaskIncrementTick>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d002      	beq.n	8001e0e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8001e08:	4b16      	ldr	r3, [pc, #88]	; (8001e64 <xTaskResumeAll+0x12c>)
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	3b01      	subs	r3, #1
 8001e12:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d1f1      	bne.n	8001dfe <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8001e1a:	4b13      	ldr	r3, [pc, #76]	; (8001e68 <xTaskResumeAll+0x130>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001e20:	4b10      	ldr	r3, [pc, #64]	; (8001e64 <xTaskResumeAll+0x12c>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d009      	beq.n	8001e3c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001e2c:	4b0f      	ldr	r3, [pc, #60]	; (8001e6c <xTaskResumeAll+0x134>)
 8001e2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	f3bf 8f4f 	dsb	sy
 8001e38:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001e3c:	f7fe ff9e 	bl	8000d7c <vPortExitCritical>

	return xAlreadyYielded;
 8001e40:	68bb      	ldr	r3, [r7, #8]
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3710      	adds	r7, #16
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	20001da8 	.word	0x20001da8
 8001e50:	20001d80 	.word	0x20001d80
 8001e54:	20001d40 	.word	0x20001d40
 8001e58:	20001d88 	.word	0x20001d88
 8001e5c:	20001cac 	.word	0x20001cac
 8001e60:	20001ca8 	.word	0x20001ca8
 8001e64:	20001d94 	.word	0x20001d94
 8001e68:	20001d90 	.word	0x20001d90
 8001e6c:	e000ed04 	.word	0xe000ed04

08001e70 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8001e76:	4b05      	ldr	r3, [pc, #20]	; (8001e8c <xTaskGetTickCount+0x1c>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8001e7c:	687b      	ldr	r3, [r7, #4]
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	370c      	adds	r7, #12
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	20001d84 	.word	0x20001d84

08001e90 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b086      	sub	sp, #24
 8001e94:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001e96:	2300      	movs	r3, #0
 8001e98:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001e9a:	4b50      	ldr	r3, [pc, #320]	; (8001fdc <xTaskIncrementTick+0x14c>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	f040 808c 	bne.w	8001fbc <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 8001ea4:	4b4e      	ldr	r3, [pc, #312]	; (8001fe0 <xTaskIncrementTick+0x150>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001eac:	4a4c      	ldr	r2, [pc, #304]	; (8001fe0 <xTaskIncrementTick+0x150>)
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d11f      	bne.n	8001ef8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8001eb8:	4b4a      	ldr	r3, [pc, #296]	; (8001fe4 <xTaskIncrementTick+0x154>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d009      	beq.n	8001ed6 <xTaskIncrementTick+0x46>
 8001ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ec6:	f383 8811 	msr	BASEPRI, r3
 8001eca:	f3bf 8f6f 	isb	sy
 8001ece:	f3bf 8f4f 	dsb	sy
 8001ed2:	603b      	str	r3, [r7, #0]
 8001ed4:	e7fe      	b.n	8001ed4 <xTaskIncrementTick+0x44>
 8001ed6:	4b43      	ldr	r3, [pc, #268]	; (8001fe4 <xTaskIncrementTick+0x154>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	60fb      	str	r3, [r7, #12]
 8001edc:	4b42      	ldr	r3, [pc, #264]	; (8001fe8 <xTaskIncrementTick+0x158>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a40      	ldr	r2, [pc, #256]	; (8001fe4 <xTaskIncrementTick+0x154>)
 8001ee2:	6013      	str	r3, [r2, #0]
 8001ee4:	4a40      	ldr	r2, [pc, #256]	; (8001fe8 <xTaskIncrementTick+0x158>)
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	6013      	str	r3, [r2, #0]
 8001eea:	4b40      	ldr	r3, [pc, #256]	; (8001fec <xTaskIncrementTick+0x15c>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	3301      	adds	r3, #1
 8001ef0:	4a3e      	ldr	r2, [pc, #248]	; (8001fec <xTaskIncrementTick+0x15c>)
 8001ef2:	6013      	str	r3, [r2, #0]
 8001ef4:	f000 fb8c 	bl	8002610 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001ef8:	4b3d      	ldr	r3, [pc, #244]	; (8001ff0 <xTaskIncrementTick+0x160>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	693a      	ldr	r2, [r7, #16]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d34d      	bcc.n	8001f9e <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001f02:	4b38      	ldr	r3, [pc, #224]	; (8001fe4 <xTaskIncrementTick+0x154>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d101      	bne.n	8001f10 <xTaskIncrementTick+0x80>
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e000      	b.n	8001f12 <xTaskIncrementTick+0x82>
 8001f10:	2300      	movs	r3, #0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d004      	beq.n	8001f20 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001f16:	4b36      	ldr	r3, [pc, #216]	; (8001ff0 <xTaskIncrementTick+0x160>)
 8001f18:	f04f 32ff 	mov.w	r2, #4294967295
 8001f1c:	601a      	str	r2, [r3, #0]
					break;
 8001f1e:	e03e      	b.n	8001f9e <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001f20:	4b30      	ldr	r3, [pc, #192]	; (8001fe4 <xTaskIncrementTick+0x154>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001f30:	693a      	ldr	r2, [r7, #16]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d203      	bcs.n	8001f40 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001f38:	4a2d      	ldr	r2, [pc, #180]	; (8001ff0 <xTaskIncrementTick+0x160>)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6013      	str	r3, [r2, #0]
						break;
 8001f3e:	e02e      	b.n	8001f9e <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	3304      	adds	r3, #4
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7fe fdb8 	bl	8000aba <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d004      	beq.n	8001f5c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	3318      	adds	r3, #24
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7fe fdaf 	bl	8000aba <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f60:	2201      	movs	r2, #1
 8001f62:	409a      	lsls	r2, r3
 8001f64:	4b23      	ldr	r3, [pc, #140]	; (8001ff4 <xTaskIncrementTick+0x164>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	4a22      	ldr	r2, [pc, #136]	; (8001ff4 <xTaskIncrementTick+0x164>)
 8001f6c:	6013      	str	r3, [r2, #0]
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f72:	4613      	mov	r3, r2
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	4413      	add	r3, r2
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	4a1f      	ldr	r2, [pc, #124]	; (8001ff8 <xTaskIncrementTick+0x168>)
 8001f7c:	441a      	add	r2, r3
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	3304      	adds	r3, #4
 8001f82:	4619      	mov	r1, r3
 8001f84:	4610      	mov	r0, r2
 8001f86:	f7fe fd3b 	bl	8000a00 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f8e:	4b1b      	ldr	r3, [pc, #108]	; (8001ffc <xTaskIncrementTick+0x16c>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d3b4      	bcc.n	8001f02 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001f9c:	e7b1      	b.n	8001f02 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001f9e:	4b17      	ldr	r3, [pc, #92]	; (8001ffc <xTaskIncrementTick+0x16c>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fa4:	4914      	ldr	r1, [pc, #80]	; (8001ff8 <xTaskIncrementTick+0x168>)
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	4413      	add	r3, r2
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	440b      	add	r3, r1
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d907      	bls.n	8001fc6 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	617b      	str	r3, [r7, #20]
 8001fba:	e004      	b.n	8001fc6 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8001fbc:	4b10      	ldr	r3, [pc, #64]	; (8002000 <xTaskIncrementTick+0x170>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	4a0f      	ldr	r2, [pc, #60]	; (8002000 <xTaskIncrementTick+0x170>)
 8001fc4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8001fc6:	4b0f      	ldr	r3, [pc, #60]	; (8002004 <xTaskIncrementTick+0x174>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8001fd2:	697b      	ldr	r3, [r7, #20]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3718      	adds	r7, #24
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	20001da8 	.word	0x20001da8
 8001fe0:	20001d84 	.word	0x20001d84
 8001fe4:	20001d38 	.word	0x20001d38
 8001fe8:	20001d3c 	.word	0x20001d3c
 8001fec:	20001d98 	.word	0x20001d98
 8001ff0:	20001da0 	.word	0x20001da0
 8001ff4:	20001d88 	.word	0x20001d88
 8001ff8:	20001cac 	.word	0x20001cac
 8001ffc:	20001ca8 	.word	0x20001ca8
 8002000:	20001d90 	.word	0x20001d90
 8002004:	20001d94 	.word	0x20001d94

08002008 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b088      	sub	sp, #32
 800200c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800200e:	4b39      	ldr	r3, [pc, #228]	; (80020f4 <vTaskSwitchContext+0xec>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d003      	beq.n	800201e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002016:	4b38      	ldr	r3, [pc, #224]	; (80020f8 <vTaskSwitchContext+0xf0>)
 8002018:	2201      	movs	r2, #1
 800201a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800201c:	e065      	b.n	80020ea <vTaskSwitchContext+0xe2>
		xYieldPending = pdFALSE;
 800201e:	4b36      	ldr	r3, [pc, #216]	; (80020f8 <vTaskSwitchContext+0xf0>)
 8002020:	2200      	movs	r2, #0
 8002022:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8002024:	4b35      	ldr	r3, [pc, #212]	; (80020fc <vTaskSwitchContext+0xf4>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202a:	61fb      	str	r3, [r7, #28]
 800202c:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8002030:	61bb      	str	r3, [r7, #24]
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	429a      	cmp	r2, r3
 800203a:	d111      	bne.n	8002060 <vTaskSwitchContext+0x58>
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	3304      	adds	r3, #4
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	429a      	cmp	r2, r3
 8002046:	d10b      	bne.n	8002060 <vTaskSwitchContext+0x58>
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	3308      	adds	r3, #8
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	429a      	cmp	r2, r3
 8002052:	d105      	bne.n	8002060 <vTaskSwitchContext+0x58>
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	330c      	adds	r3, #12
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	429a      	cmp	r2, r3
 800205e:	d008      	beq.n	8002072 <vTaskSwitchContext+0x6a>
 8002060:	4b26      	ldr	r3, [pc, #152]	; (80020fc <vTaskSwitchContext+0xf4>)
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	4b25      	ldr	r3, [pc, #148]	; (80020fc <vTaskSwitchContext+0xf4>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	3334      	adds	r3, #52	; 0x34
 800206a:	4619      	mov	r1, r3
 800206c:	4610      	mov	r0, r2
 800206e:	f002 f8a4 	bl	80041ba <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002072:	4b23      	ldr	r3, [pc, #140]	; (8002100 <vTaskSwitchContext+0xf8>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	fab3 f383 	clz	r3, r3
 800207e:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002080:	7afb      	ldrb	r3, [r7, #11]
 8002082:	f1c3 031f 	rsb	r3, r3, #31
 8002086:	617b      	str	r3, [r7, #20]
 8002088:	491e      	ldr	r1, [pc, #120]	; (8002104 <vTaskSwitchContext+0xfc>)
 800208a:	697a      	ldr	r2, [r7, #20]
 800208c:	4613      	mov	r3, r2
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	4413      	add	r3, r2
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	440b      	add	r3, r1
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d109      	bne.n	80020b0 <vTaskSwitchContext+0xa8>
	__asm volatile
 800209c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020a0:	f383 8811 	msr	BASEPRI, r3
 80020a4:	f3bf 8f6f 	isb	sy
 80020a8:	f3bf 8f4f 	dsb	sy
 80020ac:	607b      	str	r3, [r7, #4]
 80020ae:	e7fe      	b.n	80020ae <vTaskSwitchContext+0xa6>
 80020b0:	697a      	ldr	r2, [r7, #20]
 80020b2:	4613      	mov	r3, r2
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	4413      	add	r3, r2
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	4a12      	ldr	r2, [pc, #72]	; (8002104 <vTaskSwitchContext+0xfc>)
 80020bc:	4413      	add	r3, r2
 80020be:	613b      	str	r3, [r7, #16]
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	685a      	ldr	r2, [r3, #4]
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	605a      	str	r2, [r3, #4]
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	685a      	ldr	r2, [r3, #4]
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	3308      	adds	r3, #8
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d104      	bne.n	80020e0 <vTaskSwitchContext+0xd8>
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	685a      	ldr	r2, [r3, #4]
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	605a      	str	r2, [r3, #4]
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	4a05      	ldr	r2, [pc, #20]	; (80020fc <vTaskSwitchContext+0xf4>)
 80020e8:	6013      	str	r3, [r2, #0]
}
 80020ea:	bf00      	nop
 80020ec:	3720      	adds	r7, #32
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	20001da8 	.word	0x20001da8
 80020f8:	20001d94 	.word	0x20001d94
 80020fc:	20001ca8 	.word	0x20001ca8
 8002100:	20001d88 	.word	0x20001d88
 8002104:	20001cac 	.word	0x20001cac

08002108 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d109      	bne.n	800212c <vTaskPlaceOnEventList+0x24>
 8002118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800211c:	f383 8811 	msr	BASEPRI, r3
 8002120:	f3bf 8f6f 	isb	sy
 8002124:	f3bf 8f4f 	dsb	sy
 8002128:	60fb      	str	r3, [r7, #12]
 800212a:	e7fe      	b.n	800212a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800212c:	4b07      	ldr	r3, [pc, #28]	; (800214c <vTaskPlaceOnEventList+0x44>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	3318      	adds	r3, #24
 8002132:	4619      	mov	r1, r3
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f7fe fc87 	bl	8000a48 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800213a:	2101      	movs	r1, #1
 800213c:	6838      	ldr	r0, [r7, #0]
 800213e:	f000 fbd1 	bl	80028e4 <prvAddCurrentTaskToDelayedList>
}
 8002142:	bf00      	nop
 8002144:	3710      	adds	r7, #16
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	20001ca8 	.word	0x20001ca8

08002150 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b086      	sub	sp, #24
 8002154:	af00      	add	r7, sp, #0
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	60b9      	str	r1, [r7, #8]
 800215a:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d109      	bne.n	8002176 <vTaskPlaceOnUnorderedEventList+0x26>
 8002162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002166:	f383 8811 	msr	BASEPRI, r3
 800216a:	f3bf 8f6f 	isb	sy
 800216e:	f3bf 8f4f 	dsb	sy
 8002172:	617b      	str	r3, [r7, #20]
 8002174:	e7fe      	b.n	8002174 <vTaskPlaceOnUnorderedEventList+0x24>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8002176:	4b11      	ldr	r3, [pc, #68]	; (80021bc <vTaskPlaceOnUnorderedEventList+0x6c>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d109      	bne.n	8002192 <vTaskPlaceOnUnorderedEventList+0x42>
 800217e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002182:	f383 8811 	msr	BASEPRI, r3
 8002186:	f3bf 8f6f 	isb	sy
 800218a:	f3bf 8f4f 	dsb	sy
 800218e:	613b      	str	r3, [r7, #16]
 8002190:	e7fe      	b.n	8002190 <vTaskPlaceOnUnorderedEventList+0x40>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8002192:	4b0b      	ldr	r3, [pc, #44]	; (80021c0 <vTaskPlaceOnUnorderedEventList+0x70>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	68ba      	ldr	r2, [r7, #8]
 8002198:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800219c:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800219e:	4b08      	ldr	r3, [pc, #32]	; (80021c0 <vTaskPlaceOnUnorderedEventList+0x70>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	3318      	adds	r3, #24
 80021a4:	4619      	mov	r1, r3
 80021a6:	68f8      	ldr	r0, [r7, #12]
 80021a8:	f7fe fc2a 	bl	8000a00 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80021ac:	2101      	movs	r1, #1
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f000 fb98 	bl	80028e4 <prvAddCurrentTaskToDelayedList>
}
 80021b4:	bf00      	nop
 80021b6:	3718      	adds	r7, #24
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	20001da8 	.word	0x20001da8
 80021c0:	20001ca8 	.word	0x20001ca8

080021c4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b086      	sub	sp, #24
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d109      	bne.n	80021ea <vTaskPlaceOnEventListRestricted+0x26>
 80021d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021da:	f383 8811 	msr	BASEPRI, r3
 80021de:	f3bf 8f6f 	isb	sy
 80021e2:	f3bf 8f4f 	dsb	sy
 80021e6:	617b      	str	r3, [r7, #20]
 80021e8:	e7fe      	b.n	80021e8 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80021ea:	4b0a      	ldr	r3, [pc, #40]	; (8002214 <vTaskPlaceOnEventListRestricted+0x50>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	3318      	adds	r3, #24
 80021f0:	4619      	mov	r1, r3
 80021f2:	68f8      	ldr	r0, [r7, #12]
 80021f4:	f7fe fc04 	bl	8000a00 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d002      	beq.n	8002204 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80021fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002202:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002204:	6879      	ldr	r1, [r7, #4]
 8002206:	68b8      	ldr	r0, [r7, #8]
 8002208:	f000 fb6c 	bl	80028e4 <prvAddCurrentTaskToDelayedList>
	}
 800220c:	bf00      	nop
 800220e:	3718      	adds	r7, #24
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	20001ca8 	.word	0x20001ca8

08002218 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b086      	sub	sp, #24
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d109      	bne.n	8002242 <xTaskRemoveFromEventList+0x2a>
 800222e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002232:	f383 8811 	msr	BASEPRI, r3
 8002236:	f3bf 8f6f 	isb	sy
 800223a:	f3bf 8f4f 	dsb	sy
 800223e:	60fb      	str	r3, [r7, #12]
 8002240:	e7fe      	b.n	8002240 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	3318      	adds	r3, #24
 8002246:	4618      	mov	r0, r3
 8002248:	f7fe fc37 	bl	8000aba <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800224c:	4b1d      	ldr	r3, [pc, #116]	; (80022c4 <xTaskRemoveFromEventList+0xac>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d11c      	bne.n	800228e <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	3304      	adds	r3, #4
 8002258:	4618      	mov	r0, r3
 800225a:	f7fe fc2e 	bl	8000aba <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002262:	2201      	movs	r2, #1
 8002264:	409a      	lsls	r2, r3
 8002266:	4b18      	ldr	r3, [pc, #96]	; (80022c8 <xTaskRemoveFromEventList+0xb0>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4313      	orrs	r3, r2
 800226c:	4a16      	ldr	r2, [pc, #88]	; (80022c8 <xTaskRemoveFromEventList+0xb0>)
 800226e:	6013      	str	r3, [r2, #0]
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002274:	4613      	mov	r3, r2
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	4413      	add	r3, r2
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	4a13      	ldr	r2, [pc, #76]	; (80022cc <xTaskRemoveFromEventList+0xb4>)
 800227e:	441a      	add	r2, r3
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	3304      	adds	r3, #4
 8002284:	4619      	mov	r1, r3
 8002286:	4610      	mov	r0, r2
 8002288:	f7fe fbba 	bl	8000a00 <vListInsertEnd>
 800228c:	e005      	b.n	800229a <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	3318      	adds	r3, #24
 8002292:	4619      	mov	r1, r3
 8002294:	480e      	ldr	r0, [pc, #56]	; (80022d0 <xTaskRemoveFromEventList+0xb8>)
 8002296:	f7fe fbb3 	bl	8000a00 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800229e:	4b0d      	ldr	r3, [pc, #52]	; (80022d4 <xTaskRemoveFromEventList+0xbc>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d905      	bls.n	80022b4 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80022a8:	2301      	movs	r3, #1
 80022aa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80022ac:	4b0a      	ldr	r3, [pc, #40]	; (80022d8 <xTaskRemoveFromEventList+0xc0>)
 80022ae:	2201      	movs	r2, #1
 80022b0:	601a      	str	r2, [r3, #0]
 80022b2:	e001      	b.n	80022b8 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 80022b4:	2300      	movs	r3, #0
 80022b6:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80022b8:	697b      	ldr	r3, [r7, #20]
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3718      	adds	r7, #24
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	20001da8 	.word	0x20001da8
 80022c8:	20001d88 	.word	0x20001d88
 80022cc:	20001cac 	.word	0x20001cac
 80022d0:	20001d40 	.word	0x20001d40
 80022d4:	20001ca8 	.word	0x20001ca8
 80022d8:	20001d94 	.word	0x20001d94

080022dc <xTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b086      	sub	sp, #24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;
BaseType_t xReturn;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80022e6:	4b2b      	ldr	r3, [pc, #172]	; (8002394 <xTaskRemoveFromUnorderedEventList+0xb8>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d109      	bne.n	8002302 <xTaskRemoveFromUnorderedEventList+0x26>
 80022ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022f2:	f383 8811 	msr	BASEPRI, r3
 80022f6:	f3bf 8f6f 	isb	sy
 80022fa:	f3bf 8f4f 	dsb	sy
 80022fe:	60fb      	str	r3, [r7, #12]
 8002300:	e7fe      	b.n	8002300 <xTaskRemoveFromUnorderedEventList+0x24>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d109      	bne.n	800232c <xTaskRemoveFromUnorderedEventList+0x50>
 8002318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800231c:	f383 8811 	msr	BASEPRI, r3
 8002320:	f3bf 8f6f 	isb	sy
 8002324:	f3bf 8f4f 	dsb	sy
 8002328:	60bb      	str	r3, [r7, #8]
 800232a:	e7fe      	b.n	800232a <xTaskRemoveFromUnorderedEventList+0x4e>
	( void ) uxListRemove( pxEventListItem );
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f7fe fbc4 	bl	8000aba <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	3304      	adds	r3, #4
 8002336:	4618      	mov	r0, r3
 8002338:	f7fe fbbf 	bl	8000aba <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002340:	2201      	movs	r2, #1
 8002342:	409a      	lsls	r2, r3
 8002344:	4b14      	ldr	r3, [pc, #80]	; (8002398 <xTaskRemoveFromUnorderedEventList+0xbc>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4313      	orrs	r3, r2
 800234a:	4a13      	ldr	r2, [pc, #76]	; (8002398 <xTaskRemoveFromUnorderedEventList+0xbc>)
 800234c:	6013      	str	r3, [r2, #0]
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002352:	4613      	mov	r3, r2
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	4413      	add	r3, r2
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	4a10      	ldr	r2, [pc, #64]	; (800239c <xTaskRemoveFromUnorderedEventList+0xc0>)
 800235c:	441a      	add	r2, r3
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	3304      	adds	r3, #4
 8002362:	4619      	mov	r1, r3
 8002364:	4610      	mov	r0, r2
 8002366:	f7fe fb4b 	bl	8000a00 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800236e:	4b0c      	ldr	r3, [pc, #48]	; (80023a0 <xTaskRemoveFromUnorderedEventList+0xc4>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002374:	429a      	cmp	r2, r3
 8002376:	d905      	bls.n	8002384 <xTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
 8002378:	2301      	movs	r3, #1
 800237a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800237c:	4b09      	ldr	r3, [pc, #36]	; (80023a4 <xTaskRemoveFromUnorderedEventList+0xc8>)
 800237e:	2201      	movs	r2, #1
 8002380:	601a      	str	r2, [r3, #0]
 8002382:	e001      	b.n	8002388 <xTaskRemoveFromUnorderedEventList+0xac>
	}
	else
	{
		xReturn = pdFALSE;
 8002384:	2300      	movs	r3, #0
 8002386:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8002388:	697b      	ldr	r3, [r7, #20]
}
 800238a:	4618      	mov	r0, r3
 800238c:	3718      	adds	r7, #24
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	20001da8 	.word	0x20001da8
 8002398:	20001d88 	.word	0x20001d88
 800239c:	20001cac 	.word	0x20001cac
 80023a0:	20001ca8 	.word	0x20001ca8
 80023a4:	20001d94 	.word	0x20001d94

080023a8 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80023a8:	b480      	push	{r7}
 80023aa:	b085      	sub	sp, #20
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d109      	bne.n	80023ca <vTaskSetTimeOutState+0x22>
 80023b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023ba:	f383 8811 	msr	BASEPRI, r3
 80023be:	f3bf 8f6f 	isb	sy
 80023c2:	f3bf 8f4f 	dsb	sy
 80023c6:	60fb      	str	r3, [r7, #12]
 80023c8:	e7fe      	b.n	80023c8 <vTaskSetTimeOutState+0x20>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80023ca:	4b07      	ldr	r3, [pc, #28]	; (80023e8 <vTaskSetTimeOutState+0x40>)
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80023d2:	4b06      	ldr	r3, [pc, #24]	; (80023ec <vTaskSetTimeOutState+0x44>)
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	605a      	str	r2, [r3, #4]
}
 80023da:	bf00      	nop
 80023dc:	3714      	adds	r7, #20
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	20001d98 	.word	0x20001d98
 80023ec:	20001d84 	.word	0x20001d84

080023f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d109      	bne.n	8002414 <xTaskCheckForTimeOut+0x24>
 8002400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002404:	f383 8811 	msr	BASEPRI, r3
 8002408:	f3bf 8f6f 	isb	sy
 800240c:	f3bf 8f4f 	dsb	sy
 8002410:	60fb      	str	r3, [r7, #12]
 8002412:	e7fe      	b.n	8002412 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d109      	bne.n	800242e <xTaskCheckForTimeOut+0x3e>
 800241a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800241e:	f383 8811 	msr	BASEPRI, r3
 8002422:	f3bf 8f6f 	isb	sy
 8002426:	f3bf 8f4f 	dsb	sy
 800242a:	60bb      	str	r3, [r7, #8]
 800242c:	e7fe      	b.n	800242c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800242e:	f7fe fc77 	bl	8000d20 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002432:	4b1c      	ldr	r3, [pc, #112]	; (80024a4 <xTaskCheckForTimeOut+0xb4>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	613b      	str	r3, [r7, #16]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002440:	d102      	bne.n	8002448 <xTaskCheckForTimeOut+0x58>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002442:	2300      	movs	r3, #0
 8002444:	617b      	str	r3, [r7, #20]
 8002446:	e026      	b.n	8002496 <xTaskCheckForTimeOut+0xa6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	4b16      	ldr	r3, [pc, #88]	; (80024a8 <xTaskCheckForTimeOut+0xb8>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	429a      	cmp	r2, r3
 8002452:	d007      	beq.n	8002464 <xTaskCheckForTimeOut+0x74>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685a      	ldr	r2, [r3, #4]
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	429a      	cmp	r2, r3
 800245c:	d802      	bhi.n	8002464 <xTaskCheckForTimeOut+0x74>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800245e:	2301      	movs	r3, #1
 8002460:	617b      	str	r3, [r7, #20]
 8002462:	e018      	b.n	8002496 <xTaskCheckForTimeOut+0xa6>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	693a      	ldr	r2, [r7, #16]
 800246a:	1ad2      	subs	r2, r2, r3
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	429a      	cmp	r2, r3
 8002472:	d20e      	bcs.n	8002492 <xTaskCheckForTimeOut+0xa2>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6859      	ldr	r1, [r3, #4]
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	1acb      	subs	r3, r1, r3
 8002480:	441a      	add	r2, r3
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f7ff ff8e 	bl	80023a8 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 800248c:	2300      	movs	r3, #0
 800248e:	617b      	str	r3, [r7, #20]
 8002490:	e001      	b.n	8002496 <xTaskCheckForTimeOut+0xa6>
		}
		else
		{
			xReturn = pdTRUE;
 8002492:	2301      	movs	r3, #1
 8002494:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8002496:	f7fe fc71 	bl	8000d7c <vPortExitCritical>

	return xReturn;
 800249a:	697b      	ldr	r3, [r7, #20]
}
 800249c:	4618      	mov	r0, r3
 800249e:	3718      	adds	r7, #24
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	20001d84 	.word	0x20001d84
 80024a8:	20001d98 	.word	0x20001d98

080024ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80024b0:	4b03      	ldr	r3, [pc, #12]	; (80024c0 <vTaskMissedYield+0x14>)
 80024b2:	2201      	movs	r2, #1
 80024b4:	601a      	str	r2, [r3, #0]
}
 80024b6:	bf00      	nop
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr
 80024c0:	20001d94 	.word	0x20001d94

080024c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80024cc:	f000 f854 	bl	8002578 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80024d0:	4b07      	ldr	r3, [pc, #28]	; (80024f0 <prvIdleTask+0x2c>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d907      	bls.n	80024e8 <prvIdleTask+0x24>
			{
				taskYIELD();
 80024d8:	4b06      	ldr	r3, [pc, #24]	; (80024f4 <prvIdleTask+0x30>)
 80024da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024de:	601a      	str	r2, [r3, #0]
 80024e0:	f3bf 8f4f 	dsb	sy
 80024e4:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 80024e8:	f001 fe6d 	bl	80041c6 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 80024ec:	e7ee      	b.n	80024cc <prvIdleTask+0x8>
 80024ee:	bf00      	nop
 80024f0:	20001cac 	.word	0x20001cac
 80024f4:	e000ed04 	.word	0xe000ed04

080024f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80024fe:	2300      	movs	r3, #0
 8002500:	607b      	str	r3, [r7, #4]
 8002502:	e00c      	b.n	800251e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	4613      	mov	r3, r2
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	4413      	add	r3, r2
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	4a12      	ldr	r2, [pc, #72]	; (8002558 <prvInitialiseTaskLists+0x60>)
 8002510:	4413      	add	r3, r2
 8002512:	4618      	mov	r0, r3
 8002514:	f7fe fa47 	bl	80009a6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	3301      	adds	r3, #1
 800251c:	607b      	str	r3, [r7, #4]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2b04      	cmp	r3, #4
 8002522:	d9ef      	bls.n	8002504 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002524:	480d      	ldr	r0, [pc, #52]	; (800255c <prvInitialiseTaskLists+0x64>)
 8002526:	f7fe fa3e 	bl	80009a6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800252a:	480d      	ldr	r0, [pc, #52]	; (8002560 <prvInitialiseTaskLists+0x68>)
 800252c:	f7fe fa3b 	bl	80009a6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002530:	480c      	ldr	r0, [pc, #48]	; (8002564 <prvInitialiseTaskLists+0x6c>)
 8002532:	f7fe fa38 	bl	80009a6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002536:	480c      	ldr	r0, [pc, #48]	; (8002568 <prvInitialiseTaskLists+0x70>)
 8002538:	f7fe fa35 	bl	80009a6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800253c:	480b      	ldr	r0, [pc, #44]	; (800256c <prvInitialiseTaskLists+0x74>)
 800253e:	f7fe fa32 	bl	80009a6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002542:	4b0b      	ldr	r3, [pc, #44]	; (8002570 <prvInitialiseTaskLists+0x78>)
 8002544:	4a05      	ldr	r2, [pc, #20]	; (800255c <prvInitialiseTaskLists+0x64>)
 8002546:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002548:	4b0a      	ldr	r3, [pc, #40]	; (8002574 <prvInitialiseTaskLists+0x7c>)
 800254a:	4a05      	ldr	r2, [pc, #20]	; (8002560 <prvInitialiseTaskLists+0x68>)
 800254c:	601a      	str	r2, [r3, #0]
}
 800254e:	bf00      	nop
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	20001cac 	.word	0x20001cac
 800255c:	20001d10 	.word	0x20001d10
 8002560:	20001d24 	.word	0x20001d24
 8002564:	20001d40 	.word	0x20001d40
 8002568:	20001d54 	.word	0x20001d54
 800256c:	20001d6c 	.word	0x20001d6c
 8002570:	20001d38 	.word	0x20001d38
 8002574:	20001d3c 	.word	0x20001d3c

08002578 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800257e:	e028      	b.n	80025d2 <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 8002580:	f7ff fbcc 	bl	8001d1c <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8002584:	4b17      	ldr	r3, [pc, #92]	; (80025e4 <prvCheckTasksWaitingTermination+0x6c>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2b00      	cmp	r3, #0
 800258a:	bf0c      	ite	eq
 800258c:	2301      	moveq	r3, #1
 800258e:	2300      	movne	r3, #0
 8002590:	b2db      	uxtb	r3, r3
 8002592:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 8002594:	f7ff fbd0 	bl	8001d38 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d119      	bne.n	80025d2 <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 800259e:	f7fe fbbf 	bl	8000d20 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80025a2:	4b10      	ldr	r3, [pc, #64]	; (80025e4 <prvCheckTasksWaitingTermination+0x6c>)
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	3304      	adds	r3, #4
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7fe fa83 	bl	8000aba <uxListRemove>
					--uxCurrentNumberOfTasks;
 80025b4:	4b0c      	ldr	r3, [pc, #48]	; (80025e8 <prvCheckTasksWaitingTermination+0x70>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	3b01      	subs	r3, #1
 80025ba:	4a0b      	ldr	r2, [pc, #44]	; (80025e8 <prvCheckTasksWaitingTermination+0x70>)
 80025bc:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 80025be:	4b0b      	ldr	r3, [pc, #44]	; (80025ec <prvCheckTasksWaitingTermination+0x74>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	3b01      	subs	r3, #1
 80025c4:	4a09      	ldr	r2, [pc, #36]	; (80025ec <prvCheckTasksWaitingTermination+0x74>)
 80025c6:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 80025c8:	f7fe fbd8 	bl	8000d7c <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 80025cc:	6838      	ldr	r0, [r7, #0]
 80025ce:	f000 f80f 	bl	80025f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80025d2:	4b06      	ldr	r3, [pc, #24]	; (80025ec <prvCheckTasksWaitingTermination+0x74>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d1d2      	bne.n	8002580 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80025da:	bf00      	nop
 80025dc:	3708      	adds	r7, #8
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	20001d54 	.word	0x20001d54
 80025e8:	20001d80 	.word	0x20001d80
 80025ec:	20001d68 	.word	0x20001d68

080025f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7fe fce9 	bl	8000fd4 <vPortFree>
			vPortFree( pxTCB );
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f7fe fce6 	bl	8000fd4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002608:	bf00      	nop
 800260a:	3708      	adds	r7, #8
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}

08002610 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002616:	4b0f      	ldr	r3, [pc, #60]	; (8002654 <prvResetNextTaskUnblockTime+0x44>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d101      	bne.n	8002624 <prvResetNextTaskUnblockTime+0x14>
 8002620:	2301      	movs	r3, #1
 8002622:	e000      	b.n	8002626 <prvResetNextTaskUnblockTime+0x16>
 8002624:	2300      	movs	r3, #0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d004      	beq.n	8002634 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800262a:	4b0b      	ldr	r3, [pc, #44]	; (8002658 <prvResetNextTaskUnblockTime+0x48>)
 800262c:	f04f 32ff 	mov.w	r2, #4294967295
 8002630:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002632:	e008      	b.n	8002646 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002634:	4b07      	ldr	r3, [pc, #28]	; (8002654 <prvResetNextTaskUnblockTime+0x44>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	4a05      	ldr	r2, [pc, #20]	; (8002658 <prvResetNextTaskUnblockTime+0x48>)
 8002644:	6013      	str	r3, [r2, #0]
}
 8002646:	bf00      	nop
 8002648:	370c      	adds	r7, #12
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	20001d38 	.word	0x20001d38
 8002658:	20001da0 	.word	0x20001da0

0800265c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002662:	4b0b      	ldr	r3, [pc, #44]	; (8002690 <xTaskGetSchedulerState+0x34>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d102      	bne.n	8002670 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800266a:	2301      	movs	r3, #1
 800266c:	607b      	str	r3, [r7, #4]
 800266e:	e008      	b.n	8002682 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002670:	4b08      	ldr	r3, [pc, #32]	; (8002694 <xTaskGetSchedulerState+0x38>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d102      	bne.n	800267e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002678:	2302      	movs	r3, #2
 800267a:	607b      	str	r3, [r7, #4]
 800267c:	e001      	b.n	8002682 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800267e:	2300      	movs	r3, #0
 8002680:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002682:	687b      	ldr	r3, [r7, #4]
	}
 8002684:	4618      	mov	r0, r3
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr
 8002690:	20001d8c 	.word	0x20001d8c
 8002694:	20001da8 	.word	0x20001da8

08002698 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d062      	beq.n	8002770 <vTaskPriorityInherit+0xd8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026ae:	4b32      	ldr	r3, [pc, #200]	; (8002778 <vTaskPriorityInherit+0xe0>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d25b      	bcs.n	8002770 <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	699b      	ldr	r3, [r3, #24]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	db06      	blt.n	80026ce <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026c0:	4b2d      	ldr	r3, [pc, #180]	; (8002778 <vTaskPriorityInherit+0xe0>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c6:	f1c3 0205 	rsb	r2, r3, #5
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6959      	ldr	r1, [r3, #20]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026d6:	4613      	mov	r3, r2
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	4413      	add	r3, r2
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	4a27      	ldr	r2, [pc, #156]	; (800277c <vTaskPriorityInherit+0xe4>)
 80026e0:	4413      	add	r3, r2
 80026e2:	4299      	cmp	r1, r3
 80026e4:	d101      	bne.n	80026ea <vTaskPriorityInherit+0x52>
 80026e6:	2301      	movs	r3, #1
 80026e8:	e000      	b.n	80026ec <vTaskPriorityInherit+0x54>
 80026ea:	2300      	movs	r3, #0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d03a      	beq.n	8002766 <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	3304      	adds	r3, #4
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7fe f9e0 	bl	8000aba <uxListRemove>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d115      	bne.n	800272c <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002704:	491d      	ldr	r1, [pc, #116]	; (800277c <vTaskPriorityInherit+0xe4>)
 8002706:	4613      	mov	r3, r2
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	4413      	add	r3, r2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	440b      	add	r3, r1
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d10a      	bne.n	800272c <vTaskPriorityInherit+0x94>
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800271a:	2201      	movs	r2, #1
 800271c:	fa02 f303 	lsl.w	r3, r2, r3
 8002720:	43da      	mvns	r2, r3
 8002722:	4b17      	ldr	r3, [pc, #92]	; (8002780 <vTaskPriorityInherit+0xe8>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4013      	ands	r3, r2
 8002728:	4a15      	ldr	r2, [pc, #84]	; (8002780 <vTaskPriorityInherit+0xe8>)
 800272a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800272c:	4b12      	ldr	r3, [pc, #72]	; (8002778 <vTaskPriorityInherit+0xe0>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273a:	2201      	movs	r2, #1
 800273c:	409a      	lsls	r2, r3
 800273e:	4b10      	ldr	r3, [pc, #64]	; (8002780 <vTaskPriorityInherit+0xe8>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4313      	orrs	r3, r2
 8002744:	4a0e      	ldr	r2, [pc, #56]	; (8002780 <vTaskPriorityInherit+0xe8>)
 8002746:	6013      	str	r3, [r2, #0]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800274c:	4613      	mov	r3, r2
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	4413      	add	r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	4a09      	ldr	r2, [pc, #36]	; (800277c <vTaskPriorityInherit+0xe4>)
 8002756:	441a      	add	r2, r3
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	3304      	adds	r3, #4
 800275c:	4619      	mov	r1, r3
 800275e:	4610      	mov	r0, r2
 8002760:	f7fe f94e 	bl	8000a00 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002764:	e004      	b.n	8002770 <vTaskPriorityInherit+0xd8>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002766:	4b04      	ldr	r3, [pc, #16]	; (8002778 <vTaskPriorityInherit+0xe0>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 8002770:	bf00      	nop
 8002772:	3710      	adds	r7, #16
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	20001ca8 	.word	0x20001ca8
 800277c:	20001cac 	.word	0x20001cac
 8002780:	20001d88 	.word	0x20001d88

08002784 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8002784:	b580      	push	{r7, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8002790:	2300      	movs	r3, #0
 8002792:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d06c      	beq.n	8002874 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800279a:	4b39      	ldr	r3, [pc, #228]	; (8002880 <xTaskPriorityDisinherit+0xfc>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	693a      	ldr	r2, [r7, #16]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d009      	beq.n	80027b8 <xTaskPriorityDisinherit+0x34>
 80027a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027a8:	f383 8811 	msr	BASEPRI, r3
 80027ac:	f3bf 8f6f 	isb	sy
 80027b0:	f3bf 8f4f 	dsb	sy
 80027b4:	60fb      	str	r3, [r7, #12]
 80027b6:	e7fe      	b.n	80027b6 <xTaskPriorityDisinherit+0x32>

			configASSERT( pxTCB->uxMutexesHeld );
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d109      	bne.n	80027d4 <xTaskPriorityDisinherit+0x50>
 80027c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027c4:	f383 8811 	msr	BASEPRI, r3
 80027c8:	f3bf 8f6f 	isb	sy
 80027cc:	f3bf 8f4f 	dsb	sy
 80027d0:	60bb      	str	r3, [r7, #8]
 80027d2:	e7fe      	b.n	80027d2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d8:	1e5a      	subs	r2, r3, #1
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	645a      	str	r2, [r3, #68]	; 0x44

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d044      	beq.n	8002874 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d140      	bne.n	8002874 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	3304      	adds	r3, #4
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7fe f95f 	bl	8000aba <uxListRemove>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d115      	bne.n	800282e <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002806:	491f      	ldr	r1, [pc, #124]	; (8002884 <xTaskPriorityDisinherit+0x100>)
 8002808:	4613      	mov	r3, r2
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	4413      	add	r3, r2
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	440b      	add	r3, r1
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d10a      	bne.n	800282e <xTaskPriorityDisinherit+0xaa>
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800281c:	2201      	movs	r2, #1
 800281e:	fa02 f303 	lsl.w	r3, r2, r3
 8002822:	43da      	mvns	r2, r3
 8002824:	4b18      	ldr	r3, [pc, #96]	; (8002888 <xTaskPriorityDisinherit+0x104>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4013      	ands	r3, r2
 800282a:	4a17      	ldr	r2, [pc, #92]	; (8002888 <xTaskPriorityDisinherit+0x104>)
 800282c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800283a:	f1c3 0205 	rsb	r2, r3, #5
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002846:	2201      	movs	r2, #1
 8002848:	409a      	lsls	r2, r3
 800284a:	4b0f      	ldr	r3, [pc, #60]	; (8002888 <xTaskPriorityDisinherit+0x104>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4313      	orrs	r3, r2
 8002850:	4a0d      	ldr	r2, [pc, #52]	; (8002888 <xTaskPriorityDisinherit+0x104>)
 8002852:	6013      	str	r3, [r2, #0]
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002858:	4613      	mov	r3, r2
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	4413      	add	r3, r2
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	4a08      	ldr	r2, [pc, #32]	; (8002884 <xTaskPriorityDisinherit+0x100>)
 8002862:	441a      	add	r2, r3
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	3304      	adds	r3, #4
 8002868:	4619      	mov	r1, r3
 800286a:	4610      	mov	r0, r2
 800286c:	f7fe f8c8 	bl	8000a00 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8002870:	2301      	movs	r3, #1
 8002872:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002874:	697b      	ldr	r3, [r7, #20]
	}
 8002876:	4618      	mov	r0, r3
 8002878:	3718      	adds	r7, #24
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	20001ca8 	.word	0x20001ca8
 8002884:	20001cac 	.word	0x20001cac
 8002888:	20001d88 	.word	0x20001d88

0800288c <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8002892:	4b09      	ldr	r3, [pc, #36]	; (80028b8 <uxTaskResetEventItemValue+0x2c>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	699b      	ldr	r3, [r3, #24]
 8002898:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800289a:	4b07      	ldr	r3, [pc, #28]	; (80028b8 <uxTaskResetEventItemValue+0x2c>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a06      	ldr	r2, [pc, #24]	; (80028b8 <uxTaskResetEventItemValue+0x2c>)
 80028a0:	6812      	ldr	r2, [r2, #0]
 80028a2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80028a4:	f1c2 0205 	rsb	r2, r2, #5
 80028a8:	619a      	str	r2, [r3, #24]

	return uxReturn;
 80028aa:	687b      	ldr	r3, [r7, #4]
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr
 80028b8:	20001ca8 	.word	0x20001ca8

080028bc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80028c0:	4b07      	ldr	r3, [pc, #28]	; (80028e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d004      	beq.n	80028d2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80028c8:	4b05      	ldr	r3, [pc, #20]	; (80028e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028ce:	3201      	adds	r2, #1
 80028d0:	645a      	str	r2, [r3, #68]	; 0x44
		}

		return pxCurrentTCB;
 80028d2:	4b03      	ldr	r3, [pc, #12]	; (80028e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80028d4:	681b      	ldr	r3, [r3, #0]
	}
 80028d6:	4618      	mov	r0, r3
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr
 80028e0:	20001ca8 	.word	0x20001ca8

080028e4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80028ee:	4b29      	ldr	r3, [pc, #164]	; (8002994 <prvAddCurrentTaskToDelayedList+0xb0>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80028f4:	4b28      	ldr	r3, [pc, #160]	; (8002998 <prvAddCurrentTaskToDelayedList+0xb4>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	3304      	adds	r3, #4
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7fe f8dd 	bl	8000aba <uxListRemove>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d10b      	bne.n	800291e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002906:	4b24      	ldr	r3, [pc, #144]	; (8002998 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800290c:	2201      	movs	r2, #1
 800290e:	fa02 f303 	lsl.w	r3, r2, r3
 8002912:	43da      	mvns	r2, r3
 8002914:	4b21      	ldr	r3, [pc, #132]	; (800299c <prvAddCurrentTaskToDelayedList+0xb8>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4013      	ands	r3, r2
 800291a:	4a20      	ldr	r2, [pc, #128]	; (800299c <prvAddCurrentTaskToDelayedList+0xb8>)
 800291c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002924:	d10a      	bne.n	800293c <prvAddCurrentTaskToDelayedList+0x58>
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d007      	beq.n	800293c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800292c:	4b1a      	ldr	r3, [pc, #104]	; (8002998 <prvAddCurrentTaskToDelayedList+0xb4>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	3304      	adds	r3, #4
 8002932:	4619      	mov	r1, r3
 8002934:	481a      	ldr	r0, [pc, #104]	; (80029a0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8002936:	f7fe f863 	bl	8000a00 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800293a:	e026      	b.n	800298a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800293c:	68fa      	ldr	r2, [r7, #12]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4413      	add	r3, r2
 8002942:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002944:	4b14      	ldr	r3, [pc, #80]	; (8002998 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	68ba      	ldr	r2, [r7, #8]
 800294a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800294c:	68ba      	ldr	r2, [r7, #8]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	429a      	cmp	r2, r3
 8002952:	d209      	bcs.n	8002968 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002954:	4b13      	ldr	r3, [pc, #76]	; (80029a4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	4b0f      	ldr	r3, [pc, #60]	; (8002998 <prvAddCurrentTaskToDelayedList+0xb4>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	3304      	adds	r3, #4
 800295e:	4619      	mov	r1, r3
 8002960:	4610      	mov	r0, r2
 8002962:	f7fe f871 	bl	8000a48 <vListInsert>
}
 8002966:	e010      	b.n	800298a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002968:	4b0f      	ldr	r3, [pc, #60]	; (80029a8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	4b0a      	ldr	r3, [pc, #40]	; (8002998 <prvAddCurrentTaskToDelayedList+0xb4>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	3304      	adds	r3, #4
 8002972:	4619      	mov	r1, r3
 8002974:	4610      	mov	r0, r2
 8002976:	f7fe f867 	bl	8000a48 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800297a:	4b0c      	ldr	r3, [pc, #48]	; (80029ac <prvAddCurrentTaskToDelayedList+0xc8>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	68ba      	ldr	r2, [r7, #8]
 8002980:	429a      	cmp	r2, r3
 8002982:	d202      	bcs.n	800298a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002984:	4a09      	ldr	r2, [pc, #36]	; (80029ac <prvAddCurrentTaskToDelayedList+0xc8>)
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	6013      	str	r3, [r2, #0]
}
 800298a:	bf00      	nop
 800298c:	3710      	adds	r7, #16
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	20001d84 	.word	0x20001d84
 8002998:	20001ca8 	.word	0x20001ca8
 800299c:	20001d88 	.word	0x20001d88
 80029a0:	20001d6c 	.word	0x20001d6c
 80029a4:	20001d3c 	.word	0x20001d3c
 80029a8:	20001d38 	.word	0x20001d38
 80029ac:	20001da0 	.word	0x20001da0

080029b0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 80029b6:	2300      	movs	r3, #0
 80029b8:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80029ba:	f000 fadd 	bl	8002f78 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80029be:	4b11      	ldr	r3, [pc, #68]	; (8002a04 <xTimerCreateTimerTask+0x54>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d00b      	beq.n	80029de <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 80029c6:	4b10      	ldr	r3, [pc, #64]	; (8002a08 <xTimerCreateTimerTask+0x58>)
 80029c8:	9301      	str	r3, [sp, #4]
 80029ca:	2303      	movs	r3, #3
 80029cc:	9300      	str	r3, [sp, #0]
 80029ce:	2300      	movs	r3, #0
 80029d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80029d4:	490d      	ldr	r1, [pc, #52]	; (8002a0c <xTimerCreateTimerTask+0x5c>)
 80029d6:	480e      	ldr	r0, [pc, #56]	; (8002a10 <xTimerCreateTimerTask+0x60>)
 80029d8:	f7fe ffee 	bl	80019b8 <xTaskCreate>
 80029dc:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d109      	bne.n	80029f8 <xTimerCreateTimerTask+0x48>
 80029e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029e8:	f383 8811 	msr	BASEPRI, r3
 80029ec:	f3bf 8f6f 	isb	sy
 80029f0:	f3bf 8f4f 	dsb	sy
 80029f4:	603b      	str	r3, [r7, #0]
 80029f6:	e7fe      	b.n	80029f6 <xTimerCreateTimerTask+0x46>
	return xReturn;
 80029f8:	687b      	ldr	r3, [r7, #4]
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	20001ddc 	.word	0x20001ddc
 8002a08:	20001de0 	.word	0x20001de0
 8002a0c:	080053b8 	.word	0x080053b8
 8002a10:	08002bc9 	.word	0x08002bc9

08002a14 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b088      	sub	sp, #32
 8002a18:	af02      	add	r7, sp, #8
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	60b9      	str	r1, [r7, #8]
 8002a1e:	607a      	str	r2, [r7, #4]
 8002a20:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8002a22:	2028      	movs	r0, #40	; 0x28
 8002a24:	f7fe fa8c 	bl	8000f40 <pvPortMalloc>
 8002a28:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d009      	beq.n	8002a44 <xTimerCreate+0x30>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	9301      	str	r3, [sp, #4]
 8002a34:	6a3b      	ldr	r3, [r7, #32]
 8002a36:	9300      	str	r3, [sp, #0]
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	68b9      	ldr	r1, [r7, #8]
 8002a3e:	68f8      	ldr	r0, [r7, #12]
 8002a40:	f000 f805 	bl	8002a4e <prvInitialiseNewTimer>
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8002a44:	697b      	ldr	r3, [r7, #20]
	}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3718      	adds	r7, #24
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b086      	sub	sp, #24
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	60f8      	str	r0, [r7, #12]
 8002a56:	60b9      	str	r1, [r7, #8]
 8002a58:	607a      	str	r2, [r7, #4]
 8002a5a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d109      	bne.n	8002a76 <prvInitialiseNewTimer+0x28>
 8002a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a66:	f383 8811 	msr	BASEPRI, r3
 8002a6a:	f3bf 8f6f 	isb	sy
 8002a6e:	f3bf 8f4f 	dsb	sy
 8002a72:	617b      	str	r3, [r7, #20]
 8002a74:	e7fe      	b.n	8002a74 <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 8002a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d015      	beq.n	8002aa8 <prvInitialiseNewTimer+0x5a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8002a7c:	f000 fa7c 	bl	8002f78 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8002a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a82:	68fa      	ldr	r2, [r7, #12]
 8002a84:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8002a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a88:	68ba      	ldr	r2, [r7, #8]
 8002a8a:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8002a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8002a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a94:	683a      	ldr	r2, [r7, #0]
 8002a96:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8002a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9a:	6a3a      	ldr	r2, [r7, #32]
 8002a9c:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8002a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa0:	3304      	adds	r3, #4
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7fd ff9f 	bl	80009e6 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8002aa8:	bf00      	nop
 8002aaa:	3718      	adds	r7, #24
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b08a      	sub	sp, #40	; 0x28
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	607a      	str	r2, [r7, #4]
 8002abc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d109      	bne.n	8002adc <xTimerGenericCommand+0x2c>
 8002ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002acc:	f383 8811 	msr	BASEPRI, r3
 8002ad0:	f3bf 8f6f 	isb	sy
 8002ad4:	f3bf 8f4f 	dsb	sy
 8002ad8:	623b      	str	r3, [r7, #32]
 8002ada:	e7fe      	b.n	8002ada <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8002adc:	4b19      	ldr	r3, [pc, #100]	; (8002b44 <xTimerGenericCommand+0x94>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d02a      	beq.n	8002b3a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	2b05      	cmp	r3, #5
 8002af4:	dc18      	bgt.n	8002b28 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002af6:	f7ff fdb1 	bl	800265c <xTaskGetSchedulerState>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d109      	bne.n	8002b14 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002b00:	4b10      	ldr	r3, [pc, #64]	; (8002b44 <xTimerGenericCommand+0x94>)
 8002b02:	6818      	ldr	r0, [r3, #0]
 8002b04:	f107 0114 	add.w	r1, r7, #20
 8002b08:	2300      	movs	r3, #0
 8002b0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b0c:	f7fe fb48 	bl	80011a0 <xQueueGenericSend>
 8002b10:	6278      	str	r0, [r7, #36]	; 0x24
 8002b12:	e012      	b.n	8002b3a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002b14:	4b0b      	ldr	r3, [pc, #44]	; (8002b44 <xTimerGenericCommand+0x94>)
 8002b16:	6818      	ldr	r0, [r3, #0]
 8002b18:	f107 0114 	add.w	r1, r7, #20
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f7fe fb3e 	bl	80011a0 <xQueueGenericSend>
 8002b24:	6278      	str	r0, [r7, #36]	; 0x24
 8002b26:	e008      	b.n	8002b3a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8002b28:	4b06      	ldr	r3, [pc, #24]	; (8002b44 <xTimerGenericCommand+0x94>)
 8002b2a:	6818      	ldr	r0, [r3, #0]
 8002b2c:	f107 0114 	add.w	r1, r7, #20
 8002b30:	2300      	movs	r3, #0
 8002b32:	683a      	ldr	r2, [r7, #0]
 8002b34:	f7fe fc2e 	bl	8001394 <xQueueGenericSendFromISR>
 8002b38:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8002b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3728      	adds	r7, #40	; 0x28
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	20001ddc 	.word	0x20001ddc

08002b48 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b088      	sub	sp, #32
 8002b4c:	af02      	add	r7, sp, #8
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002b52:	4b1c      	ldr	r3, [pc, #112]	; (8002bc4 <prvProcessExpiredTimer+0x7c>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	3304      	adds	r3, #4
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7fd ffaa 	bl	8000aba <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	69db      	ldr	r3, [r3, #28]
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d121      	bne.n	8002bb2 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	699a      	ldr	r2, [r3, #24]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	18d1      	adds	r1, r2, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	683a      	ldr	r2, [r7, #0]
 8002b7a:	6978      	ldr	r0, [r7, #20]
 8002b7c:	f000 f8c8 	bl	8002d10 <prvInsertTimerInActiveList>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d015      	beq.n	8002bb2 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002b86:	2300      	movs	r3, #0
 8002b88:	9300      	str	r3, [sp, #0]
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	2100      	movs	r1, #0
 8002b90:	6978      	ldr	r0, [r7, #20]
 8002b92:	f7ff ff8d 	bl	8002ab0 <xTimerGenericCommand>
 8002b96:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d109      	bne.n	8002bb2 <prvProcessExpiredTimer+0x6a>
 8002b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ba2:	f383 8811 	msr	BASEPRI, r3
 8002ba6:	f3bf 8f6f 	isb	sy
 8002baa:	f3bf 8f4f 	dsb	sy
 8002bae:	60fb      	str	r3, [r7, #12]
 8002bb0:	e7fe      	b.n	8002bb0 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb6:	6978      	ldr	r0, [r7, #20]
 8002bb8:	4798      	blx	r3
}
 8002bba:	bf00      	nop
 8002bbc:	3718      	adds	r7, #24
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	20001dd4 	.word	0x20001dd4

08002bc8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002bd0:	f107 0308 	add.w	r3, r7, #8
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f000 f857 	bl	8002c88 <prvGetNextExpireTime>
 8002bda:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	4619      	mov	r1, r3
 8002be0:	68f8      	ldr	r0, [r7, #12]
 8002be2:	f000 f803 	bl	8002bec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8002be6:	f000 f8d5 	bl	8002d94 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002bea:	e7f1      	b.n	8002bd0 <prvTimerTask+0x8>

08002bec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8002bf6:	f7ff f891 	bl	8001d1c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002bfa:	f107 0308 	add.w	r3, r7, #8
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f000 f866 	bl	8002cd0 <prvSampleTimeNow>
 8002c04:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d130      	bne.n	8002c6e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d10a      	bne.n	8002c28 <prvProcessTimerOrBlockTask+0x3c>
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d806      	bhi.n	8002c28 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8002c1a:	f7ff f88d 	bl	8001d38 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002c1e:	68f9      	ldr	r1, [r7, #12]
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f7ff ff91 	bl	8002b48 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8002c26:	e024      	b.n	8002c72 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d008      	beq.n	8002c40 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002c2e:	4b13      	ldr	r3, [pc, #76]	; (8002c7c <prvProcessTimerOrBlockTask+0x90>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	bf0c      	ite	eq
 8002c38:	2301      	moveq	r3, #1
 8002c3a:	2300      	movne	r3, #0
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002c40:	4b0f      	ldr	r3, [pc, #60]	; (8002c80 <prvProcessTimerOrBlockTask+0x94>)
 8002c42:	6818      	ldr	r0, [r3, #0]
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	683a      	ldr	r2, [r7, #0]
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	f7fe fe7f 	bl	8001950 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8002c52:	f7ff f871 	bl	8001d38 <xTaskResumeAll>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d10a      	bne.n	8002c72 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8002c5c:	4b09      	ldr	r3, [pc, #36]	; (8002c84 <prvProcessTimerOrBlockTask+0x98>)
 8002c5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c62:	601a      	str	r2, [r3, #0]
 8002c64:	f3bf 8f4f 	dsb	sy
 8002c68:	f3bf 8f6f 	isb	sy
}
 8002c6c:	e001      	b.n	8002c72 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8002c6e:	f7ff f863 	bl	8001d38 <xTaskResumeAll>
}
 8002c72:	bf00      	nop
 8002c74:	3710      	adds	r7, #16
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	20001dd8 	.word	0x20001dd8
 8002c80:	20001ddc 	.word	0x20001ddc
 8002c84:	e000ed04 	.word	0xe000ed04

08002c88 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b085      	sub	sp, #20
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002c90:	4b0e      	ldr	r3, [pc, #56]	; (8002ccc <prvGetNextExpireTime+0x44>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	bf0c      	ite	eq
 8002c9a:	2301      	moveq	r3, #1
 8002c9c:	2300      	movne	r3, #0
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d105      	bne.n	8002cba <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002cae:	4b07      	ldr	r3, [pc, #28]	; (8002ccc <prvGetNextExpireTime+0x44>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	60fb      	str	r3, [r7, #12]
 8002cb8:	e001      	b.n	8002cbe <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3714      	adds	r7, #20
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr
 8002ccc:	20001dd4 	.word	0x20001dd4

08002cd0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8002cd8:	f7ff f8ca 	bl	8001e70 <xTaskGetTickCount>
 8002cdc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8002cde:	4b0b      	ldr	r3, [pc, #44]	; (8002d0c <prvSampleTimeNow+0x3c>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	68fa      	ldr	r2, [r7, #12]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d205      	bcs.n	8002cf4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8002ce8:	f000 f8e6 	bl	8002eb8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	601a      	str	r2, [r3, #0]
 8002cf2:	e002      	b.n	8002cfa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8002cfa:	4a04      	ldr	r2, [pc, #16]	; (8002d0c <prvSampleTimeNow+0x3c>)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8002d00:	68fb      	ldr	r3, [r7, #12]
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3710      	adds	r7, #16
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	20001de4 	.word	0x20001de4

08002d10 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b086      	sub	sp, #24
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	60b9      	str	r1, [r7, #8]
 8002d1a:	607a      	str	r2, [r7, #4]
 8002d1c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	68ba      	ldr	r2, [r7, #8]
 8002d26:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	68fa      	ldr	r2, [r7, #12]
 8002d2c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8002d2e:	68ba      	ldr	r2, [r7, #8]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d812      	bhi.n	8002d5c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	1ad2      	subs	r2, r2, r3
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	699b      	ldr	r3, [r3, #24]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d302      	bcc.n	8002d4a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8002d44:	2301      	movs	r3, #1
 8002d46:	617b      	str	r3, [r7, #20]
 8002d48:	e01b      	b.n	8002d82 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002d4a:	4b10      	ldr	r3, [pc, #64]	; (8002d8c <prvInsertTimerInActiveList+0x7c>)
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	3304      	adds	r3, #4
 8002d52:	4619      	mov	r1, r3
 8002d54:	4610      	mov	r0, r2
 8002d56:	f7fd fe77 	bl	8000a48 <vListInsert>
 8002d5a:	e012      	b.n	8002d82 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d206      	bcs.n	8002d72 <prvInsertTimerInActiveList+0x62>
 8002d64:	68ba      	ldr	r2, [r7, #8]
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d302      	bcc.n	8002d72 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	617b      	str	r3, [r7, #20]
 8002d70:	e007      	b.n	8002d82 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002d72:	4b07      	ldr	r3, [pc, #28]	; (8002d90 <prvInsertTimerInActiveList+0x80>)
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	3304      	adds	r3, #4
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	4610      	mov	r0, r2
 8002d7e:	f7fd fe63 	bl	8000a48 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8002d82:	697b      	ldr	r3, [r7, #20]
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3718      	adds	r7, #24
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	20001dd8 	.word	0x20001dd8
 8002d90:	20001dd4 	.word	0x20001dd4

08002d94 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b08c      	sub	sp, #48	; 0x30
 8002d98:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002d9a:	e07a      	b.n	8002e92 <prvProcessReceivedCommands+0xfe>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	db77      	blt.n	8002e92 <prvProcessReceivedCommands+0xfe>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8002da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da8:	695b      	ldr	r3, [r3, #20]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d004      	beq.n	8002db8 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db0:	3304      	adds	r3, #4
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7fd fe81 	bl	8000aba <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002db8:	1d3b      	adds	r3, r7, #4
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7ff ff88 	bl	8002cd0 <prvSampleTimeNow>
 8002dc0:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	2b09      	cmp	r3, #9
 8002dc6:	d863      	bhi.n	8002e90 <prvProcessReceivedCommands+0xfc>
 8002dc8:	a201      	add	r2, pc, #4	; (adr r2, 8002dd0 <prvProcessReceivedCommands+0x3c>)
 8002dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dce:	bf00      	nop
 8002dd0:	08002df9 	.word	0x08002df9
 8002dd4:	08002df9 	.word	0x08002df9
 8002dd8:	08002df9 	.word	0x08002df9
 8002ddc:	08002e93 	.word	0x08002e93
 8002de0:	08002e53 	.word	0x08002e53
 8002de4:	08002e89 	.word	0x08002e89
 8002de8:	08002df9 	.word	0x08002df9
 8002dec:	08002df9 	.word	0x08002df9
 8002df0:	08002e93 	.word	0x08002e93
 8002df4:	08002e53 	.word	0x08002e53
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002df8:	68fa      	ldr	r2, [r7, #12]
 8002dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	18d1      	adds	r1, r2, r3
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6a3a      	ldr	r2, [r7, #32]
 8002e04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002e06:	f7ff ff83 	bl	8002d10 <prvInsertTimerInActiveList>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d040      	beq.n	8002e92 <prvProcessReceivedCommands+0xfe>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002e16:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1a:	69db      	ldr	r3, [r3, #28]
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d138      	bne.n	8002e92 <prvProcessReceivedCommands+0xfe>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002e20:	68fa      	ldr	r2, [r7, #12]
 8002e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e24:	699b      	ldr	r3, [r3, #24]
 8002e26:	441a      	add	r2, r3
 8002e28:	2300      	movs	r3, #0
 8002e2a:	9300      	str	r3, [sp, #0]
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	2100      	movs	r1, #0
 8002e30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002e32:	f7ff fe3d 	bl	8002ab0 <xTimerGenericCommand>
 8002e36:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d129      	bne.n	8002e92 <prvProcessReceivedCommands+0xfe>
 8002e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e42:	f383 8811 	msr	BASEPRI, r3
 8002e46:	f3bf 8f6f 	isb	sy
 8002e4a:	f3bf 8f4f 	dsb	sy
 8002e4e:	61bb      	str	r3, [r7, #24]
 8002e50:	e7fe      	b.n	8002e50 <prvProcessReceivedCommands+0xbc>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002e52:	68fa      	ldr	r2, [r7, #12]
 8002e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e56:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5a:	699b      	ldr	r3, [r3, #24]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d109      	bne.n	8002e74 <prvProcessReceivedCommands+0xe0>
 8002e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e64:	f383 8811 	msr	BASEPRI, r3
 8002e68:	f3bf 8f6f 	isb	sy
 8002e6c:	f3bf 8f4f 	dsb	sy
 8002e70:	617b      	str	r3, [r7, #20]
 8002e72:	e7fe      	b.n	8002e72 <prvProcessReceivedCommands+0xde>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e76:	699a      	ldr	r2, [r3, #24]
 8002e78:	6a3b      	ldr	r3, [r7, #32]
 8002e7a:	18d1      	adds	r1, r2, r3
 8002e7c:	6a3b      	ldr	r3, [r7, #32]
 8002e7e:	6a3a      	ldr	r2, [r7, #32]
 8002e80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002e82:	f7ff ff45 	bl	8002d10 <prvInsertTimerInActiveList>
					break;
 8002e86:	e004      	b.n	8002e92 <prvProcessReceivedCommands+0xfe>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
 8002e88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002e8a:	f7fe f8a3 	bl	8000fd4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8002e8e:	e000      	b.n	8002e92 <prvProcessReceivedCommands+0xfe>

				default	:
					/* Don't expect to get here. */
					break;
 8002e90:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002e92:	4b08      	ldr	r3, [pc, #32]	; (8002eb4 <prvProcessReceivedCommands+0x120>)
 8002e94:	6818      	ldr	r0, [r3, #0]
 8002e96:	f107 0108 	add.w	r1, r7, #8
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f7fe fb0d 	bl	80014bc <xQueueGenericReceive>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	f47f af79 	bne.w	8002d9c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8002eaa:	bf00      	nop
 8002eac:	3728      	adds	r7, #40	; 0x28
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	20001ddc 	.word	0x20001ddc

08002eb8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b088      	sub	sp, #32
 8002ebc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002ebe:	e044      	b.n	8002f4a <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002ec0:	4b2b      	ldr	r3, [pc, #172]	; (8002f70 <prvSwitchTimerLists+0xb8>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002eca:	4b29      	ldr	r3, [pc, #164]	; (8002f70 <prvSwitchTimerLists+0xb8>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	3304      	adds	r3, #4
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7fd fdee 	bl	8000aba <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee2:	6938      	ldr	r0, [r7, #16]
 8002ee4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	69db      	ldr	r3, [r3, #28]
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d12d      	bne.n	8002f4a <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	699a      	ldr	r2, [r3, #24]
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
 8002ef8:	68fa      	ldr	r2, [r7, #12]
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d90e      	bls.n	8002f1e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	68fa      	ldr	r2, [r7, #12]
 8002f04:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	693a      	ldr	r2, [r7, #16]
 8002f0a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002f0c:	4b18      	ldr	r3, [pc, #96]	; (8002f70 <prvSwitchTimerLists+0xb8>)
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	3304      	adds	r3, #4
 8002f14:	4619      	mov	r1, r3
 8002f16:	4610      	mov	r0, r2
 8002f18:	f7fd fd96 	bl	8000a48 <vListInsert>
 8002f1c:	e015      	b.n	8002f4a <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002f1e:	2300      	movs	r3, #0
 8002f20:	9300      	str	r3, [sp, #0]
 8002f22:	2300      	movs	r3, #0
 8002f24:	697a      	ldr	r2, [r7, #20]
 8002f26:	2100      	movs	r1, #0
 8002f28:	6938      	ldr	r0, [r7, #16]
 8002f2a:	f7ff fdc1 	bl	8002ab0 <xTimerGenericCommand>
 8002f2e:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d109      	bne.n	8002f4a <prvSwitchTimerLists+0x92>
 8002f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f3a:	f383 8811 	msr	BASEPRI, r3
 8002f3e:	f3bf 8f6f 	isb	sy
 8002f42:	f3bf 8f4f 	dsb	sy
 8002f46:	603b      	str	r3, [r7, #0]
 8002f48:	e7fe      	b.n	8002f48 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002f4a:	4b09      	ldr	r3, [pc, #36]	; (8002f70 <prvSwitchTimerLists+0xb8>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d1b5      	bne.n	8002ec0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8002f54:	4b06      	ldr	r3, [pc, #24]	; (8002f70 <prvSwitchTimerLists+0xb8>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
 8002f5a:	4b06      	ldr	r3, [pc, #24]	; (8002f74 <prvSwitchTimerLists+0xbc>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a04      	ldr	r2, [pc, #16]	; (8002f70 <prvSwitchTimerLists+0xb8>)
 8002f60:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8002f62:	4a04      	ldr	r2, [pc, #16]	; (8002f74 <prvSwitchTimerLists+0xbc>)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6013      	str	r3, [r2, #0]
}
 8002f68:	bf00      	nop
 8002f6a:	3718      	adds	r7, #24
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	20001dd4 	.word	0x20001dd4
 8002f74:	20001dd8 	.word	0x20001dd8

08002f78 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8002f7c:	f7fd fed0 	bl	8000d20 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8002f80:	4b12      	ldr	r3, [pc, #72]	; (8002fcc <prvCheckForValidListAndQueue+0x54>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d11d      	bne.n	8002fc4 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8002f88:	4811      	ldr	r0, [pc, #68]	; (8002fd0 <prvCheckForValidListAndQueue+0x58>)
 8002f8a:	f7fd fd0c 	bl	80009a6 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8002f8e:	4811      	ldr	r0, [pc, #68]	; (8002fd4 <prvCheckForValidListAndQueue+0x5c>)
 8002f90:	f7fd fd09 	bl	80009a6 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8002f94:	4b10      	ldr	r3, [pc, #64]	; (8002fd8 <prvCheckForValidListAndQueue+0x60>)
 8002f96:	4a0e      	ldr	r2, [pc, #56]	; (8002fd0 <prvCheckForValidListAndQueue+0x58>)
 8002f98:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8002f9a:	4b10      	ldr	r3, [pc, #64]	; (8002fdc <prvCheckForValidListAndQueue+0x64>)
 8002f9c:	4a0d      	ldr	r2, [pc, #52]	; (8002fd4 <prvCheckForValidListAndQueue+0x5c>)
 8002f9e:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	210c      	movs	r1, #12
 8002fa4:	2005      	movs	r0, #5
 8002fa6:	f7fe f8a3 	bl	80010f0 <xQueueGenericCreate>
 8002faa:	4602      	mov	r2, r0
 8002fac:	4b07      	ldr	r3, [pc, #28]	; (8002fcc <prvCheckForValidListAndQueue+0x54>)
 8002fae:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8002fb0:	4b06      	ldr	r3, [pc, #24]	; (8002fcc <prvCheckForValidListAndQueue+0x54>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d005      	beq.n	8002fc4 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002fb8:	4b04      	ldr	r3, [pc, #16]	; (8002fcc <prvCheckForValidListAndQueue+0x54>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4908      	ldr	r1, [pc, #32]	; (8002fe0 <prvCheckForValidListAndQueue+0x68>)
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f7fe fc9e 	bl	8001900 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002fc4:	f7fd feda 	bl	8000d7c <vPortExitCritical>
}
 8002fc8:	bf00      	nop
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	20001ddc 	.word	0x20001ddc
 8002fd0:	20001dac 	.word	0x20001dac
 8002fd4:	20001dc0 	.word	0x20001dc0
 8002fd8:	20001dd4 	.word	0x20001dd4
 8002fdc:	20001dd8 	.word	0x20001dd8
 8002fe0:	080053c0 	.word	0x080053c0

08002fe4 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b085      	sub	sp, #20
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	60fb      	str	r3, [r7, #12]
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8003002:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003006:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	791b      	ldrb	r3, [r3, #4]
 800300c:	021a      	lsls	r2, r3, #8
                                   ADC_InitStruct->ADC_Resolution);
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	681b      	ldr	r3, [r3, #0]
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8003012:	4313      	orrs	r3, r2
 8003014:	68fa      	ldr	r2, [r7, #12]
 8003016:	4313      	orrs	r3, r2
 8003018:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	68fa      	ldr	r2, [r7, #12]
 800301e:	605a      	str	r2, [r3, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	60fb      	str	r3, [r7, #12]
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 8003026:	68fa      	ldr	r2, [r7, #12]
 8003028:	4b18      	ldr	r3, [pc, #96]	; (800308c <ADC_Init+0xa8>)
 800302a:	4013      	ands	r3, r2
 800302c:	60fb      	str	r3, [r7, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	691a      	ldr	r2, [r3, #16]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	68db      	ldr	r3, [r3, #12]
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8003036:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	689b      	ldr	r3, [r3, #8]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 800303c:	431a      	orrs	r2, r3
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	795b      	ldrb	r3, [r3, #5]
 8003042:	005b      	lsls	r3, r3, #1
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8003044:	4313      	orrs	r3, r2
 8003046:	68fa      	ldr	r2, [r7, #12]
 8003048:	4313      	orrs	r3, r2
 800304a:	60fb      	str	r3, [r7, #12]
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	68fa      	ldr	r2, [r7, #12]
 8003050:	609a      	str	r2, [r3, #8]
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003056:	60fb      	str	r3, [r7, #12]
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800305e:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	7d1b      	ldrb	r3, [r3, #20]
 8003064:	3b01      	subs	r3, #1
 8003066:	b2da      	uxtb	r2, r3
 8003068:	7afb      	ldrb	r3, [r7, #11]
 800306a:	4313      	orrs	r3, r2
 800306c:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 800306e:	7afb      	ldrb	r3, [r7, #11]
 8003070:	051b      	lsls	r3, r3, #20
 8003072:	68fa      	ldr	r2, [r7, #12]
 8003074:	4313      	orrs	r3, r2
 8003076:	60fb      	str	r3, [r7, #12]
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	68fa      	ldr	r2, [r7, #12]
 800307c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800307e:	bf00      	nop
 8003080:	3714      	adds	r7, #20
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	c0fff7fd 	.word	0xc0fff7fd

08003090 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	460b      	mov	r3, r1
 800309a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800309c:	78fb      	ldrb	r3, [r7, #3]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d006      	beq.n	80030b0 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f043 0201 	orr.w	r2, r3, #1
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
  }
}
 80030ae:	e005      	b.n	80030bc <ADC_Cmd+0x2c>
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	f023 0201 	bic.w	r2, r3, #1
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	609a      	str	r2, [r3, #8]
}
 80030bc:	bf00      	nop
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <ADC_RegularChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b085      	sub	sp, #20
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	4608      	mov	r0, r1
 80030d2:	4611      	mov	r1, r2
 80030d4:	461a      	mov	r2, r3
 80030d6:	4603      	mov	r3, r0
 80030d8:	70fb      	strb	r3, [r7, #3]
 80030da:	460b      	mov	r3, r1
 80030dc:	70bb      	strb	r3, [r7, #2]
 80030de:	4613      	mov	r3, r2
 80030e0:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 80030e2:	2300      	movs	r3, #0
 80030e4:	60fb      	str	r3, [r7, #12]
 80030e6:	2300      	movs	r3, #0
 80030e8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 80030ea:	78fb      	ldrb	r3, [r7, #3]
 80030ec:	2b09      	cmp	r3, #9
 80030ee:	d923      	bls.n	8003138 <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 80030f6:	78fb      	ldrb	r3, [r7, #3]
 80030f8:	f1a3 020a 	sub.w	r2, r3, #10
 80030fc:	4613      	mov	r3, r2
 80030fe:	005b      	lsls	r3, r3, #1
 8003100:	4413      	add	r3, r2
 8003102:	2207      	movs	r2, #7
 8003104:	fa02 f303 	lsl.w	r3, r2, r3
 8003108:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	43db      	mvns	r3, r3
 800310e:	68fa      	ldr	r2, [r7, #12]
 8003110:	4013      	ands	r3, r2
 8003112:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8003114:	7879      	ldrb	r1, [r7, #1]
 8003116:	78fb      	ldrb	r3, [r7, #3]
 8003118:	f1a3 020a 	sub.w	r2, r3, #10
 800311c:	4613      	mov	r3, r2
 800311e:	005b      	lsls	r3, r3, #1
 8003120:	4413      	add	r3, r2
 8003122:	fa01 f303 	lsl.w	r3, r1, r3
 8003126:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8003128:	68fa      	ldr	r2, [r7, #12]
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	4313      	orrs	r3, r2
 800312e:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	68fa      	ldr	r2, [r7, #12]
 8003134:	60da      	str	r2, [r3, #12]
 8003136:	e01e      	b.n	8003176 <ADC_RegularChannelConfig+0xae>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	691b      	ldr	r3, [r3, #16]
 800313c:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 800313e:	78fa      	ldrb	r2, [r7, #3]
 8003140:	4613      	mov	r3, r2
 8003142:	005b      	lsls	r3, r3, #1
 8003144:	4413      	add	r3, r2
 8003146:	2207      	movs	r2, #7
 8003148:	fa02 f303 	lsl.w	r3, r2, r3
 800314c:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	43db      	mvns	r3, r3
 8003152:	68fa      	ldr	r2, [r7, #12]
 8003154:	4013      	ands	r3, r2
 8003156:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 8003158:	7879      	ldrb	r1, [r7, #1]
 800315a:	78fa      	ldrb	r2, [r7, #3]
 800315c:	4613      	mov	r3, r2
 800315e:	005b      	lsls	r3, r3, #1
 8003160:	4413      	add	r3, r2
 8003162:	fa01 f303 	lsl.w	r3, r1, r3
 8003166:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8003168:	68fa      	ldr	r2, [r7, #12]
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	4313      	orrs	r3, r2
 800316e:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	68fa      	ldr	r2, [r7, #12]
 8003174:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 8003176:	78bb      	ldrb	r3, [r7, #2]
 8003178:	2b06      	cmp	r3, #6
 800317a:	d821      	bhi.n	80031c0 <ADC_RegularChannelConfig+0xf8>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003180:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 8003182:	78bb      	ldrb	r3, [r7, #2]
 8003184:	1e5a      	subs	r2, r3, #1
 8003186:	4613      	mov	r3, r2
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	4413      	add	r3, r2
 800318c:	221f      	movs	r2, #31
 800318e:	fa02 f303 	lsl.w	r3, r2, r3
 8003192:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	43db      	mvns	r3, r3
 8003198:	68fa      	ldr	r2, [r7, #12]
 800319a:	4013      	ands	r3, r2
 800319c:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 800319e:	78f9      	ldrb	r1, [r7, #3]
 80031a0:	78bb      	ldrb	r3, [r7, #2]
 80031a2:	1e5a      	subs	r2, r3, #1
 80031a4:	4613      	mov	r3, r2
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	4413      	add	r3, r2
 80031aa:	fa01 f303 	lsl.w	r3, r1, r3
 80031ae:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80031b0:	68fa      	ldr	r2, [r7, #12]
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	68fa      	ldr	r2, [r7, #12]
 80031bc:	635a      	str	r2, [r3, #52]	; 0x34
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 80031be:	e047      	b.n	8003250 <ADC_RegularChannelConfig+0x188>
  else if (Rank < 13)
 80031c0:	78bb      	ldrb	r3, [r7, #2]
 80031c2:	2b0c      	cmp	r3, #12
 80031c4:	d821      	bhi.n	800320a <ADC_RegularChannelConfig+0x142>
    tmpreg1 = ADCx->SQR2;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ca:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 80031cc:	78bb      	ldrb	r3, [r7, #2]
 80031ce:	1fda      	subs	r2, r3, #7
 80031d0:	4613      	mov	r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	4413      	add	r3, r2
 80031d6:	221f      	movs	r2, #31
 80031d8:	fa02 f303 	lsl.w	r3, r2, r3
 80031dc:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	43db      	mvns	r3, r3
 80031e2:	68fa      	ldr	r2, [r7, #12]
 80031e4:	4013      	ands	r3, r2
 80031e6:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 80031e8:	78f9      	ldrb	r1, [r7, #3]
 80031ea:	78bb      	ldrb	r3, [r7, #2]
 80031ec:	1fda      	subs	r2, r3, #7
 80031ee:	4613      	mov	r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	4413      	add	r3, r2
 80031f4:	fa01 f303 	lsl.w	r3, r1, r3
 80031f8:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 80031fa:	68fa      	ldr	r2, [r7, #12]
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	4313      	orrs	r3, r2
 8003200:	60fb      	str	r3, [r7, #12]
    ADCx->SQR2 = tmpreg1;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	68fa      	ldr	r2, [r7, #12]
 8003206:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003208:	e022      	b.n	8003250 <ADC_RegularChannelConfig+0x188>
    tmpreg1 = ADCx->SQR1;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800320e:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 8003210:	78bb      	ldrb	r3, [r7, #2]
 8003212:	f1a3 020d 	sub.w	r2, r3, #13
 8003216:	4613      	mov	r3, r2
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	4413      	add	r3, r2
 800321c:	221f      	movs	r2, #31
 800321e:	fa02 f303 	lsl.w	r3, r2, r3
 8003222:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	43db      	mvns	r3, r3
 8003228:	68fa      	ldr	r2, [r7, #12]
 800322a:	4013      	ands	r3, r2
 800322c:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 800322e:	78f9      	ldrb	r1, [r7, #3]
 8003230:	78bb      	ldrb	r3, [r7, #2]
 8003232:	f1a3 020d 	sub.w	r2, r3, #13
 8003236:	4613      	mov	r3, r2
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	4413      	add	r3, r2
 800323c:	fa01 f303 	lsl.w	r3, r1, r3
 8003240:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 8003242:	68fa      	ldr	r2, [r7, #12]
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	4313      	orrs	r3, r2
 8003248:	60fb      	str	r3, [r7, #12]
    ADCx->SQR1 = tmpreg1;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	68fa      	ldr	r2, [r7, #12]
 800324e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003250:	bf00      	nop
 8003252:	3714      	adds	r7, #20
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr

0800325c <ADC_SoftwareStartConv>:
  * @brief  Enables the selected ADC software start conversion of the regular channels.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Enable the selected ADC conversion for regular group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	609a      	str	r2, [r3, #8]
}
 8003270:	bf00      	nop
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003288:	b29b      	uxth	r3, r3
}
 800328a:	4618      	mov	r0, r3
 800328c:	370c      	adds	r7, #12
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr

08003296 <ADC_GetFlagStatus>:
  *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
  *            @arg ADC_FLAG_OVR: Overrun flag                                                 
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
 8003296:	b480      	push	{r7}
 8003298:	b085      	sub	sp, #20
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
 800329e:	460b      	mov	r3, r1
 80032a0:	70fb      	strb	r3, [r7, #3]
  FlagStatus bitstatus = RESET;
 80032a2:	2300      	movs	r3, #0
 80032a4:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	78fb      	ldrb	r3, [r7, #3]
 80032ac:	4013      	ands	r3, r2
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d002      	beq.n	80032b8 <ADC_GetFlagStatus+0x22>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 80032b2:	2301      	movs	r3, #1
 80032b4:	73fb      	strb	r3, [r7, #15]
 80032b6:	e001      	b.n	80032bc <ADC_GetFlagStatus+0x26>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 80032b8:	2300      	movs	r3, #0
 80032ba:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 80032bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3714      	adds	r7, #20
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
	...

080032cc <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 80032cc:	b480      	push	{r7}
 80032ce:	b085      	sub	sp, #20
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	460b      	mov	r3, r1
 80032d6:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 80032d8:	2300      	movs	r3, #0
 80032da:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 80032dc:	4b08      	ldr	r3, [pc, #32]	; (8003300 <DAC_SetChannel1Data+0x34>)
 80032de:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 80032e0:	68fa      	ldr	r2, [r7, #12]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4413      	add	r3, r2
 80032e6:	3308      	adds	r3, #8
 80032e8:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	461a      	mov	r2, r3
 80032ee:	887b      	ldrh	r3, [r7, #2]
 80032f0:	6013      	str	r3, [r2, #0]
}
 80032f2:	bf00      	nop
 80032f4:	3714      	adds	r7, #20
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	40007400 	.word	0x40007400

08003304 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8003304:	b480      	push	{r7}
 8003306:	b085      	sub	sp, #20
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800330e:	2300      	movs	r3, #0
 8003310:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003318:	68fa      	ldr	r2, [r7, #12]
 800331a:	4b25      	ldr	r3, [pc, #148]	; (80033b0 <DMA_Init+0xac>)
 800331c:	4013      	ands	r3, r2
 800331e:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800332e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	699b      	ldr	r3, [r3, #24]
 8003334:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800333a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	6a1b      	ldr	r3, [r3, #32]
 8003340:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8003346:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800334c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8003352:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003358:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800335a:	68fa      	ldr	r2, [r7, #12]
 800335c:	4313      	orrs	r3, r2
 800335e:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	68fa      	ldr	r2, [r7, #12]
 8003364:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f023 0307 	bic.w	r3, r3, #7
 8003372:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337c:	4313      	orrs	r3, r2
 800337e:	68fa      	ldr	r2, [r7, #12]
 8003380:	4313      	orrs	r3, r2
 8003382:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	68fa      	ldr	r2, [r7, #12]
 8003388:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	691a      	ldr	r2, [r3, #16]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	685a      	ldr	r2, [r3, #4]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	689a      	ldr	r2, [r3, #8]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	60da      	str	r2, [r3, #12]
}
 80033a2:	bf00      	nop
 80033a4:	3714      	adds	r7, #20
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	f01c803f 	.word	0xf01c803f

080033b4 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	460b      	mov	r3, r1
 80033be:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80033c0:	78fb      	ldrb	r3, [r7, #3]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d006      	beq.n	80033d4 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f043 0201 	orr.w	r2, r3, #1
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 80033d2:	e005      	b.n	80033e0 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f023 0201 	bic.w	r2, r3, #1
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	601a      	str	r2, [r3, #0]
}
 80033e0:	bf00      	nop
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b085      	sub	sp, #20
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 80033f4:	2300      	movs	r3, #0
 80033f6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0301 	and.w	r3, r3, #1
 8003400:	2b00      	cmp	r3, #0
 8003402:	d002      	beq.n	800340a <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 8003404:	2301      	movs	r3, #1
 8003406:	73fb      	strb	r3, [r7, #15]
 8003408:	e001      	b.n	800340e <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 800340a:	2300      	movs	r3, #0
 800340c:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 800340e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003410:	4618      	mov	r0, r3
 8003412:	3714      	adds	r7, #20
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 800341c:	b480      	push	{r7}
 800341e:	b087      	sub	sp, #28
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8003426:	2300      	movs	r3, #0
 8003428:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 800342a:	2300      	movs	r3, #0
 800342c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a15      	ldr	r2, [pc, #84]	; (8003488 <DMA_GetFlagStatus+0x6c>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d802      	bhi.n	800343c <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8003436:	4b15      	ldr	r3, [pc, #84]	; (800348c <DMA_GetFlagStatus+0x70>)
 8003438:	613b      	str	r3, [r7, #16]
 800343a:	e001      	b.n	8003440 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 800343c:	4b14      	ldr	r3, [pc, #80]	; (8003490 <DMA_GetFlagStatus+0x74>)
 800343e:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d003      	beq.n	8003452 <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	60fb      	str	r3, [r7, #12]
 8003450:	e002      	b.n	8003458 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800345e:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8003462:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8003464:	68fa      	ldr	r2, [r7, #12]
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	4013      	ands	r3, r2
 800346a:	2b00      	cmp	r3, #0
 800346c:	d002      	beq.n	8003474 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 800346e:	2301      	movs	r3, #1
 8003470:	75fb      	strb	r3, [r7, #23]
 8003472:	e001      	b.n	8003478 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8003474:	2300      	movs	r3, #0
 8003476:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8003478:	7dfb      	ldrb	r3, [r7, #23]
}
 800347a:	4618      	mov	r0, r3
 800347c:	371c      	adds	r7, #28
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	4002640f 	.word	0x4002640f
 800348c:	40026000 	.word	0x40026000
 8003490:	40026400 	.word	0x40026400

08003494 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8003494:	b480      	push	{r7}
 8003496:	b085      	sub	sp, #20
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a10      	ldr	r2, [pc, #64]	; (80034e4 <DMA_ClearFlag+0x50>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d802      	bhi.n	80034ac <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80034a6:	4b10      	ldr	r3, [pc, #64]	; (80034e8 <DMA_ClearFlag+0x54>)
 80034a8:	60fb      	str	r3, [r7, #12]
 80034aa:	e001      	b.n	80034b0 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80034ac:	4b0f      	ldr	r3, [pc, #60]	; (80034ec <DMA_ClearFlag+0x58>)
 80034ae:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d007      	beq.n	80034ca <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80034c0:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80034c4:	68fa      	ldr	r2, [r7, #12]
 80034c6:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 80034c8:	e006      	b.n	80034d8 <DMA_ClearFlag+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80034d0:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80034d4:	68fa      	ldr	r2, [r7, #12]
 80034d6:	6093      	str	r3, [r2, #8]
}
 80034d8:	bf00      	nop
 80034da:	3714      	adds	r7, #20
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr
 80034e4:	4002640f 	.word	0x4002640f
 80034e8:	40026000 	.word	0x40026000
 80034ec:	40026400 	.word	0x40026400

080034f0 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b087      	sub	sp, #28
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80034fa:	2300      	movs	r3, #0
 80034fc:	617b      	str	r3, [r7, #20]
 80034fe:	2300      	movs	r3, #0
 8003500:	613b      	str	r3, [r7, #16]
 8003502:	2300      	movs	r3, #0
 8003504:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8003506:	2300      	movs	r3, #0
 8003508:	617b      	str	r3, [r7, #20]
 800350a:	e076      	b.n	80035fa <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 800350c:	2201      	movs	r2, #1
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	fa02 f303 	lsl.w	r3, r2, r3
 8003514:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	4013      	ands	r3, r2
 800351e:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8003520:	68fa      	ldr	r2, [r7, #12]
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	429a      	cmp	r2, r3
 8003526:	d165      	bne.n	80035f4 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	005b      	lsls	r3, r3, #1
 8003530:	2103      	movs	r1, #3
 8003532:	fa01 f303 	lsl.w	r3, r1, r3
 8003536:	43db      	mvns	r3, r3
 8003538:	401a      	ands	r2, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	791b      	ldrb	r3, [r3, #4]
 8003546:	4619      	mov	r1, r3
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	005b      	lsls	r3, r3, #1
 800354c:	fa01 f303 	lsl.w	r3, r1, r3
 8003550:	431a      	orrs	r2, r3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	791b      	ldrb	r3, [r3, #4]
 800355a:	2b01      	cmp	r3, #1
 800355c:	d003      	beq.n	8003566 <GPIO_Init+0x76>
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	791b      	ldrb	r3, [r3, #4]
 8003562:	2b02      	cmp	r3, #2
 8003564:	d12e      	bne.n	80035c4 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	689a      	ldr	r2, [r3, #8]
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	005b      	lsls	r3, r3, #1
 800356e:	2103      	movs	r1, #3
 8003570:	fa01 f303 	lsl.w	r3, r1, r3
 8003574:	43db      	mvns	r3, r3
 8003576:	401a      	ands	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	689a      	ldr	r2, [r3, #8]
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	795b      	ldrb	r3, [r3, #5]
 8003584:	4619      	mov	r1, r3
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	005b      	lsls	r3, r3, #1
 800358a:	fa01 f303 	lsl.w	r3, r1, r3
 800358e:	431a      	orrs	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685a      	ldr	r2, [r3, #4]
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	b29b      	uxth	r3, r3
 800359c:	4619      	mov	r1, r3
 800359e:	2301      	movs	r3, #1
 80035a0:	408b      	lsls	r3, r1
 80035a2:	43db      	mvns	r3, r3
 80035a4:	401a      	ands	r2, r3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	683a      	ldr	r2, [r7, #0]
 80035b0:	7992      	ldrb	r2, [r2, #6]
 80035b2:	4611      	mov	r1, r2
 80035b4:	697a      	ldr	r2, [r7, #20]
 80035b6:	b292      	uxth	r2, r2
 80035b8:	fa01 f202 	lsl.w	r2, r1, r2
 80035bc:	b292      	uxth	r2, r2
 80035be:	431a      	orrs	r2, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	68da      	ldr	r2, [r3, #12]
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	005b      	lsls	r3, r3, #1
 80035ce:	2103      	movs	r1, #3
 80035d0:	fa01 f303 	lsl.w	r3, r1, r3
 80035d4:	43db      	mvns	r3, r3
 80035d6:	401a      	ands	r2, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	68da      	ldr	r2, [r3, #12]
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	79db      	ldrb	r3, [r3, #7]
 80035e4:	4619      	mov	r1, r3
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	005b      	lsls	r3, r3, #1
 80035ea:	fa01 f303 	lsl.w	r3, r1, r3
 80035ee:	431a      	orrs	r2, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	3301      	adds	r3, #1
 80035f8:	617b      	str	r3, [r7, #20]
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	2b0f      	cmp	r3, #15
 80035fe:	d985      	bls.n	800350c <GPIO_Init+0x1c>
    }
  }
}
 8003600:	bf00      	nop
 8003602:	371c      	adds	r7, #28
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	460b      	mov	r3, r1
 8003616:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	887a      	ldrh	r2, [r7, #2]
 800361c:	831a      	strh	r2, [r3, #24]
}
 800361e:	bf00      	nop
 8003620:	370c      	adds	r7, #12
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr

0800362a <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800362a:	b480      	push	{r7}
 800362c:	b083      	sub	sp, #12
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
 8003632:	460b      	mov	r3, r1
 8003634:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	887a      	ldrh	r2, [r7, #2]
 800363a:	835a      	strh	r2, [r3, #26]
}
 800363c:	bf00      	nop
 800363e:	370c      	adds	r7, #12
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	460b      	mov	r3, r1
 8003652:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003654:	78fb      	ldrb	r3, [r7, #3]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d006      	beq.n	8003668 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800365a:	490a      	ldr	r1, [pc, #40]	; (8003684 <RCC_AHB1PeriphClockCmd+0x3c>)
 800365c:	4b09      	ldr	r3, [pc, #36]	; (8003684 <RCC_AHB1PeriphClockCmd+0x3c>)
 800365e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4313      	orrs	r3, r2
 8003664:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8003666:	e006      	b.n	8003676 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8003668:	4906      	ldr	r1, [pc, #24]	; (8003684 <RCC_AHB1PeriphClockCmd+0x3c>)
 800366a:	4b06      	ldr	r3, [pc, #24]	; (8003684 <RCC_AHB1PeriphClockCmd+0x3c>)
 800366c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	43db      	mvns	r3, r3
 8003672:	4013      	ands	r3, r2
 8003674:	630b      	str	r3, [r1, #48]	; 0x30
}
 8003676:	bf00      	nop
 8003678:	370c      	adds	r7, #12
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	40023800 	.word	0x40023800

08003688 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	460b      	mov	r3, r1
 8003692:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003694:	78fb      	ldrb	r3, [r7, #3]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d006      	beq.n	80036a8 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800369a:	490a      	ldr	r1, [pc, #40]	; (80036c4 <RCC_APB2PeriphClockCmd+0x3c>)
 800369c:	4b09      	ldr	r3, [pc, #36]	; (80036c4 <RCC_APB2PeriphClockCmd+0x3c>)
 800369e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80036a6:	e006      	b.n	80036b6 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80036a8:	4906      	ldr	r1, [pc, #24]	; (80036c4 <RCC_APB2PeriphClockCmd+0x3c>)
 80036aa:	4b06      	ldr	r3, [pc, #24]	; (80036c4 <RCC_APB2PeriphClockCmd+0x3c>)
 80036ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	43db      	mvns	r3, r3
 80036b2:	4013      	ands	r3, r2
 80036b4:	644b      	str	r3, [r1, #68]	; 0x44
}
 80036b6:	bf00      	nop
 80036b8:	370c      	adds	r7, #12
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
 80036c4:	40023800 	.word	0x40023800

080036c8 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	460b      	mov	r3, r1
 80036d2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	887a      	ldrh	r2, [r7, #2]
 80036d8:	819a      	strh	r2, [r3, #12]
}
 80036da:	bf00      	nop
 80036dc:	370c      	adds	r7, #12
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr

080036e6 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 80036e6:	b480      	push	{r7}
 80036e8:	b085      	sub	sp, #20
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]
 80036ee:	460b      	mov	r3, r1
 80036f0:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80036f2:	2300      	movs	r3, #0
 80036f4:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	891b      	ldrh	r3, [r3, #8]
 80036fa:	b29a      	uxth	r2, r3
 80036fc:	887b      	ldrh	r3, [r7, #2]
 80036fe:	4013      	ands	r3, r2
 8003700:	b29b      	uxth	r3, r3
 8003702:	2b00      	cmp	r3, #0
 8003704:	d002      	beq.n	800370c <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8003706:	2301      	movs	r3, #1
 8003708:	73fb      	strb	r3, [r7, #15]
 800370a:	e001      	b.n	8003710 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 800370c:	2300      	movs	r3, #0
 800370e:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8003710:	7bfb      	ldrb	r3, [r7, #15]
}
 8003712:	4618      	mov	r0, r3
 8003714:	3714      	adds	r7, #20
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
	...

08003720 <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 8003720:	b580      	push	{r7, lr}
 8003722:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 8003724:	4b38      	ldr	r3, [pc, #224]	; (8003808 <Audio_MAL_IRQHandler+0xe8>)
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	4b38      	ldr	r3, [pc, #224]	; (800380c <Audio_MAL_IRQHandler+0xec>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4619      	mov	r1, r3
 800372e:	4610      	mov	r0, r2
 8003730:	f7ff fe74 	bl	800341c <DMA_GetFlagStatus>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d064      	beq.n	8003804 <Audio_MAL_IRQHandler+0xe4>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 800373a:	4b35      	ldr	r3, [pc, #212]	; (8003810 <Audio_MAL_IRQHandler+0xf0>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d04c      	beq.n	80037dc <Audio_MAL_IRQHandler+0xbc>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 8003742:	bf00      	nop
 8003744:	4b30      	ldr	r3, [pc, #192]	; (8003808 <Audio_MAL_IRQHandler+0xe8>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4618      	mov	r0, r3
 800374a:	f7ff fe4f 	bl	80033ec <DMA_GetCmdStatus>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d1f7      	bne.n	8003744 <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 8003754:	4b2c      	ldr	r3, [pc, #176]	; (8003808 <Audio_MAL_IRQHandler+0xe8>)
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	4b2c      	ldr	r3, [pc, #176]	; (800380c <Audio_MAL_IRQHandler+0xec>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4619      	mov	r1, r3
 800375e:	4610      	mov	r0, r2
 8003760:	f7ff fe98 	bl	8003494 <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 8003764:	4b2b      	ldr	r3, [pc, #172]	; (8003814 <Audio_MAL_IRQHandler+0xf4>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	461a      	mov	r2, r3
 800376a:	4b2b      	ldr	r3, [pc, #172]	; (8003818 <Audio_MAL_IRQHandler+0xf8>)
 800376c:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 800376e:	4b28      	ldr	r3, [pc, #160]	; (8003810 <Audio_MAL_IRQHandler+0xf0>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003776:	4293      	cmp	r3, r2
 8003778:	bf28      	it	cs
 800377a:	4613      	movcs	r3, r2
 800377c:	4a26      	ldr	r2, [pc, #152]	; (8003818 <Audio_MAL_IRQHandler+0xf8>)
 800377e:	6113      	str	r3, [r2, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 8003780:	4b21      	ldr	r3, [pc, #132]	; (8003808 <Audio_MAL_IRQHandler+0xe8>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4924      	ldr	r1, [pc, #144]	; (8003818 <Audio_MAL_IRQHandler+0xf8>)
 8003786:	4618      	mov	r0, r3
 8003788:	f7ff fdbc 	bl	8003304 <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 800378c:	4b1e      	ldr	r3, [pc, #120]	; (8003808 <Audio_MAL_IRQHandler+0xe8>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2101      	movs	r1, #1
 8003792:	4618      	mov	r0, r3
 8003794:	f7ff fe0e 	bl	80033b4 <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 8003798:	4b1e      	ldr	r3, [pc, #120]	; (8003814 <Audio_MAL_IRQHandler+0xf4>)
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	4b1c      	ldr	r3, [pc, #112]	; (8003810 <Audio_MAL_IRQHandler+0xf0>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037a4:	d203      	bcs.n	80037ae <Audio_MAL_IRQHandler+0x8e>
 80037a6:	4b1a      	ldr	r3, [pc, #104]	; (8003810 <Audio_MAL_IRQHandler+0xf0>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	005b      	lsls	r3, r3, #1
 80037ac:	e000      	b.n	80037b0 <Audio_MAL_IRQHandler+0x90>
 80037ae:	4b1b      	ldr	r3, [pc, #108]	; (800381c <Audio_MAL_IRQHandler+0xfc>)
 80037b0:	4413      	add	r3, r2
 80037b2:	4a18      	ldr	r2, [pc, #96]	; (8003814 <Audio_MAL_IRQHandler+0xf4>)
 80037b4:	6013      	str	r3, [r2, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 80037b6:	4b16      	ldr	r3, [pc, #88]	; (8003810 <Audio_MAL_IRQHandler+0xf0>)
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	4b15      	ldr	r3, [pc, #84]	; (8003810 <Audio_MAL_IRQHandler+0xf0>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80037c2:	428b      	cmp	r3, r1
 80037c4:	bf28      	it	cs
 80037c6:	460b      	movcs	r3, r1
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	4a11      	ldr	r2, [pc, #68]	; (8003810 <Audio_MAL_IRQHandler+0xf0>)
 80037cc:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 80037ce:	4b0e      	ldr	r3, [pc, #56]	; (8003808 <Audio_MAL_IRQHandler+0xe8>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	2101      	movs	r1, #1
 80037d4:	4618      	mov	r0, r3
 80037d6:	f7ff fded 	bl	80033b4 <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 80037da:	e013      	b.n	8003804 <Audio_MAL_IRQHandler+0xe4>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 80037dc:	4b0a      	ldr	r3, [pc, #40]	; (8003808 <Audio_MAL_IRQHandler+0xe8>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2100      	movs	r1, #0
 80037e2:	4618      	mov	r0, r3
 80037e4:	f7ff fde6 	bl	80033b4 <DMA_Cmd>
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 80037e8:	4b07      	ldr	r3, [pc, #28]	; (8003808 <Audio_MAL_IRQHandler+0xe8>)
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	4b07      	ldr	r3, [pc, #28]	; (800380c <Audio_MAL_IRQHandler+0xec>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4619      	mov	r1, r3
 80037f2:	4610      	mov	r0, r2
 80037f4:	f7ff fe4e 	bl	8003494 <DMA_ClearFlag>
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 80037f8:	4b06      	ldr	r3, [pc, #24]	; (8003814 <Audio_MAL_IRQHandler+0xf4>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2100      	movs	r1, #0
 80037fe:	4618      	mov	r0, r3
 8003800:	f000 f8c0 	bl	8003984 <EVAL_AUDIO_TransferComplete_CallBack>
}
 8003804:	bf00      	nop
 8003806:	bd80      	pop	{r7, pc}
 8003808:	2000000c 	.word	0x2000000c
 800380c:	20000010 	.word	0x20000010
 8003810:	20000004 	.word	0x20000004
 8003814:	20001e4c 	.word	0x20001e4c
 8003818:	20001e8c 	.word	0x20001e8c
 800381c:	0001fffe 	.word	0x0001fffe

08003820 <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 8003820:	b580      	push	{r7, lr}
 8003822:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8003824:	f7ff ff7c 	bl	8003720 <Audio_MAL_IRQHandler>
}
 8003828:	bf00      	nop
 800382a:	bd80      	pop	{r7, pc}

0800382c <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 800382c:	b580      	push	{r7, lr}
 800382e:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8003830:	f7ff ff76 	bl	8003720 <Audio_MAL_IRQHandler>
}
 8003834:	bf00      	nop
 8003836:	bd80      	pop	{r7, pc}

08003838 <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 800383c:	2102      	movs	r1, #2
 800383e:	480d      	ldr	r0, [pc, #52]	; (8003874 <SPI3_IRQHandler+0x3c>)
 8003840:	f7ff ff51 	bl	80036e6 <SPI_I2S_GetFlagStatus>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d011      	beq.n	800386e <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 800384a:	4b0b      	ldr	r3, [pc, #44]	; (8003878 <SPI3_IRQHandler+0x40>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2b02      	cmp	r3, #2
 8003850:	d106      	bne.n	8003860 <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 8003852:	f000 f8a2 	bl	800399a <EVAL_AUDIO_GetSampleCallBack>
 8003856:	4603      	mov	r3, r0
 8003858:	4619      	mov	r1, r3
 800385a:	2004      	movs	r0, #4
 800385c:	f7ff fd36 	bl	80032cc <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 8003860:	f000 f89b 	bl	800399a <EVAL_AUDIO_GetSampleCallBack>
 8003864:	4603      	mov	r3, r0
 8003866:	4619      	mov	r1, r3
 8003868:	4802      	ldr	r0, [pc, #8]	; (8003874 <SPI3_IRQHandler+0x3c>)
 800386a:	f7ff ff2d 	bl	80036c8 <SPI_I2S_SendData>
  }
}
 800386e:	bf00      	nop
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	40003c00 	.word	0x40003c00
 8003878:	20000008 	.word	0x20000008

0800387c <GREEN_Status_Timer_Callback>:
#include "LightTimers.h"


uint8_t lightStatus;

void GREEN_Status_Timer_Callback() {
 800387c:	b580      	push	{r7, lr}
 800387e:	af00      	add	r7, sp, #0

	GPIO_ResetBits(GPIO_PORT, GREEN_LIGHT_PIN);        // turn off GREEN light
 8003880:	2104      	movs	r1, #4
 8003882:	480f      	ldr	r0, [pc, #60]	; (80038c0 <GREEN_Status_Timer_Callback+0x44>)
 8003884:	f7ff fed1 	bl	800362a <GPIO_ResetBits>
	GPIO_SetBits(GPIO_PORT, AMBER_LIGHT_PIN);         // turn on AMBER light
 8003888:	2102      	movs	r1, #2
 800388a:	480d      	ldr	r0, [pc, #52]	; (80038c0 <GREEN_Status_Timer_Callback+0x44>)
 800388c:	f7ff febe 	bl	800360c <GPIO_SetBits>

	printf("GREEN Light OFF, AMBER light On\n");
 8003890:	480c      	ldr	r0, [pc, #48]	; (80038c4 <GREEN_Status_Timer_Callback+0x48>)
 8003892:	f001 f939 	bl	8004b08 <puts>

	lightStatus = AMBER;
 8003896:	4b0c      	ldr	r3, [pc, #48]	; (80038c8 <GREEN_Status_Timer_Callback+0x4c>)
 8003898:	2202      	movs	r2, #2
 800389a:	701a      	strb	r2, [r3, #0]

	xQueueOverwrite(xLightStatusQueue, &lightStatus);
 800389c:	4b0b      	ldr	r3, [pc, #44]	; (80038cc <GREEN_Status_Timer_Callback+0x50>)
 800389e:	6818      	ldr	r0, [r3, #0]
 80038a0:	2302      	movs	r3, #2
 80038a2:	2200      	movs	r2, #0
 80038a4:	4908      	ldr	r1, [pc, #32]	; (80038c8 <GREEN_Status_Timer_Callback+0x4c>)
 80038a6:	f7fd fc7b 	bl	80011a0 <xQueueGenericSend>

	xEventGroupSetBits(xLightStatusTrasition,	lightStatus);
 80038aa:	4b09      	ldr	r3, [pc, #36]	; (80038d0 <GREEN_Status_Timer_Callback+0x54>)
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	4b06      	ldr	r3, [pc, #24]	; (80038c8 <GREEN_Status_Timer_Callback+0x4c>)
 80038b0:	781b      	ldrb	r3, [r3, #0]
 80038b2:	4619      	mov	r1, r3
 80038b4:	4610      	mov	r0, r2
 80038b6:	f7fc ffcb 	bl	8000850 <xEventGroupSetBits>


}
 80038ba:	bf00      	nop
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	40020800 	.word	0x40020800
 80038c4:	080053c8 	.word	0x080053c8
 80038c8:	20001ecc 	.word	0x20001ecc
 80038cc:	20001ee0 	.word	0x20001ee0
 80038d0:	20001ed8 	.word	0x20001ed8

080038d4 <YELLOW_Status_Timer_Callback>:

void YELLOW_Status_Timer_Callback() {
 80038d4:	b580      	push	{r7, lr}
 80038d6:	af00      	add	r7, sp, #0

	GPIO_ResetBits(GPIO_PORT, AMBER_LIGHT_PIN);       // turn off yellow light
 80038d8:	2102      	movs	r1, #2
 80038da:	480f      	ldr	r0, [pc, #60]	; (8003918 <YELLOW_Status_Timer_Callback+0x44>)
 80038dc:	f7ff fea5 	bl	800362a <GPIO_ResetBits>
	GPIO_SetBits(GPIO_PORT, RED_LIGHT_PIN);            // turn on red light
 80038e0:	2101      	movs	r1, #1
 80038e2:	480d      	ldr	r0, [pc, #52]	; (8003918 <YELLOW_Status_Timer_Callback+0x44>)
 80038e4:	f7ff fe92 	bl	800360c <GPIO_SetBits>

	printf("YELLOW Light OFF, RED light On\n");
 80038e8:	480c      	ldr	r0, [pc, #48]	; (800391c <YELLOW_Status_Timer_Callback+0x48>)
 80038ea:	f001 f90d 	bl	8004b08 <puts>

	lightStatus = RED;
 80038ee:	4b0c      	ldr	r3, [pc, #48]	; (8003920 <YELLOW_Status_Timer_Callback+0x4c>)
 80038f0:	2204      	movs	r2, #4
 80038f2:	701a      	strb	r2, [r3, #0]

	xQueueOverwrite(xLightStatusQueue, &lightStatus);
 80038f4:	4b0b      	ldr	r3, [pc, #44]	; (8003924 <YELLOW_Status_Timer_Callback+0x50>)
 80038f6:	6818      	ldr	r0, [r3, #0]
 80038f8:	2302      	movs	r3, #2
 80038fa:	2200      	movs	r2, #0
 80038fc:	4908      	ldr	r1, [pc, #32]	; (8003920 <YELLOW_Status_Timer_Callback+0x4c>)
 80038fe:	f7fd fc4f 	bl	80011a0 <xQueueGenericSend>

	xEventGroupSetBits(xLightStatusTrasition,	lightStatus);
 8003902:	4b09      	ldr	r3, [pc, #36]	; (8003928 <YELLOW_Status_Timer_Callback+0x54>)
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	4b06      	ldr	r3, [pc, #24]	; (8003920 <YELLOW_Status_Timer_Callback+0x4c>)
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	4619      	mov	r1, r3
 800390c:	4610      	mov	r0, r2
 800390e:	f7fc ff9f 	bl	8000850 <xEventGroupSetBits>



}
 8003912:	bf00      	nop
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	40020800 	.word	0x40020800
 800391c:	080053e8 	.word	0x080053e8
 8003920:	20001ecc 	.word	0x20001ecc
 8003924:	20001ee0 	.word	0x20001ee0
 8003928:	20001ed8 	.word	0x20001ed8

0800392c <RED_Status_Timer_Callback>:

void RED_Status_Timer_Callback() {
 800392c:	b580      	push	{r7, lr}
 800392e:	af00      	add	r7, sp, #0

	GPIO_ResetBits(GPIO_PORT, RED_LIGHT_PIN);       // turn off RED light
 8003930:	2101      	movs	r1, #1
 8003932:	480f      	ldr	r0, [pc, #60]	; (8003970 <RED_Status_Timer_Callback+0x44>)
 8003934:	f7ff fe79 	bl	800362a <GPIO_ResetBits>
	GPIO_SetBits(GPIO_PORT, GREEN_LIGHT_PIN);            // turn on GREEN light
 8003938:	2104      	movs	r1, #4
 800393a:	480d      	ldr	r0, [pc, #52]	; (8003970 <RED_Status_Timer_Callback+0x44>)
 800393c:	f7ff fe66 	bl	800360c <GPIO_SetBits>

	printf("RED Light OFF, GREEN light On\n");
 8003940:	480c      	ldr	r0, [pc, #48]	; (8003974 <RED_Status_Timer_Callback+0x48>)
 8003942:	f001 f8e1 	bl	8004b08 <puts>

	lightStatus= GREEN;
 8003946:	4b0c      	ldr	r3, [pc, #48]	; (8003978 <RED_Status_Timer_Callback+0x4c>)
 8003948:	2201      	movs	r2, #1
 800394a:	701a      	strb	r2, [r3, #0]

	xQueueOverwrite(xLightStatusQueue, &lightStatus);
 800394c:	4b0b      	ldr	r3, [pc, #44]	; (800397c <RED_Status_Timer_Callback+0x50>)
 800394e:	6818      	ldr	r0, [r3, #0]
 8003950:	2302      	movs	r3, #2
 8003952:	2200      	movs	r2, #0
 8003954:	4908      	ldr	r1, [pc, #32]	; (8003978 <RED_Status_Timer_Callback+0x4c>)
 8003956:	f7fd fc23 	bl	80011a0 <xQueueGenericSend>

	xEventGroupSetBits(xLightStatusTrasition,	lightStatus);
 800395a:	4b09      	ldr	r3, [pc, #36]	; (8003980 <RED_Status_Timer_Callback+0x54>)
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	4b06      	ldr	r3, [pc, #24]	; (8003978 <RED_Status_Timer_Callback+0x4c>)
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	4619      	mov	r1, r3
 8003964:	4610      	mov	r0, r2
 8003966:	f7fc ff73 	bl	8000850 <xEventGroupSetBits>


}
 800396a:	bf00      	nop
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	40020800 	.word	0x40020800
 8003974:	08005408 	.word	0x08005408
 8003978:	20001ecc 	.word	0x20001ecc
 800397c:	20001ee0 	.word	0x20001ee0
 8003980:	20001ed8 	.word	0x20001ed8

08003984 <EVAL_AUDIO_TransferComplete_CallBack>:
/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
__attribute__((weak)) void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size)
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
  /* TODO, implement your code here */
  return;
 800398e:	bf00      	nop
}
 8003990:	370c      	adds	r7, #12
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr

0800399a <EVAL_AUDIO_GetSampleCallBack>:
/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
__attribute__((weak)) uint16_t EVAL_AUDIO_GetSampleCallBack(void)
{
 800399a:	b480      	push	{r7}
 800399c:	af00      	add	r7, sp, #0
  /* TODO, implement your code here */
  return 0;
 800399e:	2300      	movs	r3, #0
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
	...

080039ac <Traffic_Flow_Task>:
 *
 *
 *
 *
 */
void Traffic_Flow_Task(void *pvParameters) {
 80039ac:	b590      	push	{r4, r7, lr}
 80039ae:	b085      	sub	sp, #20
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]

	printf("COMMENCING TRAFFIC FLOW TASK\n");
 80039b4:	4832      	ldr	r0, [pc, #200]	; (8003a80 <Traffic_Flow_Task+0xd4>)
 80039b6:	f001 f8a7 	bl	8004b08 <puts>

	uint16_t adcVal = 0;  // instantaneous adc value
 80039ba:	2300      	movs	r3, #0
 80039bc:	81fb      	strh	r3, [r7, #14]
	uint8_t inst_TrafficFlow = 0; // instantaneous traffic flow
 80039be:	2300      	movs	r3, #0
 80039c0:	737b      	strb	r3, [r7, #13]
	uint16_t flowTrans = 0;  // Flow Transition
 80039c2:	2300      	movs	r3, #0
 80039c4:	817b      	strh	r3, [r7, #10]
	uint16_t checkFlowRate = 0;  // Check Flow Rate
 80039c6:	2300      	movs	r3, #0
 80039c8:	813b      	strh	r3, [r7, #8]

	while (1) {

		ADC_SoftwareStartConv(ADC1);		    // Start conversion of ADC value
 80039ca:	482e      	ldr	r0, [pc, #184]	; (8003a84 <Traffic_Flow_Task+0xd8>)
 80039cc:	f7ff fc46 	bl	800325c <ADC_SoftwareStartConv>
		while (!ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC));	// Wait for ADC to finish conversion
 80039d0:	bf00      	nop
 80039d2:	2102      	movs	r1, #2
 80039d4:	482b      	ldr	r0, [pc, #172]	; (8003a84 <Traffic_Flow_Task+0xd8>)
 80039d6:	f7ff fc5e 	bl	8003296 <ADC_GetFlagStatus>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d0f8      	beq.n	80039d2 <Traffic_Flow_Task+0x26>
		adcVal = ADC_GetConversionValue(ADC1);       // Grab ADC value
 80039e0:	4828      	ldr	r0, [pc, #160]	; (8003a84 <Traffic_Flow_Task+0xd8>)
 80039e2:	f7ff fc4b 	bl	800327c <ADC_GetConversionValue>
 80039e6:	4603      	mov	r3, r0
 80039e8:	81fb      	strh	r3, [r7, #14]

		inst_TrafficFlow = (uint8_t) floor(adcVal / 512); // Divide isntantaneous adc Val with mod param to get distinct flow regions
 80039ea:	89fb      	ldrh	r3, [r7, #14]
 80039ec:	0a5b      	lsrs	r3, r3, #9
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	4618      	mov	r0, r3
 80039f2:	f7fc fd3f 	bl	8000474 <__aeabi_i2d>
 80039f6:	4603      	mov	r3, r0
 80039f8:	460c      	mov	r4, r1
 80039fa:	4618      	mov	r0, r3
 80039fc:	4621      	mov	r1, r4
 80039fe:	f000 ff6b 	bl	80048d8 <floor>
 8003a02:	4603      	mov	r3, r0
 8003a04:	460c      	mov	r4, r1
 8003a06:	4618      	mov	r0, r3
 8003a08:	4621      	mov	r1, r4
 8003a0a:	f7fc fe21 	bl	8000650 <__aeabi_d2uiz>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	737b      	strb	r3, [r7, #13]

		flowTrans = abs(inst_TrafficFlow - trafficFlow); // Get traffic flow transition
 8003a12:	7b7b      	ldrb	r3, [r7, #13]
 8003a14:	4a1c      	ldr	r2, [pc, #112]	; (8003a88 <Traffic_Flow_Task+0xdc>)
 8003a16:	7812      	ldrb	r2, [r2, #0]
 8003a18:	b2d2      	uxtb	r2, r2
 8003a1a:	1a9b      	subs	r3, r3, r2
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	bfb8      	it	lt
 8003a20:	425b      	neglt	r3, r3
 8003a22:	817b      	strh	r3, [r7, #10]

		trafficFlow = inst_TrafficFlow;
 8003a24:	4a18      	ldr	r2, [pc, #96]	; (8003a88 <Traffic_Flow_Task+0xdc>)
 8003a26:	7b7b      	ldrb	r3, [r7, #13]
 8003a28:	7013      	strb	r3, [r2, #0]


		if (xQueuePeek(xFlowQueue, &checkFlowRate, 500) != NULL) { // Check if a value exists in the queue
 8003a2a:	4b18      	ldr	r3, [pc, #96]	; (8003a8c <Traffic_Flow_Task+0xe0>)
 8003a2c:	6818      	ldr	r0, [r3, #0]
 8003a2e:	f107 0108 	add.w	r1, r7, #8
 8003a32:	2301      	movs	r3, #1
 8003a34:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003a38:	f7fd fd40 	bl	80014bc <xQueueGenericReceive>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d012      	beq.n	8003a68 <Traffic_Flow_Task+0xbc>

			xQueueOverwrite(xFlowQueue, &trafficFlow); // override current value
 8003a42:	4b12      	ldr	r3, [pc, #72]	; (8003a8c <Traffic_Flow_Task+0xe0>)
 8003a44:	6818      	ldr	r0, [r3, #0]
 8003a46:	2302      	movs	r3, #2
 8003a48:	2200      	movs	r2, #0
 8003a4a:	490f      	ldr	r1, [pc, #60]	; (8003a88 <Traffic_Flow_Task+0xdc>)
 8003a4c:	f7fd fba8 	bl	80011a0 <xQueueGenericSend>
			if (flowTrans != 0) {
 8003a50:	897b      	ldrh	r3, [r7, #10]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d010      	beq.n	8003a78 <Traffic_Flow_Task+0xcc>

				printf("Flow Transition = %u, Traffic Flow = %u \n ", flowTrans,
 8003a56:	8979      	ldrh	r1, [r7, #10]
 8003a58:	4b0b      	ldr	r3, [pc, #44]	; (8003a88 <Traffic_Flow_Task+0xdc>)
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	461a      	mov	r2, r3
 8003a60:	480b      	ldr	r0, [pc, #44]	; (8003a90 <Traffic_Flow_Task+0xe4>)
 8003a62:	f000 feed 	bl	8004840 <printf>
 8003a66:	e007      	b.n	8003a78 <Traffic_Flow_Task+0xcc>

			}

		} else {

			xQueueSend(xFlowQueue, &trafficFlow, 1000); // Send new value to queue if not
 8003a68:	4b08      	ldr	r3, [pc, #32]	; (8003a8c <Traffic_Flow_Task+0xe0>)
 8003a6a:	6818      	ldr	r0, [r3, #0]
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a72:	4905      	ldr	r1, [pc, #20]	; (8003a88 <Traffic_Flow_Task+0xdc>)
 8003a74:	f7fd fb94 	bl	80011a0 <xQueueGenericSend>

		}

		vTaskDelay(200);
 8003a78:	20c8      	movs	r0, #200	; 0xc8
 8003a7a:	f7fe f8cf 	bl	8001c1c <vTaskDelay>
	while (1) {
 8003a7e:	e7a4      	b.n	80039ca <Traffic_Flow_Task+0x1e>
 8003a80:	08005428 	.word	0x08005428
 8003a84:	40012000 	.word	0x40012000
 8003a88:	20001de8 	.word	0x20001de8
 8003a8c:	20001ee8 	.word	0x20001ee8
 8003a90:	08005448 	.word	0x08005448

08003a94 <Traffic_Generator_Task>:
 * represented in many ways (e.g., a single integer, an array, or a struct).
 *
 *
 *
 */
void Traffic_Generator_Task(void *pvParameters) {
 8003a94:	b590      	push	{r4, r7, lr}
 8003a96:	b085      	sub	sp, #20
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]

	printf("COMMENCING TRAFFIC GENERATOR TASK \n");
 8003a9c:	4867      	ldr	r0, [pc, #412]	; (8003c3c <Traffic_Generator_Task+0x1a8>)
 8003a9e:	f001 f833 	bl	8004b08 <puts>


	uint8_t lightStatus;


	uint8_t flowSpacing = 0;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	73fb      	strb	r3, [r7, #15]
	uint8_t temp;


	while (1) {

		xQueuePeek(xFlowQueue, &flowData, pdMS_TO_TICKS(100));
 8003aa6:	4b66      	ldr	r3, [pc, #408]	; (8003c40 <Traffic_Generator_Task+0x1ac>)
 8003aa8:	6818      	ldr	r0, [r3, #0]
 8003aaa:	f107 0109 	add.w	r1, r7, #9
 8003aae:	2301      	movs	r3, #1
 8003ab0:	2264      	movs	r2, #100	; 0x64
 8003ab2:	f7fd fd03 	bl	80014bc <xQueueGenericReceive>
		xQueuePeek(xLightStatusQueue, &lightStatus, pdMS_TO_TICKS(100));
 8003ab6:	4b63      	ldr	r3, [pc, #396]	; (8003c44 <Traffic_Generator_Task+0x1b0>)
 8003ab8:	6818      	ldr	r0, [r3, #0]
 8003aba:	f107 0108 	add.w	r1, r7, #8
 8003abe:	2301      	movs	r3, #1
 8003ac0:	2264      	movs	r2, #100	; 0x64
 8003ac2:	f7fd fcfb 	bl	80014bc <xQueueGenericReceive>
		printf("Light Satus = %u\n", lightStatus);
 8003ac6:	7a3b      	ldrb	r3, [r7, #8]
 8003ac8:	4619      	mov	r1, r3
 8003aca:	485f      	ldr	r0, [pc, #380]	; (8003c48 <Traffic_Generator_Task+0x1b4>)
 8003acc:	f000 feb8 	bl	8004840 <printf>
		printf(" Flow Data  :  %u \n ", flowData);
 8003ad0:	7a7b      	ldrb	r3, [r7, #9]
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	485d      	ldr	r0, [pc, #372]	; (8003c4c <Traffic_Generator_Task+0x1b8>)
 8003ad6:	f000 feb3 	bl	8004840 <printf>

		newCarFlag = (MAX_FLOW_RATE - flowData) < (rand() % MAX_FLOW_RATE);
 8003ada:	7a7b      	ldrb	r3, [r7, #9]
 8003adc:	f1c3 0407 	rsb	r4, r3, #7
 8003ae0:	f001 f81a 	bl	8004b18 <rand>
 8003ae4:	4601      	mov	r1, r0
 8003ae6:	4b5a      	ldr	r3, [pc, #360]	; (8003c50 <Traffic_Generator_Task+0x1bc>)
 8003ae8:	fb83 2301 	smull	r2, r3, r3, r1
 8003aec:	440b      	add	r3, r1
 8003aee:	109a      	asrs	r2, r3, #2
 8003af0:	17cb      	asrs	r3, r1, #31
 8003af2:	1ad2      	subs	r2, r2, r3
 8003af4:	4613      	mov	r3, r2
 8003af6:	00db      	lsls	r3, r3, #3
 8003af8:	1a9b      	subs	r3, r3, r2
 8003afa:	1aca      	subs	r2, r1, r3
 8003afc:	4294      	cmp	r4, r2
 8003afe:	bfb4      	ite	lt
 8003b00:	2301      	movlt	r3, #1
 8003b02:	2300      	movge	r3, #0
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	72fb      	strb	r3, [r7, #11]

		printf("Size of CAR ARR = %u \n", sizeof(carArr));
 8003b08:	2113      	movs	r1, #19
 8003b0a:	4852      	ldr	r0, [pc, #328]	; (8003c54 <Traffic_Generator_Task+0x1c0>)
 8003b0c:	f000 fe98 	bl	8004840 <printf>


		printf(" NewCarFlag :  %u \n ", newCarFlag);
 8003b10:	7afb      	ldrb	r3, [r7, #11]
 8003b12:	4619      	mov	r1, r3
 8003b14:	4850      	ldr	r0, [pc, #320]	; (8003c58 <Traffic_Generator_Task+0x1c4>)
 8003b16:	f000 fe93 	bl	8004840 <printf>

		carArr[ROAD_LENGTH] = newCarFlag;
 8003b1a:	4a50      	ldr	r2, [pc, #320]	; (8003c5c <Traffic_Generator_Task+0x1c8>)
 8003b1c:	7afb      	ldrb	r3, [r7, #11]
 8003b1e:	74d3      	strb	r3, [r2, #19]

		if (!(newCarFlag) && (flowSpacing % CAR_SPACING_MIN_ADC == 0)) {
 8003b20:	7afb      	ldrb	r3, [r7, #11]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d10e      	bne.n	8003b44 <Traffic_Generator_Task+0xb0>
 8003b26:	7bfa      	ldrb	r2, [r7, #15]
 8003b28:	4b4d      	ldr	r3, [pc, #308]	; (8003c60 <Traffic_Generator_Task+0x1cc>)
 8003b2a:	fba3 1302 	umull	r1, r3, r3, r2
 8003b2e:	0899      	lsrs	r1, r3, #2
 8003b30:	460b      	mov	r3, r1
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	440b      	add	r3, r1
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d102      	bne.n	8003b44 <Traffic_Generator_Task+0xb0>

			carArr[ROAD_LENGTH ] = 1;
 8003b3e:	4b47      	ldr	r3, [pc, #284]	; (8003c5c <Traffic_Generator_Task+0x1c8>)
 8003b40:	2201      	movs	r2, #1
 8003b42:	74da      	strb	r2, [r3, #19]

		}

		if (lightStatus == GREEN) {
 8003b44:	7a3b      	ldrb	r3, [r7, #8]
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d120      	bne.n	8003b8c <Traffic_Generator_Task+0xf8>

			for (int8_t i = 0; i <= sizeof(carArr); i++) {
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	73bb      	strb	r3, [r7, #14]
 8003b4e:	e019      	b.n	8003b84 <Traffic_Generator_Task+0xf0>

				temp = carArr[i + 1];
 8003b50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003b54:	3301      	adds	r3, #1
 8003b56:	4a41      	ldr	r2, [pc, #260]	; (8003c5c <Traffic_Generator_Task+0x1c8>)
 8003b58:	5cd3      	ldrb	r3, [r2, r3]
 8003b5a:	72bb      	strb	r3, [r7, #10]

				carArr[i + 1] = carArr[i];
 8003b5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003b60:	3301      	adds	r3, #1
 8003b62:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8003b66:	493d      	ldr	r1, [pc, #244]	; (8003c5c <Traffic_Generator_Task+0x1c8>)
 8003b68:	5c89      	ldrb	r1, [r1, r2]
 8003b6a:	4a3c      	ldr	r2, [pc, #240]	; (8003c5c <Traffic_Generator_Task+0x1c8>)
 8003b6c:	54d1      	strb	r1, [r2, r3]

				carArr[i] = temp;
 8003b6e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003b72:	493a      	ldr	r1, [pc, #232]	; (8003c5c <Traffic_Generator_Task+0x1c8>)
 8003b74:	7aba      	ldrb	r2, [r7, #10]
 8003b76:	54ca      	strb	r2, [r1, r3]
			for (int8_t i = 0; i <= sizeof(carArr); i++) {
 8003b78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	3301      	adds	r3, #1
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	73bb      	strb	r3, [r7, #14]
 8003b84:	7bbb      	ldrb	r3, [r7, #14]
 8003b86:	2b13      	cmp	r3, #19
 8003b88:	d9e2      	bls.n	8003b50 <Traffic_Generator_Task+0xbc>
 8003b8a:	e047      	b.n	8003c1c <Traffic_Generator_Task+0x188>


		}

		else {
			carArr[0] = 0;
 8003b8c:	4b33      	ldr	r3, [pc, #204]	; (8003c5c <Traffic_Generator_Task+0x1c8>)
 8003b8e:	2200      	movs	r2, #0
 8003b90:	701a      	strb	r2, [r3, #0]

			// For loop to move up cars in array
			for (int16_t y = 0; y < ROAD_LENGTH ; y++) {
 8003b92:	2300      	movs	r3, #0
 8003b94:	81bb      	strh	r3, [r7, #12]
 8003b96:	e03d      	b.n	8003c14 <Traffic_Generator_Task+0x180>


				if (y >= 12){
 8003b98:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003b9c:	2b0b      	cmp	r3, #11
 8003b9e:	dd1b      	ble.n	8003bd8 <Traffic_Generator_Task+0x144>

					if ((carArr[y] != 1) && (carArr[y + 1] == 1)) { //
 8003ba0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003ba4:	4a2d      	ldr	r2, [pc, #180]	; (8003c5c <Traffic_Generator_Task+0x1c8>)
 8003ba6:	5cd3      	ldrb	r3, [r2, r3]
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d015      	beq.n	8003bd8 <Traffic_Generator_Task+0x144>
 8003bac:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003bb0:	3301      	adds	r3, #1
 8003bb2:	4a2a      	ldr	r2, [pc, #168]	; (8003c5c <Traffic_Generator_Task+0x1c8>)
 8003bb4:	5cd3      	ldrb	r3, [r2, r3]
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d10e      	bne.n	8003bd8 <Traffic_Generator_Task+0x144>

						carArr[y] = carArr[y + 1]; // Move all cars in pre light queue up 1 space every cycle
 8003bba:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003bbe:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003bc2:	3201      	adds	r2, #1
 8003bc4:	4925      	ldr	r1, [pc, #148]	; (8003c5c <Traffic_Generator_Task+0x1c8>)
 8003bc6:	5c89      	ldrb	r1, [r1, r2]
 8003bc8:	4a24      	ldr	r2, [pc, #144]	; (8003c5c <Traffic_Generator_Task+0x1c8>)
 8003bca:	54d1      	strb	r1, [r2, r3]
						carArr[y + 1] = 0;   // Replace previous car with zero
 8003bcc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003bd0:	3301      	adds	r3, #1
 8003bd2:	4a22      	ldr	r2, [pc, #136]	; (8003c5c <Traffic_Generator_Task+0x1c8>)
 8003bd4:	2100      	movs	r1, #0
 8003bd6:	54d1      	strb	r1, [r2, r3]
						}

				 	}
					if (y <= 10){
 8003bd8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003bdc:	2b0a      	cmp	r3, #10
 8003bde:	dc13      	bgt.n	8003c08 <Traffic_Generator_Task+0x174>


						temp = carArr[y + 1];
 8003be0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003be4:	3301      	adds	r3, #1
 8003be6:	4a1d      	ldr	r2, [pc, #116]	; (8003c5c <Traffic_Generator_Task+0x1c8>)
 8003be8:	5cd3      	ldrb	r3, [r2, r3]
 8003bea:	72bb      	strb	r3, [r7, #10]

						carArr[y + 1] = carArr[y];
 8003bec:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003bf0:	3301      	adds	r3, #1
 8003bf2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003bf6:	4919      	ldr	r1, [pc, #100]	; (8003c5c <Traffic_Generator_Task+0x1c8>)
 8003bf8:	5c89      	ldrb	r1, [r1, r2]
 8003bfa:	4a18      	ldr	r2, [pc, #96]	; (8003c5c <Traffic_Generator_Task+0x1c8>)
 8003bfc:	54d1      	strb	r1, [r2, r3]

						carArr[y] = temp;
 8003bfe:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003c02:	4916      	ldr	r1, [pc, #88]	; (8003c5c <Traffic_Generator_Task+0x1c8>)
 8003c04:	7aba      	ldrb	r2, [r7, #10]
 8003c06:	54ca      	strb	r2, [r1, r3]
			for (int16_t y = 0; y < ROAD_LENGTH ; y++) {
 8003c08:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	3301      	adds	r3, #1
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	81bb      	strh	r3, [r7, #12]
 8003c14:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003c18:	2b12      	cmp	r3, #18
 8003c1a:	ddbd      	ble.n	8003b98 <Traffic_Generator_Task+0x104>

		}



		flowSpacing ++;
 8003c1c:	7bfb      	ldrb	r3, [r7, #15]
 8003c1e:	3301      	adds	r3, #1
 8003c20:	73fb      	strb	r3, [r7, #15]
		xQueueOverwrite(xTrafficQueue, &carArr); // override current carArr
 8003c22:	4b10      	ldr	r3, [pc, #64]	; (8003c64 <Traffic_Generator_Task+0x1d0>)
 8003c24:	6818      	ldr	r0, [r3, #0]
 8003c26:	2302      	movs	r3, #2
 8003c28:	2200      	movs	r2, #0
 8003c2a:	490c      	ldr	r1, [pc, #48]	; (8003c5c <Traffic_Generator_Task+0x1c8>)
 8003c2c:	f7fd fab8 	bl	80011a0 <xQueueGenericSend>
		vTaskDelay(pdMS_TO_TICKS(TRAFFIC_SPEED_CONST));
 8003c30:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003c34:	f7fd fff2 	bl	8001c1c <vTaskDelay>
		xQueuePeek(xFlowQueue, &flowData, pdMS_TO_TICKS(100));
 8003c38:	e735      	b.n	8003aa6 <Traffic_Generator_Task+0x12>
 8003c3a:	bf00      	nop
 8003c3c:	08005474 	.word	0x08005474
 8003c40:	20001ee8 	.word	0x20001ee8
 8003c44:	20001ee0 	.word	0x20001ee0
 8003c48:	08005498 	.word	0x08005498
 8003c4c:	080054ac 	.word	0x080054ac
 8003c50:	92492493 	.word	0x92492493
 8003c54:	080054c4 	.word	0x080054c4
 8003c58:	080054dc 	.word	0x080054dc
 8003c5c:	20001dec 	.word	0x20001dec
 8003c60:	cccccccd 	.word	0xcccccccd
 8003c64:	20001ee4 	.word	0x20001ee4

08003c68 <Traffic_Light_State_Task>:
 *
 *
 *
 */

void Traffic_Light_State_Task(void *pvParameters) {
 8003c68:	b590      	push	{r4, r7, lr}
 8003c6a:	b087      	sub	sp, #28
 8003c6c:	af02      	add	r7, sp, #8
 8003c6e:	6078      	str	r0, [r7, #4]

	printf("COMMENCING LIGHT STATE TASK\n");
 8003c70:	484d      	ldr	r0, [pc, #308]	; (8003da8 <Traffic_Light_State_Task+0x140>)
 8003c72:	f000 ff49 	bl	8004b08 <puts>
	uint8_t trafficFlowData;


	while (1) {

		eventBits = xEventGroupWaitBits(xLightStatusTrasition,
 8003c76:	4b4d      	ldr	r3, [pc, #308]	; (8003dac <Traffic_Light_State_Task+0x144>)
 8003c78:	6818      	ldr	r0, [r3, #0]
 8003c7a:	f241 7370 	movw	r3, #6000	; 0x1770
 8003c7e:	9300      	str	r3, [sp, #0]
 8003c80:	2300      	movs	r3, #0
 8003c82:	2201      	movs	r2, #1
 8003c84:	2107      	movs	r1, #7
 8003c86:	f7fc fd1b 	bl	80006c0 <xEventGroupWaitBits>
 8003c8a:	60f8      	str	r0, [r7, #12]
				GREEN | AMBER | RED, pdTRUE, pdFALSE, EVENT_RESPONSE_DURATION);

		xQueuePeek(xFlowQueue, &trafficFlowData, pdMS_TO_TICKS(1000));
 8003c8c:	4b48      	ldr	r3, [pc, #288]	; (8003db0 <Traffic_Light_State_Task+0x148>)
 8003c8e:	6818      	ldr	r0, [r3, #0]
 8003c90:	f107 010b 	add.w	r1, r7, #11
 8003c94:	2301      	movs	r3, #1
 8003c96:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003c9a:	f7fd fc0f 	bl	80014bc <xQueueGenericReceive>

		printf("Flow Rate = %u \n", trafficFlowData);
 8003c9e:	7afb      	ldrb	r3, [r7, #11]
 8003ca0:	4619      	mov	r1, r3
 8003ca2:	4844      	ldr	r0, [pc, #272]	; (8003db4 <Traffic_Light_State_Task+0x14c>)
 8003ca4:	f000 fdcc 	bl	8004840 <printf>

		// Event of  Green light
		if (eventBits & GREEN) {
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f003 0301 	and.w	r3, r3, #1
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d028      	beq.n	8003d04 <Traffic_Light_State_Task+0x9c>

			printf("LIGHT STATUS:  GREEN \n");
 8003cb2:	4841      	ldr	r0, [pc, #260]	; (8003db8 <Traffic_Light_State_Task+0x150>)
 8003cb4:	f000 ff28 	bl	8004b08 <puts>

			// Flow = 7 ==> 3000 + 429*7 ~ 6000ms
			// Flow = 0 ==> 3000 + 429*0 = 3000ms


			illumPeriod = pdMS_TO_TICKS(GREEN_TIME_SCALAR_MS + (TIME_SCALAR_FACTOR*trafficFlowData));
 8003cb8:	7afb      	ldrb	r3, [r7, #11]
 8003cba:	461a      	mov	r2, r3
 8003cbc:	4b3f      	ldr	r3, [pc, #252]	; (8003dbc <Traffic_Light_State_Task+0x154>)
 8003cbe:	fb03 f302 	mul.w	r3, r3, r2
 8003cc2:	f503 1337 	add.w	r3, r3, #2998272	; 0x2dc000
 8003cc6:	f503 63d8 	add.w	r3, r3, #1728	; 0x6c0
 8003cca:	461a      	mov	r2, r3
 8003ccc:	4b3c      	ldr	r3, [pc, #240]	; (8003dc0 <Traffic_Light_State_Task+0x158>)
 8003cce:	fba3 2302 	umull	r2, r3, r3, r2
 8003cd2:	099b      	lsrs	r3, r3, #6
 8003cd4:	4a3b      	ldr	r2, [pc, #236]	; (8003dc4 <Traffic_Light_State_Task+0x15c>)
 8003cd6:	6013      	str	r3, [r2, #0]

			xTimerChangePeriod(xGreenStatusTimer, illumPeriod, 0);
 8003cd8:	4b3b      	ldr	r3, [pc, #236]	; (8003dc8 <Traffic_Light_State_Task+0x160>)
 8003cda:	6818      	ldr	r0, [r3, #0]
 8003cdc:	4b39      	ldr	r3, [pc, #228]	; (8003dc4 <Traffic_Light_State_Task+0x15c>)
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	9300      	str	r3, [sp, #0]
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	2104      	movs	r1, #4
 8003ce8:	f7fe fee2 	bl	8002ab0 <xTimerGenericCommand>

			xTimerStart(xGreenStatusTimer, 0);
 8003cec:	4b36      	ldr	r3, [pc, #216]	; (8003dc8 <Traffic_Light_State_Task+0x160>)
 8003cee:	681c      	ldr	r4, [r3, #0]
 8003cf0:	f7fe f8be 	bl	8001e70 <xTaskGetTickCount>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	9300      	str	r3, [sp, #0]
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	2101      	movs	r1, #1
 8003cfe:	4620      	mov	r0, r4
 8003d00:	f7fe fed6 	bl	8002ab0 <xTimerGenericCommand>

		}

		// Event of a yellow light
		if (eventBits & AMBER) {
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f003 0302 	and.w	r3, r3, #2
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d01c      	beq.n	8003d48 <Traffic_Light_State_Task+0xe0>

			printf("LIGHT STATUS:  YELLOW \n");
 8003d0e:	482f      	ldr	r0, [pc, #188]	; (8003dcc <Traffic_Light_State_Task+0x164>)
 8003d10:	f000 fefa 	bl	8004b08 <puts>

			illumPeriod = pdMS_TO_TICKS(YELLOW_ILLUM_PERIOD_MS);
 8003d14:	4b2b      	ldr	r3, [pc, #172]	; (8003dc4 <Traffic_Light_State_Task+0x15c>)
 8003d16:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003d1a:	601a      	str	r2, [r3, #0]

			xTimerChangePeriod(xYellowStatusTimer, illumPeriod, 0);
 8003d1c:	4b2c      	ldr	r3, [pc, #176]	; (8003dd0 <Traffic_Light_State_Task+0x168>)
 8003d1e:	6818      	ldr	r0, [r3, #0]
 8003d20:	4b28      	ldr	r3, [pc, #160]	; (8003dc4 <Traffic_Light_State_Task+0x15c>)
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	2300      	movs	r3, #0
 8003d26:	9300      	str	r3, [sp, #0]
 8003d28:	2300      	movs	r3, #0
 8003d2a:	2104      	movs	r1, #4
 8003d2c:	f7fe fec0 	bl	8002ab0 <xTimerGenericCommand>

			xTimerStart(xYellowStatusTimer, 0);
 8003d30:	4b27      	ldr	r3, [pc, #156]	; (8003dd0 <Traffic_Light_State_Task+0x168>)
 8003d32:	681c      	ldr	r4, [r3, #0]
 8003d34:	f7fe f89c 	bl	8001e70 <xTaskGetTickCount>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	9300      	str	r3, [sp, #0]
 8003d3e:	2300      	movs	r3, #0
 8003d40:	2101      	movs	r1, #1
 8003d42:	4620      	mov	r0, r4
 8003d44:	f7fe feb4 	bl	8002ab0 <xTimerGenericCommand>

		}

		// Event of a Red light
		if (eventBits & RED) {
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f003 0304 	and.w	r3, r3, #4
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d091      	beq.n	8003c76 <Traffic_Light_State_Task+0xe>

			printf("LIGHT STATUS:  RED \n");
 8003d52:	4820      	ldr	r0, [pc, #128]	; (8003dd4 <Traffic_Light_State_Task+0x16c>)
 8003d54:	f000 fed8 	bl	8004b08 <puts>

			// Flow  = 7 ==> 6000 - 429*7 ~ 3000ms
			// Flow  = 0 ==> 6000 - 429*0 = 6000ms

			illumPeriod = pdMS_TO_TICKS(RED_TIME_SCALAR_MS  - (TIME_SCALAR_FACTOR*trafficFlowData));
 8003d58:	7afb      	ldrb	r3, [r7, #11]
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	4b1e      	ldr	r3, [pc, #120]	; (8003dd8 <Traffic_Light_State_Task+0x170>)
 8003d5e:	fb03 f302 	mul.w	r3, r3, r2
 8003d62:	f503 03b7 	add.w	r3, r3, #5996544	; 0x5b8000
 8003d66:	f503 6358 	add.w	r3, r3, #3456	; 0xd80
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	4b14      	ldr	r3, [pc, #80]	; (8003dc0 <Traffic_Light_State_Task+0x158>)
 8003d6e:	fba3 2302 	umull	r2, r3, r3, r2
 8003d72:	099b      	lsrs	r3, r3, #6
 8003d74:	4a13      	ldr	r2, [pc, #76]	; (8003dc4 <Traffic_Light_State_Task+0x15c>)
 8003d76:	6013      	str	r3, [r2, #0]

			xTimerChangePeriod(xRedStatusTimer, illumPeriod, 0);
 8003d78:	4b18      	ldr	r3, [pc, #96]	; (8003ddc <Traffic_Light_State_Task+0x174>)
 8003d7a:	6818      	ldr	r0, [r3, #0]
 8003d7c:	4b11      	ldr	r3, [pc, #68]	; (8003dc4 <Traffic_Light_State_Task+0x15c>)
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	2300      	movs	r3, #0
 8003d82:	9300      	str	r3, [sp, #0]
 8003d84:	2300      	movs	r3, #0
 8003d86:	2104      	movs	r1, #4
 8003d88:	f7fe fe92 	bl	8002ab0 <xTimerGenericCommand>

			xTimerStart(xRedStatusTimer, 0);
 8003d8c:	4b13      	ldr	r3, [pc, #76]	; (8003ddc <Traffic_Light_State_Task+0x174>)
 8003d8e:	681c      	ldr	r4, [r3, #0]
 8003d90:	f7fe f86e 	bl	8001e70 <xTaskGetTickCount>
 8003d94:	4602      	mov	r2, r0
 8003d96:	2300      	movs	r3, #0
 8003d98:	9300      	str	r3, [sp, #0]
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	2101      	movs	r1, #1
 8003d9e:	4620      	mov	r0, r4
 8003da0:	f7fe fe86 	bl	8002ab0 <xTimerGenericCommand>
		eventBits = xEventGroupWaitBits(xLightStatusTrasition,
 8003da4:	e767      	b.n	8003c76 <Traffic_Light_State_Task+0xe>
 8003da6:	bf00      	nop
 8003da8:	080054f4 	.word	0x080054f4
 8003dac:	20001ed8 	.word	0x20001ed8
 8003db0:	20001ee8 	.word	0x20001ee8
 8003db4:	08005510 	.word	0x08005510
 8003db8:	08005524 	.word	0x08005524
 8003dbc:	00068bc8 	.word	0x00068bc8
 8003dc0:	10624dd3 	.word	0x10624dd3
 8003dc4:	20001edc 	.word	0x20001edc
 8003dc8:	20001ed0 	.word	0x20001ed0
 8003dcc:	0800553c 	.word	0x0800553c
 8003dd0:	20001ec8 	.word	0x20001ec8
 8003dd4:	08005554 	.word	0x08005554
 8003dd8:	fff97438 	.word	0xfff97438
 8003ddc:	20001ed4 	.word	0x20001ed4

08003de0 <Sys_Display_Task>:
 *  task also refreshes the car LEDs at a certain interval to emulate
 *  the flow of the traffic.
 *
 */

void Sys_Display_Task(void *pvParameters) {
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b088      	sub	sp, #32
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]

	printf("COMMENCING SYSTEM DISPALY TASK \n");
 8003de8:	4824      	ldr	r0, [pc, #144]	; (8003e7c <Sys_Display_Task+0x9c>)
 8003dea:	f000 fe8d 	bl	8004b08 <puts>
//	// Reset GPIO bits
	GPIO_ResetBits(GPIO_PORT, SHIFT_REG_RESET);
 8003dee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003df2:	4823      	ldr	r0, [pc, #140]	; (8003e80 <Sys_Display_Task+0xa0>)
 8003df4:	f7ff fc19 	bl	800362a <GPIO_ResetBits>
	GPIO_SetBits(GPIO_PORT, SHIFT_REG_RESET);
 8003df8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003dfc:	4820      	ldr	r0, [pc, #128]	; (8003e80 <Sys_Display_Task+0xa0>)
 8003dfe:	f7ff fc05 	bl	800360c <GPIO_SetBits>



	uint8_t traffic[ROAD_LENGTH] = {0};
 8003e02:	f107 030c 	add.w	r3, r7, #12
 8003e06:	2200      	movs	r2, #0
 8003e08:	601a      	str	r2, [r3, #0]
 8003e0a:	605a      	str	r2, [r3, #4]
 8003e0c:	609a      	str	r2, [r3, #8]
 8003e0e:	60da      	str	r2, [r3, #12]
 8003e10:	f8c3 200f 	str.w	r2, [r3, #15]


	while(1){

		xQueuePeek(xTrafficQueue, &traffic, pdMS_TO_TICKS(100));
 8003e14:	4b1b      	ldr	r3, [pc, #108]	; (8003e84 <Sys_Display_Task+0xa4>)
 8003e16:	6818      	ldr	r0, [r3, #0]
 8003e18:	f107 010c 	add.w	r1, r7, #12
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	2264      	movs	r2, #100	; 0x64
 8003e20:	f7fd fb4c 	bl	80014bc <xQueueGenericReceive>


		for (int8_t i = 0; i <= ROAD_LENGTH; i++)
 8003e24:	2300      	movs	r3, #0
 8003e26:	77fb      	strb	r3, [r7, #31]
 8003e28:	e01f      	b.n	8003e6a <Sys_Display_Task+0x8a>
		{
			if (traffic[i] == 1) {
 8003e2a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003e2e:	f107 0220 	add.w	r2, r7, #32
 8003e32:	4413      	add	r3, r2
 8003e34:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d104      	bne.n	8003e46 <Sys_Display_Task+0x66>

				GPIO_SetBits(GPIO_PORT, SHIFT_REG_DATA);
 8003e3c:	2140      	movs	r1, #64	; 0x40
 8003e3e:	4810      	ldr	r0, [pc, #64]	; (8003e80 <Sys_Display_Task+0xa0>)
 8003e40:	f7ff fbe4 	bl	800360c <GPIO_SetBits>
 8003e44:	e003      	b.n	8003e4e <Sys_Display_Task+0x6e>

			} else {
				GPIO_ResetBits(GPIO_PORT, SHIFT_REG_DATA);
 8003e46:	2140      	movs	r1, #64	; 0x40
 8003e48:	480d      	ldr	r0, [pc, #52]	; (8003e80 <Sys_Display_Task+0xa0>)
 8003e4a:	f7ff fbee 	bl	800362a <GPIO_ResetBits>
			}

			GPIO_SetBits(GPIO_PORT, SHIFT_REG_CLK);
 8003e4e:	2180      	movs	r1, #128	; 0x80
 8003e50:	480b      	ldr	r0, [pc, #44]	; (8003e80 <Sys_Display_Task+0xa0>)
 8003e52:	f7ff fbdb 	bl	800360c <GPIO_SetBits>
			GPIO_ResetBits(GPIO_PORT, SHIFT_REG_CLK);
 8003e56:	2180      	movs	r1, #128	; 0x80
 8003e58:	4809      	ldr	r0, [pc, #36]	; (8003e80 <Sys_Display_Task+0xa0>)
 8003e5a:	f7ff fbe6 	bl	800362a <GPIO_ResetBits>
		for (int8_t i = 0; i <= ROAD_LENGTH; i++)
 8003e5e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	3301      	adds	r3, #1
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	77fb      	strb	r3, [r7, #31]
 8003e6a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003e6e:	2b13      	cmp	r3, #19
 8003e70:	dddb      	ble.n	8003e2a <Sys_Display_Task+0x4a>

		}

		vTaskDelay(pdMS_TO_TICKS(TRAFFIC_SPEED_CONST));
 8003e72:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003e76:	f7fd fed1 	bl	8001c1c <vTaskDelay>
		xQueuePeek(xTrafficQueue, &traffic, pdMS_TO_TICKS(100));
 8003e7a:	e7cb      	b.n	8003e14 <Sys_Display_Task+0x34>
 8003e7c:	08005568 	.word	0x08005568
 8003e80:	40020800 	.word	0x40020800
 8003e84:	20001ee4 	.word	0x20001ee4

08003e88 <SW_Timer_Init>:
void GPIO_ADC_Init(void);
void ADCTestTask(void);
void SW_Timer_Init(void);


void SW_Timer_Init(void) {
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af02      	add	r7, sp, #8

	xGreenStatusTimer = xTimerCreate("GreenStatusTimer",1000 / portTICK_PERIOD_MS, pdFALSE, (void *) 0,GREEN_Status_Timer_Callback);
 8003e8e:	4b13      	ldr	r3, [pc, #76]	; (8003edc <SW_Timer_Init+0x54>)
 8003e90:	9300      	str	r3, [sp, #0]
 8003e92:	2300      	movs	r3, #0
 8003e94:	2200      	movs	r2, #0
 8003e96:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003e9a:	4811      	ldr	r0, [pc, #68]	; (8003ee0 <SW_Timer_Init+0x58>)
 8003e9c:	f7fe fdba 	bl	8002a14 <xTimerCreate>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	4b10      	ldr	r3, [pc, #64]	; (8003ee4 <SW_Timer_Init+0x5c>)
 8003ea4:	601a      	str	r2, [r3, #0]
	xYellowStatusTimer = xTimerCreate("YELLOWStatusTimer", 1000 / portTICK_PERIOD_MS, pdFALSE, (void *) 0,YELLOW_Status_Timer_Callback);
 8003ea6:	4b10      	ldr	r3, [pc, #64]	; (8003ee8 <SW_Timer_Init+0x60>)
 8003ea8:	9300      	str	r3, [sp, #0]
 8003eaa:	2300      	movs	r3, #0
 8003eac:	2200      	movs	r2, #0
 8003eae:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003eb2:	480e      	ldr	r0, [pc, #56]	; (8003eec <SW_Timer_Init+0x64>)
 8003eb4:	f7fe fdae 	bl	8002a14 <xTimerCreate>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	4b0d      	ldr	r3, [pc, #52]	; (8003ef0 <SW_Timer_Init+0x68>)
 8003ebc:	601a      	str	r2, [r3, #0]
	xRedStatusTimer = xTimerCreate("REDStatusTimer", 1000 / portTICK_PERIOD_MS,pdFALSE, (void *) 0, RED_Status_Timer_Callback);
 8003ebe:	4b0d      	ldr	r3, [pc, #52]	; (8003ef4 <SW_Timer_Init+0x6c>)
 8003ec0:	9300      	str	r3, [sp, #0]
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003eca:	480b      	ldr	r0, [pc, #44]	; (8003ef8 <SW_Timer_Init+0x70>)
 8003ecc:	f7fe fda2 	bl	8002a14 <xTimerCreate>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	4b0a      	ldr	r3, [pc, #40]	; (8003efc <SW_Timer_Init+0x74>)
 8003ed4:	601a      	str	r2, [r3, #0]

}
 8003ed6:	bf00      	nop
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	0800387d 	.word	0x0800387d
 8003ee0:	08005588 	.word	0x08005588
 8003ee4:	20001ed0 	.word	0x20001ed0
 8003ee8:	080038d5 	.word	0x080038d5
 8003eec:	0800559c 	.word	0x0800559c
 8003ef0:	20001ec8 	.word	0x20001ec8
 8003ef4:	0800392d 	.word	0x0800392d
 8003ef8:	080055b0 	.word	0x080055b0
 8003efc:	20001ed4 	.word	0x20001ed4

08003f00 <Task_Init>:


void Task_Init(void) {
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b088      	sub	sp, #32
 8003f04:	af02      	add	r7, sp, #8

	uint8_t initLightStatus = GREEN;
 8003f06:	2301      	movs	r3, #1
 8003f08:	75fb      	strb	r3, [r7, #23]

	// Initalize LED Sequence
	GPIO_ResetBits(GPIO_PORT, RED_LIGHT_PIN);       // turn off RED light
 8003f0a:	2101      	movs	r1, #1
 8003f0c:	4844      	ldr	r0, [pc, #272]	; (8004020 <Task_Init+0x120>)
 8003f0e:	f7ff fb8c 	bl	800362a <GPIO_ResetBits>
	GPIO_SetBits(GPIO_PORT, GREEN_LIGHT_PIN);            // turn on GREEN light
 8003f12:	2104      	movs	r1, #4
 8003f14:	4842      	ldr	r0, [pc, #264]	; (8004020 <Task_Init+0x120>)
 8003f16:	f7ff fb79 	bl	800360c <GPIO_SetBits>

	uint8_t initFlowRate = 0;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	75bb      	strb	r3, [r7, #22]

	uint8_t initTrafficQueue[ROAD_LENGTH] = {0};
 8003f1e:	463b      	mov	r3, r7
 8003f20:	2200      	movs	r2, #0
 8003f22:	601a      	str	r2, [r3, #0]
 8003f24:	605a      	str	r2, [r3, #4]
 8003f26:	609a      	str	r2, [r3, #8]
 8003f28:	60da      	str	r2, [r3, #12]
 8003f2a:	f8c3 200f 	str.w	r2, [r3, #15]

	// Create queue for light status

	xLightStatusQueue = xQueueCreate(StdQueueLength, StdQueueSize);
 8003f2e:	2200      	movs	r2, #0
 8003f30:	2101      	movs	r1, #1
 8003f32:	2001      	movs	r0, #1
 8003f34:	f7fd f8dc 	bl	80010f0 <xQueueGenericCreate>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	4b3a      	ldr	r3, [pc, #232]	; (8004024 <Task_Init+0x124>)
 8003f3c:	601a      	str	r2, [r3, #0]
	xQueueSend(xLightStatusQueue, &initLightStatus, 0);
 8003f3e:	4b39      	ldr	r3, [pc, #228]	; (8004024 <Task_Init+0x124>)
 8003f40:	6818      	ldr	r0, [r3, #0]
 8003f42:	f107 0117 	add.w	r1, r7, #23
 8003f46:	2300      	movs	r3, #0
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f7fd f929 	bl	80011a0 <xQueueGenericSend>
	vQueueAddToRegistry(xLightStatusQueue, "LightStatus_Q");
 8003f4e:	4b35      	ldr	r3, [pc, #212]	; (8004024 <Task_Init+0x124>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4935      	ldr	r1, [pc, #212]	; (8004028 <Task_Init+0x128>)
 8003f54:	4618      	mov	r0, r3
 8003f56:	f7fd fcd3 	bl	8001900 <vQueueAddToRegistry>

	// Create queue for Flow Rate
	xFlowQueue = xQueueCreate(StdQueueLength, StdQueueSize);
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	2101      	movs	r1, #1
 8003f5e:	2001      	movs	r0, #1
 8003f60:	f7fd f8c6 	bl	80010f0 <xQueueGenericCreate>
 8003f64:	4602      	mov	r2, r0
 8003f66:	4b31      	ldr	r3, [pc, #196]	; (800402c <Task_Init+0x12c>)
 8003f68:	601a      	str	r2, [r3, #0]
	xQueueSend(xFlowQueue, &initFlowRate, 0);
 8003f6a:	4b30      	ldr	r3, [pc, #192]	; (800402c <Task_Init+0x12c>)
 8003f6c:	6818      	ldr	r0, [r3, #0]
 8003f6e:	f107 0116 	add.w	r1, r7, #22
 8003f72:	2300      	movs	r3, #0
 8003f74:	2200      	movs	r2, #0
 8003f76:	f7fd f913 	bl	80011a0 <xQueueGenericSend>
	vQueueAddToRegistry(xFlowQueue, "FlowRate_Q");
 8003f7a:	4b2c      	ldr	r3, [pc, #176]	; (800402c <Task_Init+0x12c>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	492c      	ldr	r1, [pc, #176]	; (8004030 <Task_Init+0x130>)
 8003f80:	4618      	mov	r0, r3
 8003f82:	f7fd fcbd 	bl	8001900 <vQueueAddToRegistry>


	// Create queue for Traffic Queue
	xTrafficQueue = xQueueCreate(1,sizeof(initTrafficQueue));
 8003f86:	2200      	movs	r2, #0
 8003f88:	2113      	movs	r1, #19
 8003f8a:	2001      	movs	r0, #1
 8003f8c:	f7fd f8b0 	bl	80010f0 <xQueueGenericCreate>
 8003f90:	4602      	mov	r2, r0
 8003f92:	4b28      	ldr	r3, [pc, #160]	; (8004034 <Task_Init+0x134>)
 8003f94:	601a      	str	r2, [r3, #0]
	xQueueSend(xTrafficQueue, &initTrafficQueue,0);
 8003f96:	4b27      	ldr	r3, [pc, #156]	; (8004034 <Task_Init+0x134>)
 8003f98:	6818      	ldr	r0, [r3, #0]
 8003f9a:	4639      	mov	r1, r7
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f7fd f8fe 	bl	80011a0 <xQueueGenericSend>
	vQueueAddToRegistry(xTrafficQueue, "Traffic_Q");
 8003fa4:	4b23      	ldr	r3, [pc, #140]	; (8004034 <Task_Init+0x134>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4923      	ldr	r1, [pc, #140]	; (8004038 <Task_Init+0x138>)
 8003faa:	4618      	mov	r0, r3
 8003fac:	f7fd fca8 	bl	8001900 <vQueueAddToRegistry>




	xLightStatusTrasition = xEventGroupCreate();
 8003fb0:	f7fc fb6e 	bl	8000690 <xEventGroupCreate>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	4b21      	ldr	r3, [pc, #132]	; (800403c <Task_Init+0x13c>)
 8003fb8:	601a      	str	r2, [r3, #0]

	xEventGroupSetBits(xLightStatusTrasition, initLightStatus);
 8003fba:	4b20      	ldr	r3, [pc, #128]	; (800403c <Task_Init+0x13c>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	7dfa      	ldrb	r2, [r7, #23]
 8003fc0:	4611      	mov	r1, r2
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f7fc fc44 	bl	8000850 <xEventGroupSetBits>


	xTaskCreate(Traffic_Flow_Task, "TrafficFlow", configMINIMAL_STACK_SIZE,
 8003fc8:	2300      	movs	r3, #0
 8003fca:	9301      	str	r3, [sp, #4]
 8003fcc:	2303      	movs	r3, #3
 8003fce:	9300      	str	r3, [sp, #0]
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	2282      	movs	r2, #130	; 0x82
 8003fd4:	491a      	ldr	r1, [pc, #104]	; (8004040 <Task_Init+0x140>)
 8003fd6:	481b      	ldr	r0, [pc, #108]	; (8004044 <Task_Init+0x144>)
 8003fd8:	f7fd fcee 	bl	80019b8 <xTaskCreate>
			NULL, PRIORITY_LEVEL1, NULL);
	xTaskCreate(Traffic_Generator_Task, "TrafficGen", configMINIMAL_STACK_SIZE,
 8003fdc:	2300      	movs	r3, #0
 8003fde:	9301      	str	r3, [sp, #4]
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	9300      	str	r3, [sp, #0]
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	2282      	movs	r2, #130	; 0x82
 8003fe8:	4917      	ldr	r1, [pc, #92]	; (8004048 <Task_Init+0x148>)
 8003fea:	4818      	ldr	r0, [pc, #96]	; (800404c <Task_Init+0x14c>)
 8003fec:	f7fd fce4 	bl	80019b8 <xTaskCreate>
			NULL, PRIORITY_LEVEL3, NULL);
	xTaskCreate(Sys_Display_Task, "TrafficDispaly", configMINIMAL_STACK_SIZE,
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	9301      	str	r3, [sp, #4]
 8003ff4:	2302      	movs	r3, #2
 8003ff6:	9300      	str	r3, [sp, #0]
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	2282      	movs	r2, #130	; 0x82
 8003ffc:	4914      	ldr	r1, [pc, #80]	; (8004050 <Task_Init+0x150>)
 8003ffe:	4815      	ldr	r0, [pc, #84]	; (8004054 <Task_Init+0x154>)
 8004000:	f7fd fcda 	bl	80019b8 <xTaskCreate>
			NULL, PRIORITY_LEVEL2, NULL);
	xTaskCreate(Traffic_Light_State_Task, "LightSate", configMINIMAL_STACK_SIZE,
 8004004:	2300      	movs	r3, #0
 8004006:	9301      	str	r3, [sp, #4]
 8004008:	2300      	movs	r3, #0
 800400a:	9300      	str	r3, [sp, #0]
 800400c:	2300      	movs	r3, #0
 800400e:	2282      	movs	r2, #130	; 0x82
 8004010:	4911      	ldr	r1, [pc, #68]	; (8004058 <Task_Init+0x158>)
 8004012:	4812      	ldr	r0, [pc, #72]	; (800405c <Task_Init+0x15c>)
 8004014:	f7fd fcd0 	bl	80019b8 <xTaskCreate>
			NULL, PRIORITY_LEVEL4, NULL);

}
 8004018:	bf00      	nop
 800401a:	3718      	adds	r7, #24
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}
 8004020:	40020800 	.word	0x40020800
 8004024:	20001ee0 	.word	0x20001ee0
 8004028:	080055c0 	.word	0x080055c0
 800402c:	20001ee8 	.word	0x20001ee8
 8004030:	080055d0 	.word	0x080055d0
 8004034:	20001ee4 	.word	0x20001ee4
 8004038:	080055dc 	.word	0x080055dc
 800403c:	20001ed8 	.word	0x20001ed8
 8004040:	080055e8 	.word	0x080055e8
 8004044:	080039ad 	.word	0x080039ad
 8004048:	080055f4 	.word	0x080055f4
 800404c:	08003a95 	.word	0x08003a95
 8004050:	08005600 	.word	0x08005600
 8004054:	08003de1 	.word	0x08003de1
 8004058:	08005610 	.word	0x08005610
 800405c:	08003c69 	.word	0x08003c69

08004060 <GPIO_Hardware_Init>:




void GPIO_Hardware_Init(void)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8004066:	2101      	movs	r1, #1
 8004068:	2004      	movs	r0, #4
 800406a:	f7ff faed 	bl	8003648 <RCC_AHB1PeriphClockCmd>
	GPIO_InitTypeDef 	  GPIO_InitStructLED;
	GPIO_InitTypeDef 	  GPIO_InitStructShift;



	GPIO_InitStructLED.GPIO_Pin = AMBER_LIGHT_PIN | GREEN_LIGHT_PIN | RED_LIGHT_PIN;
 800406e:	2307      	movs	r3, #7
 8004070:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructLED.GPIO_Mode 	= GPIO_Mode_OUT;
 8004072:	2301      	movs	r3, #1
 8004074:	733b      	strb	r3, [r7, #12]
	GPIO_InitStructLED.GPIO_OType 	= GPIO_OType_PP;
 8004076:	2300      	movs	r3, #0
 8004078:	73bb      	strb	r3, [r7, #14]
	GPIO_InitStructLED.GPIO_PuPd 	= GPIO_PuPd_NOPULL;
 800407a:	2300      	movs	r3, #0
 800407c:	73fb      	strb	r3, [r7, #15]
	GPIO_InitStructLED.GPIO_Speed    = GPIO_Speed_25MHz;
 800407e:	2301      	movs	r3, #1
 8004080:	737b      	strb	r3, [r7, #13]
	GPIO_Init(GPIOC, &GPIO_InitStructLED);
 8004082:	f107 0308 	add.w	r3, r7, #8
 8004086:	4619      	mov	r1, r3
 8004088:	480a      	ldr	r0, [pc, #40]	; (80040b4 <GPIO_Hardware_Init+0x54>)
 800408a:	f7ff fa31 	bl	80034f0 <GPIO_Init>

	GPIO_InitStructShift.GPIO_Pin 	= SHIFT_REG_RESET | SHIFT_REG_CLK | SHIFT_REG_DATA;
 800408e:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8004092:	603b      	str	r3, [r7, #0]
	GPIO_InitStructShift.GPIO_Mode 	= GPIO_Mode_OUT;
 8004094:	2301      	movs	r3, #1
 8004096:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructShift.GPIO_OType = GPIO_OType_PP;
 8004098:	2300      	movs	r3, #0
 800409a:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructShift.GPIO_PuPd 	= GPIO_PuPd_NOPULL;
 800409c:	2300      	movs	r3, #0
 800409e:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(GPIOC, &GPIO_InitStructShift);
 80040a0:	463b      	mov	r3, r7
 80040a2:	4619      	mov	r1, r3
 80040a4:	4803      	ldr	r0, [pc, #12]	; (80040b4 <GPIO_Hardware_Init+0x54>)
 80040a6:	f7ff fa23 	bl	80034f0 <GPIO_Init>


}
 80040aa:	bf00      	nop
 80040ac:	3710      	adds	r7, #16
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	40020800 	.word	0x40020800

080040b8 <Display_Reset_Bits_Init>:



void Display_Reset_Bits_Init(void){
 80040b8:	b580      	push	{r7, lr}
 80040ba:	af00      	add	r7, sp, #0



	// Reset All Bits on Display upon startup
	GPIO_ResetBits(GPIO_PORT, GREEN_LIGHT_PIN);
 80040bc:	2104      	movs	r1, #4
 80040be:	480b      	ldr	r0, [pc, #44]	; (80040ec <Display_Reset_Bits_Init+0x34>)
 80040c0:	f7ff fab3 	bl	800362a <GPIO_ResetBits>
	GPIO_ResetBits(GPIO_PORT, AMBER_LIGHT_PIN);
 80040c4:	2102      	movs	r1, #2
 80040c6:	4809      	ldr	r0, [pc, #36]	; (80040ec <Display_Reset_Bits_Init+0x34>)
 80040c8:	f7ff faaf 	bl	800362a <GPIO_ResetBits>
	GPIO_ResetBits(GPIO_PORT, RED_LIGHT_PIN);
 80040cc:	2101      	movs	r1, #1
 80040ce:	4807      	ldr	r0, [pc, #28]	; (80040ec <Display_Reset_Bits_Init+0x34>)
 80040d0:	f7ff faab 	bl	800362a <GPIO_ResetBits>


	// Reset SHIFT Reg bits up[on startup
	GPIO_ResetBits(GPIO_PORT, SHIFT_REG_RESET);
 80040d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80040d8:	4804      	ldr	r0, [pc, #16]	; (80040ec <Display_Reset_Bits_Init+0x34>)
 80040da:	f7ff faa6 	bl	800362a <GPIO_ResetBits>
	GPIO_SetBits(GPIO_PORT, SHIFT_REG_RESET);
 80040de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80040e2:	4802      	ldr	r0, [pc, #8]	; (80040ec <Display_Reset_Bits_Init+0x34>)
 80040e4:	f7ff fa92 	bl	800360c <GPIO_SetBits>

}
 80040e8:	bf00      	nop
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	40020800 	.word	0x40020800

080040f0 <GPIO_ADC_Init>:



void GPIO_ADC_Init(void)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b088      	sub	sp, #32
 80040f4:	af00      	add	r7, sp, #0

	// Enable ADC Interface and PORT C
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1,  ENABLE);
 80040f6:	2101      	movs	r1, #1
 80040f8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80040fc:	f7ff fac4 	bl	8003688 <RCC_APB2PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8004100:	2101      	movs	r1, #1
 8004102:	2004      	movs	r0, #4
 8004104:	f7ff faa0 	bl	8003648 <RCC_AHB1PeriphClockCmd>

	ADC_InitTypeDef 	  ADC_InitStruct;
	GPIO_InitTypeDef      GPIO_InitStructADC;


	GPIO_InitStructADC.GPIO_Pin 	= ADC_INPUT_PIN;
 8004108:	2308      	movs	r3, #8
 800410a:	603b      	str	r3, [r7, #0]
	GPIO_InitStructADC.GPIO_PuPd 	= GPIO_PuPd_NOPULL;
 800410c:	2300      	movs	r3, #0
 800410e:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructADC.GPIO_Mode 	= GPIO_Mode_AN;
 8004110:	2303      	movs	r3, #3
 8004112:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructADC.GPIO_OType 	= GPIO_OType_PP;
 8004114:	2300      	movs	r3, #0
 8004116:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructADC.GPIO_Speed 	= GPIO_Speed_25MHz;
 8004118:	2301      	movs	r3, #1
 800411a:	717b      	strb	r3, [r7, #5]
	GPIO_Init(GPIOC, &GPIO_InitStructADC);
 800411c:	463b      	mov	r3, r7
 800411e:	4619      	mov	r1, r3
 8004120:	4812      	ldr	r0, [pc, #72]	; (800416c <GPIO_ADC_Init+0x7c>)
 8004122:	f7ff f9e5 	bl	80034f0 <GPIO_Init>


	ADC_InitStruct.ADC_NbrOfConversion 			= 1;
 8004126:	2301      	movs	r3, #1
 8004128:	773b      	strb	r3, [r7, #28]
	ADC_InitStruct.ADC_ContinuousConvMode 		= DISABLE;
 800412a:	2300      	movs	r3, #0
 800412c:	737b      	strb	r3, [r7, #13]
	ADC_InitStruct.ADC_ScanConvMode 			= DISABLE;
 800412e:	2300      	movs	r3, #0
 8004130:	733b      	strb	r3, [r7, #12]
	ADC_InitStruct.ADC_ExternalTrigConv 		= DISABLE;
 8004132:	2300      	movs	r3, #0
 8004134:	617b      	str	r3, [r7, #20]
	ADC_InitStruct.ADC_ExternalTrigConvEdge 	= ADC_ExternalTrigConvEdge_None;
 8004136:	2300      	movs	r3, #0
 8004138:	613b      	str	r3, [r7, #16]
	ADC_InitStruct.ADC_Resolution 				= ADC_Resolution_12b;
 800413a:	2300      	movs	r3, #0
 800413c:	60bb      	str	r3, [r7, #8]
	ADC_InitStruct.ADC_DataAlign 				= ADC_DataAlign_Right;
 800413e:	2300      	movs	r3, #0
 8004140:	61bb      	str	r3, [r7, #24]
	ADC_Init(ADC1, &ADC_InitStruct);
 8004142:	f107 0308 	add.w	r3, r7, #8
 8004146:	4619      	mov	r1, r3
 8004148:	4809      	ldr	r0, [pc, #36]	; (8004170 <GPIO_ADC_Init+0x80>)
 800414a:	f7fe ff4b 	bl	8002fe4 <ADC_Init>

	ADC_Cmd(ADC1, ENABLE);
 800414e:	2101      	movs	r1, #1
 8004150:	4807      	ldr	r0, [pc, #28]	; (8004170 <GPIO_ADC_Init+0x80>)
 8004152:	f7fe ff9d 	bl	8003090 <ADC_Cmd>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_13, 1, ADC_SampleTime_84Cycles);
 8004156:	2304      	movs	r3, #4
 8004158:	2201      	movs	r2, #1
 800415a:	210d      	movs	r1, #13
 800415c:	4804      	ldr	r0, [pc, #16]	; (8004170 <GPIO_ADC_Init+0x80>)
 800415e:	f7fe ffb3 	bl	80030c8 <ADC_RegularChannelConfig>



}
 8004162:	bf00      	nop
 8004164:	3720      	adds	r7, #32
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	40020800 	.word	0x40020800
 8004170:	40012000 	.word	0x40012000

08004174 <main>:



int main(void)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	af00      	add	r7, sp, #0

	printf("Beginning Program!! \n");
 8004178:	480b      	ldr	r0, [pc, #44]	; (80041a8 <main+0x34>)
 800417a:	f000 fcc5 	bl	8004b08 <puts>

	GPIO_Hardware_Init();
 800417e:	f7ff ff6f 	bl	8004060 <GPIO_Hardware_Init>

	Display_Reset_Bits_Init();
 8004182:	f7ff ff99 	bl	80040b8 <Display_Reset_Bits_Init>

	GPIO_ADC_Init();
 8004186:	f7ff ffb3 	bl	80040f0 <GPIO_ADC_Init>

	Task_Init();
 800418a:	f7ff feb9 	bl	8003f00 <Task_Init>

	SW_Timer_Init();
 800418e:	f7ff fe7b 	bl	8003e88 <SW_Timer_Init>


	printf("Starting Scheduler...\n");
 8004192:	4806      	ldr	r0, [pc, #24]	; (80041ac <main+0x38>)
 8004194:	f000 fcb8 	bl	8004b08 <puts>

	vTaskStartScheduler();
 8004198:	f7fd fd74 	bl	8001c84 <vTaskStartScheduler>


	printf("Program Completed\n");
 800419c:	4804      	ldr	r0, [pc, #16]	; (80041b0 <main+0x3c>)
 800419e:	f000 fcb3 	bl	8004b08 <puts>




	return 0;
 80041a2:	2300      	movs	r3, #0
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	0800561c 	.word	0x0800561c
 80041ac:	08005634 	.word	0x08005634
 80041b0:	0800564c 	.word	0x0800564c

080041b4 <vApplicationMallocFailedHook>:


/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook( void )
{
 80041b4:	b480      	push	{r7}
 80041b6:	af00      	add	r7, sp, #0
	Called if a call to pvPortMalloc() fails because there is insufficient
	free memory available in the FreeRTOS heap.  pvPortMalloc() is called
	internally by FreeRTOS API functions that create tasks, queues, software 
	timers, and semaphores.  The size of the FreeRTOS heap is set by the
	configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */
	for( ;; );
 80041b8:	e7fe      	b.n	80041b8 <vApplicationMallocFailedHook+0x4>

080041ba <vApplicationStackOverflowHook>:
}
/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook( xTaskHandle pxTask, signed char *pcTaskName )
{
 80041ba:	b480      	push	{r7}
 80041bc:	b083      	sub	sp, #12
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
 80041c2:	6039      	str	r1, [r7, #0]
	/* Run time stack overflow checking is performed if
	configconfigCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected.  pxCurrentTCB can be
	inspected in the debugger if the task name passed into this function is
	corrupt. */
	for( ;; );
 80041c4:	e7fe      	b.n	80041c4 <vApplicationStackOverflowHook+0xa>

080041c6 <vApplicationIdleHook>:
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook( void )
{
 80041c6:	b580      	push	{r7, lr}
 80041c8:	b082      	sub	sp, #8
 80041ca:	af00      	add	r7, sp, #0
	FreeRTOSConfig.h.

	This function is called on each cycle of the idle task.  In this case it
	does nothing useful, other than report the amount of FreeRTOS heap that
	remains unallocated. */
	xFreeStackSpace = xPortGetFreeHeapSize();
 80041cc:	f7fc ff1a 	bl	8001004 <xPortGetFreeHeapSize>
 80041d0:	4603      	mov	r3, r0
 80041d2:	607b      	str	r3, [r7, #4]

	if( xFreeStackSpace > 100 )
 80041d4:	687b      	ldr	r3, [r7, #4]
		/* By now, the kernel has allocated everything it is going to, so
		if there is a lot of heap remaining unallocated then
		the value of configTOTAL_HEAP_SIZE in FreeRTOSConfig.h can be
		reduced accordingly. */
	}
}
 80041d6:	bf00      	nop
 80041d8:	3708      	adds	r7, #8
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
	...

080041e0 <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80041e0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80041e2:	e003      	b.n	80041ec <LoopCopyDataInit>

080041e4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80041e4:	4b0b      	ldr	r3, [pc, #44]	; (8004214 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 80041e6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80041e8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80041ea:	3104      	adds	r1, #4

080041ec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80041ec:	480a      	ldr	r0, [pc, #40]	; (8004218 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 80041ee:	4b0b      	ldr	r3, [pc, #44]	; (800421c <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 80041f0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80041f2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80041f4:	d3f6      	bcc.n	80041e4 <CopyDataInit>
  ldr  r2, =_sbss
 80041f6:	4a0a      	ldr	r2, [pc, #40]	; (8004220 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 80041f8:	e002      	b.n	8004200 <LoopFillZerobss>

080041fa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80041fa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80041fc:	f842 3b04 	str.w	r3, [r2], #4

08004200 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004200:	4b08      	ldr	r3, [pc, #32]	; (8004224 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8004202:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004204:	d3f9      	bcc.n	80041fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004206:	f000 f8f3 	bl	80043f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800420a:	f000 fbe9 	bl	80049e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800420e:	f7ff ffb1 	bl	8004174 <main>
  bx  lr    
 8004212:	4770      	bx	lr
  ldr  r3, =_sidata
 8004214:	080056e4 	.word	0x080056e4
  ldr  r0, =_sdata
 8004218:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800421c:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 8004220:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 8004224:	20001ef0 	.word	0x20001ef0

08004228 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004228:	e7fe      	b.n	8004228 <ADC_IRQHandler>

0800422a <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800422a:	b480      	push	{r7}
 800422c:	af00      	add	r7, sp, #0
}
 800422e:	bf00      	nop
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr

08004238 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8004238:	b480      	push	{r7}
 800423a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800423c:	e7fe      	b.n	800423c <HardFault_Handler+0x4>

0800423e <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800423e:	b480      	push	{r7}
 8004240:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8004242:	e7fe      	b.n	8004242 <MemManage_Handler+0x4>

08004244 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8004244:	b480      	push	{r7}
 8004246:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8004248:	e7fe      	b.n	8004248 <BusFault_Handler+0x4>

0800424a <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800424a:	b480      	push	{r7}
 800424c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800424e:	e7fe      	b.n	800424e <UsageFault_Handler+0x4>

08004250 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8004250:	b480      	push	{r7}
 8004252:	af00      	add	r7, sp, #0
}
 8004254:	bf00      	nop
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr
	...

08004260 <ITM_SendChar>:

    \param [in]     ch  Character to transmit
    \return             Character to transmit
 */
static __INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8004260:	b480      	push	{r7}
 8004262:	b083      	sub	sp, #12
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  if ((CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)  &&      /* Trace enabled */
 8004268:	4b13      	ldr	r3, [pc, #76]	; (80042b8 <ITM_SendChar+0x58>)
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004270:	2b00      	cmp	r3, #0
 8004272:	d01a      	beq.n	80042aa <ITM_SendChar+0x4a>
      (ITM->TCR & ITM_TCR_ITMENA_Msk)                  &&      /* ITM enabled */
 8004274:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004278:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800427c:	f003 0301 	and.w	r3, r3, #1
  if ((CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)  &&      /* Trace enabled */
 8004280:	2b00      	cmp	r3, #0
 8004282:	d012      	beq.n	80042aa <ITM_SendChar+0x4a>
      (ITM->TER & (1UL << 0)        )                    )     /* ITM Port #0 enabled */
 8004284:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004288:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800428c:	f003 0301 	and.w	r3, r3, #1
      (ITM->TCR & ITM_TCR_ITMENA_Msk)                  &&      /* ITM enabled */
 8004290:	2b00      	cmp	r3, #0
 8004292:	d00a      	beq.n	80042aa <ITM_SendChar+0x4a>
  {
    while (ITM->PORT[0].u32 == 0);
 8004294:	bf00      	nop
 8004296:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d0fa      	beq.n	8004296 <ITM_SendChar+0x36>
    ITM->PORT[0].u8 = (uint8_t) ch;
 80042a0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	b2d2      	uxtb	r2, r2
 80042a8:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80042aa:	687b      	ldr	r3, [r7, #4]
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	370c      	adds	r7, #12
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr
 80042b8:	e000edf0 	.word	0xe000edf0

080042bc <_write>:
{
	while (1) {}		/* Make sure we hang here */
}

int _write(int file, char *ptr, int len)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b086      	sub	sp, #24
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	60b9      	str	r1, [r7, #8]
 80042c6:	607a      	str	r2, [r7, #4]
 /* Implement your write code here, this is used by
puts and printf for example */
 int i=0;
 80042c8:	2300      	movs	r3, #0
 80042ca:	617b      	str	r3, [r7, #20]
 for(i=0 ; i<len ; i++)
 80042cc:	2300      	movs	r3, #0
 80042ce:	617b      	str	r3, [r7, #20]
 80042d0:	e009      	b.n	80042e6 <_write+0x2a>
	 ITM_SendChar((*ptr++));
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	1c5a      	adds	r2, r3, #1
 80042d6:	60ba      	str	r2, [r7, #8]
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	4618      	mov	r0, r3
 80042dc:	f7ff ffc0 	bl	8004260 <ITM_SendChar>
 for(i=0 ; i<len ; i++)
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	3301      	adds	r3, #1
 80042e4:	617b      	str	r3, [r7, #20]
 80042e6:	697a      	ldr	r2, [r7, #20]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	429a      	cmp	r2, r3
 80042ec:	dbf1      	blt.n	80042d2 <_write+0x16>
 return len;
 80042ee:	687b      	ldr	r3, [r7, #4]
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3718      	adds	r7, #24
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <_sbrk>:


void * _sbrk(int32_t incr)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b085      	sub	sp, #20
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
	extern char   end; /* Set by linker.  */
	static char * heap_end;
	char *        prev_heap_end;

	if (heap_end == 0) {
 8004300:	4b0b      	ldr	r3, [pc, #44]	; (8004330 <_sbrk+0x38>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d102      	bne.n	800430e <_sbrk+0x16>
		heap_end = & end;
 8004308:	4b09      	ldr	r3, [pc, #36]	; (8004330 <_sbrk+0x38>)
 800430a:	4a0a      	ldr	r2, [pc, #40]	; (8004334 <_sbrk+0x3c>)
 800430c:	601a      	str	r2, [r3, #0]
	}

	prev_heap_end = heap_end;
 800430e:	4b08      	ldr	r3, [pc, #32]	; (8004330 <_sbrk+0x38>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	60fb      	str	r3, [r7, #12]
	heap_end += incr;
 8004314:	4b06      	ldr	r3, [pc, #24]	; (8004330 <_sbrk+0x38>)
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	4413      	add	r3, r2
 800431c:	4a04      	ldr	r2, [pc, #16]	; (8004330 <_sbrk+0x38>)
 800431e:	6013      	str	r3, [r2, #0]

	return (void *) prev_heap_end;
 8004320:	68fb      	ldr	r3, [r7, #12]
}
 8004322:	4618      	mov	r0, r3
 8004324:	3714      	adds	r7, #20
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr
 800432e:	bf00      	nop
 8004330:	20001e00 	.word	0x20001e00
 8004334:	20001ef0 	.word	0x20001ef0

08004338 <_close>:

int _close(int32_t file)
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
	errno = ENOSYS;
 8004340:	4b05      	ldr	r3, [pc, #20]	; (8004358 <_close+0x20>)
 8004342:	2258      	movs	r2, #88	; 0x58
 8004344:	601a      	str	r2, [r3, #0]
	return -1;
 8004346:	f04f 33ff 	mov.w	r3, #4294967295
}
 800434a:	4618      	mov	r0, r3
 800434c:	370c      	adds	r7, #12
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr
 8004356:	bf00      	nop
 8004358:	20001eec 	.word	0x20001eec

0800435c <_fstat>:


int _fstat(int32_t file, struct stat *st)
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	6039      	str	r1, [r7, #0]
	errno = ENOSYS;
 8004366:	4b05      	ldr	r3, [pc, #20]	; (800437c <_fstat+0x20>)
 8004368:	2258      	movs	r2, #88	; 0x58
 800436a:	601a      	str	r2, [r3, #0]
	return -1;
 800436c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004370:	4618      	mov	r0, r3
 8004372:	370c      	adds	r7, #12
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr
 800437c:	20001eec 	.word	0x20001eec

08004380 <_isatty>:

int _isatty(int32_t file)
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
	errno = ENOSYS;
 8004388:	4b04      	ldr	r3, [pc, #16]	; (800439c <_isatty+0x1c>)
 800438a:	2258      	movs	r2, #88	; 0x58
 800438c:	601a      	str	r2, [r3, #0]
	return 0;
 800438e:	2300      	movs	r3, #0
}
 8004390:	4618      	mov	r0, r3
 8004392:	370c      	adds	r7, #12
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr
 800439c:	20001eec 	.word	0x20001eec

080043a0 <_lseek>:

int _lseek(int32_t file, int32_t ptr, int32_t dir)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b085      	sub	sp, #20
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	60b9      	str	r1, [r7, #8]
 80043aa:	607a      	str	r2, [r7, #4]
	errno = ENOSYS;
 80043ac:	4b05      	ldr	r3, [pc, #20]	; (80043c4 <_lseek+0x24>)
 80043ae:	2258      	movs	r2, #88	; 0x58
 80043b0:	601a      	str	r2, [r3, #0]
	return -1;
 80043b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3714      	adds	r7, #20
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr
 80043c2:	bf00      	nop
 80043c4:	20001eec 	.word	0x20001eec

080043c8 <_read>:

int _read(int32_t file, uint8_t *ptr, int32_t len)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b085      	sub	sp, #20
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	607a      	str	r2, [r7, #4]
	errno = ENOSYS;
 80043d4:	4b05      	ldr	r3, [pc, #20]	; (80043ec <_read+0x24>)
 80043d6:	2258      	movs	r2, #88	; 0x58
 80043d8:	601a      	str	r2, [r3, #0]
	return -1;
 80043da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3714      	adds	r7, #20
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr
 80043ea:	bf00      	nop
 80043ec:	20001eec 	.word	0x20001eec

080043f0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80043f4:	4a16      	ldr	r2, [pc, #88]	; (8004450 <SystemInit+0x60>)
 80043f6:	4b16      	ldr	r3, [pc, #88]	; (8004450 <SystemInit+0x60>)
 80043f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004400:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004404:	4a13      	ldr	r2, [pc, #76]	; (8004454 <SystemInit+0x64>)
 8004406:	4b13      	ldr	r3, [pc, #76]	; (8004454 <SystemInit+0x64>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f043 0301 	orr.w	r3, r3, #1
 800440e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004410:	4b10      	ldr	r3, [pc, #64]	; (8004454 <SystemInit+0x64>)
 8004412:	2200      	movs	r2, #0
 8004414:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004416:	4a0f      	ldr	r2, [pc, #60]	; (8004454 <SystemInit+0x64>)
 8004418:	4b0e      	ldr	r3, [pc, #56]	; (8004454 <SystemInit+0x64>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8004420:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004424:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004426:	4b0b      	ldr	r3, [pc, #44]	; (8004454 <SystemInit+0x64>)
 8004428:	4a0b      	ldr	r2, [pc, #44]	; (8004458 <SystemInit+0x68>)
 800442a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800442c:	4a09      	ldr	r2, [pc, #36]	; (8004454 <SystemInit+0x64>)
 800442e:	4b09      	ldr	r3, [pc, #36]	; (8004454 <SystemInit+0x64>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004436:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004438:	4b06      	ldr	r3, [pc, #24]	; (8004454 <SystemInit+0x64>)
 800443a:	2200      	movs	r2, #0
 800443c:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800443e:	f000 f80d 	bl	800445c <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004442:	4b03      	ldr	r3, [pc, #12]	; (8004450 <SystemInit+0x60>)
 8004444:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004448:	609a      	str	r2, [r3, #8]
#endif
}
 800444a:	bf00      	nop
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	e000ed00 	.word	0xe000ed00
 8004454:	40023800 	.word	0x40023800
 8004458:	24003010 	.word	0x24003010

0800445c <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8004462:	2300      	movs	r3, #0
 8004464:	607b      	str	r3, [r7, #4]
 8004466:	2300      	movs	r3, #0
 8004468:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800446a:	4a36      	ldr	r2, [pc, #216]	; (8004544 <SetSysClock+0xe8>)
 800446c:	4b35      	ldr	r3, [pc, #212]	; (8004544 <SetSysClock+0xe8>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004474:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8004476:	4b33      	ldr	r3, [pc, #204]	; (8004544 <SetSysClock+0xe8>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800447e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	3301      	adds	r3, #1
 8004484:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d103      	bne.n	8004494 <SetSysClock+0x38>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004492:	d1f0      	bne.n	8004476 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8004494:	4b2b      	ldr	r3, [pc, #172]	; (8004544 <SetSysClock+0xe8>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800449c:	2b00      	cmp	r3, #0
 800449e:	d002      	beq.n	80044a6 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80044a0:	2301      	movs	r3, #1
 80044a2:	603b      	str	r3, [r7, #0]
 80044a4:	e001      	b.n	80044aa <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80044a6:	2300      	movs	r3, #0
 80044a8:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d142      	bne.n	8004536 <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80044b0:	4a24      	ldr	r2, [pc, #144]	; (8004544 <SetSysClock+0xe8>)
 80044b2:	4b24      	ldr	r3, [pc, #144]	; (8004544 <SetSysClock+0xe8>)
 80044b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044ba:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 80044bc:	4a22      	ldr	r2, [pc, #136]	; (8004548 <SetSysClock+0xec>)
 80044be:	4b22      	ldr	r3, [pc, #136]	; (8004548 <SetSysClock+0xec>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044c6:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80044c8:	4a1e      	ldr	r2, [pc, #120]	; (8004544 <SetSysClock+0xe8>)
 80044ca:	4b1e      	ldr	r3, [pc, #120]	; (8004544 <SetSysClock+0xe8>)
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80044d0:	4a1c      	ldr	r2, [pc, #112]	; (8004544 <SetSysClock+0xe8>)
 80044d2:	4b1c      	ldr	r3, [pc, #112]	; (8004544 <SetSysClock+0xe8>)
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044da:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80044dc:	4a19      	ldr	r2, [pc, #100]	; (8004544 <SetSysClock+0xe8>)
 80044de:	4b19      	ldr	r3, [pc, #100]	; (8004544 <SetSysClock+0xe8>)
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80044e6:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80044e8:	4b16      	ldr	r3, [pc, #88]	; (8004544 <SetSysClock+0xe8>)
 80044ea:	4a18      	ldr	r2, [pc, #96]	; (800454c <SetSysClock+0xf0>)
 80044ec:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80044ee:	4a15      	ldr	r2, [pc, #84]	; (8004544 <SetSysClock+0xe8>)
 80044f0:	4b14      	ldr	r3, [pc, #80]	; (8004544 <SetSysClock+0xe8>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044f8:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80044fa:	bf00      	nop
 80044fc:	4b11      	ldr	r3, [pc, #68]	; (8004544 <SetSysClock+0xe8>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004504:	2b00      	cmp	r3, #0
 8004506:	d0f9      	beq.n	80044fc <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8004508:	4b11      	ldr	r3, [pc, #68]	; (8004550 <SetSysClock+0xf4>)
 800450a:	f240 6205 	movw	r2, #1541	; 0x605
 800450e:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8004510:	4a0c      	ldr	r2, [pc, #48]	; (8004544 <SetSysClock+0xe8>)
 8004512:	4b0c      	ldr	r3, [pc, #48]	; (8004544 <SetSysClock+0xe8>)
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	f023 0303 	bic.w	r3, r3, #3
 800451a:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 800451c:	4a09      	ldr	r2, [pc, #36]	; (8004544 <SetSysClock+0xe8>)
 800451e:	4b09      	ldr	r3, [pc, #36]	; (8004544 <SetSysClock+0xe8>)
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	f043 0302 	orr.w	r3, r3, #2
 8004526:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL)
 8004528:	bf00      	nop
 800452a:	4b06      	ldr	r3, [pc, #24]	; (8004544 <SetSysClock+0xe8>)
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	f003 030c 	and.w	r3, r3, #12
 8004532:	2b08      	cmp	r3, #8
 8004534:	d1f9      	bne.n	800452a <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8004536:	bf00      	nop
 8004538:	370c      	adds	r7, #12
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr
 8004542:	bf00      	nop
 8004544:	40023800 	.word	0x40023800
 8004548:	40007000 	.word	0x40007000
 800454c:	07405408 	.word	0x07405408
 8004550:	40023c00 	.word	0x40023c00

08004554 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 8004554:	b480      	push	{r7}
 8004556:	b087      	sub	sp, #28
 8004558:	af00      	add	r7, sp, #0
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	60b9      	str	r1, [r7, #8]
 800455e:	607a      	str	r2, [r7, #4]
	int div = 1;
 8004560:	2301      	movs	r3, #1
 8004562:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8004564:	e004      	b.n	8004570 <ts_itoa+0x1c>
		div *= base;
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	fb02 f303 	mul.w	r3, r2, r3
 800456e:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	68ba      	ldr	r2, [r7, #8]
 8004574:	fbb2 f2f3 	udiv	r2, r2, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	429a      	cmp	r2, r3
 800457c:	d2f3      	bcs.n	8004566 <ts_itoa+0x12>

	while (div != 0)
 800457e:	e029      	b.n	80045d4 <ts_itoa+0x80>
	{
		int num = d/div;
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	68ba      	ldr	r2, [r7, #8]
 8004584:	fbb2 f3f3 	udiv	r3, r2, r3
 8004588:	613b      	str	r3, [r7, #16]
		d = d%div;
 800458a:	697a      	ldr	r2, [r7, #20]
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	fbb3 f1f2 	udiv	r1, r3, r2
 8004592:	fb02 f201 	mul.w	r2, r2, r1
 8004596:	1a9b      	subs	r3, r3, r2
 8004598:	60bb      	str	r3, [r7, #8]
		div /= base;
 800459a:	697a      	ldr	r2, [r7, #20]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	fb92 f3f3 	sdiv	r3, r2, r3
 80045a2:	617b      	str	r3, [r7, #20]
		if (num > 9)
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	2b09      	cmp	r3, #9
 80045a8:	dd0a      	ble.n	80045c0 <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	1c59      	adds	r1, r3, #1
 80045b0:	68fa      	ldr	r2, [r7, #12]
 80045b2:	6011      	str	r1, [r2, #0]
 80045b4:	693a      	ldr	r2, [r7, #16]
 80045b6:	b2d2      	uxtb	r2, r2
 80045b8:	3237      	adds	r2, #55	; 0x37
 80045ba:	b2d2      	uxtb	r2, r2
 80045bc:	701a      	strb	r2, [r3, #0]
 80045be:	e009      	b.n	80045d4 <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	1c59      	adds	r1, r3, #1
 80045c6:	68fa      	ldr	r2, [r7, #12]
 80045c8:	6011      	str	r1, [r2, #0]
 80045ca:	693a      	ldr	r2, [r7, #16]
 80045cc:	b2d2      	uxtb	r2, r2
 80045ce:	3230      	adds	r2, #48	; 0x30
 80045d0:	b2d2      	uxtb	r2, r2
 80045d2:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d1d2      	bne.n	8004580 <ts_itoa+0x2c>
	}
}
 80045da:	bf00      	nop
 80045dc:	371c      	adds	r7, #28
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr

080045e6 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 80045e6:	b580      	push	{r7, lr}
 80045e8:	b088      	sub	sp, #32
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	60f8      	str	r0, [r7, #12]
 80045ee:	60b9      	str	r1, [r7, #8]
 80045f0:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	617b      	str	r3, [r7, #20]
	while(*fmt)
 80045f6:	e07d      	b.n	80046f4 <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	2b25      	cmp	r3, #37	; 0x25
 80045fe:	d171      	bne.n	80046e4 <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	3301      	adds	r3, #1
 8004604:	60bb      	str	r3, [r7, #8]
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	2b64      	cmp	r3, #100	; 0x64
 800460c:	d01e      	beq.n	800464c <ts_formatstring+0x66>
 800460e:	2b64      	cmp	r3, #100	; 0x64
 8004610:	dc06      	bgt.n	8004620 <ts_formatstring+0x3a>
 8004612:	2b58      	cmp	r3, #88	; 0x58
 8004614:	d050      	beq.n	80046b8 <ts_formatstring+0xd2>
 8004616:	2b63      	cmp	r3, #99	; 0x63
 8004618:	d00e      	beq.n	8004638 <ts_formatstring+0x52>
 800461a:	2b25      	cmp	r3, #37	; 0x25
 800461c:	d058      	beq.n	80046d0 <ts_formatstring+0xea>
 800461e:	e05d      	b.n	80046dc <ts_formatstring+0xf6>
 8004620:	2b73      	cmp	r3, #115	; 0x73
 8004622:	d02b      	beq.n	800467c <ts_formatstring+0x96>
 8004624:	2b73      	cmp	r3, #115	; 0x73
 8004626:	dc02      	bgt.n	800462e <ts_formatstring+0x48>
 8004628:	2b69      	cmp	r3, #105	; 0x69
 800462a:	d00f      	beq.n	800464c <ts_formatstring+0x66>
 800462c:	e056      	b.n	80046dc <ts_formatstring+0xf6>
 800462e:	2b75      	cmp	r3, #117	; 0x75
 8004630:	d037      	beq.n	80046a2 <ts_formatstring+0xbc>
 8004632:	2b78      	cmp	r3, #120	; 0x78
 8004634:	d040      	beq.n	80046b8 <ts_formatstring+0xd2>
 8004636:	e051      	b.n	80046dc <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	1c5a      	adds	r2, r3, #1
 800463c:	60fa      	str	r2, [r7, #12]
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	1d11      	adds	r1, r2, #4
 8004642:	6079      	str	r1, [r7, #4]
 8004644:	6812      	ldr	r2, [r2, #0]
 8004646:	b2d2      	uxtb	r2, r2
 8004648:	701a      	strb	r2, [r3, #0]
				break;
 800464a:	e047      	b.n	80046dc <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	1d1a      	adds	r2, r3, #4
 8004650:	607a      	str	r2, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	2b00      	cmp	r3, #0
 800465a:	da07      	bge.n	800466c <ts_formatstring+0x86>
					{
						val *= -1;
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	425b      	negs	r3, r3
 8004660:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	1c5a      	adds	r2, r3, #1
 8004666:	60fa      	str	r2, [r7, #12]
 8004668:	222d      	movs	r2, #45	; 0x2d
 800466a:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 800466c:	69f9      	ldr	r1, [r7, #28]
 800466e:	f107 030c 	add.w	r3, r7, #12
 8004672:	220a      	movs	r2, #10
 8004674:	4618      	mov	r0, r3
 8004676:	f7ff ff6d 	bl	8004554 <ts_itoa>
				}
				break;
 800467a:	e02f      	b.n	80046dc <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	1d1a      	adds	r2, r3, #4
 8004680:	607a      	str	r2, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	61bb      	str	r3, [r7, #24]
					while (*arg)
 8004686:	e007      	b.n	8004698 <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	1c5a      	adds	r2, r3, #1
 800468c:	60fa      	str	r2, [r7, #12]
 800468e:	69ba      	ldr	r2, [r7, #24]
 8004690:	1c51      	adds	r1, r2, #1
 8004692:	61b9      	str	r1, [r7, #24]
 8004694:	7812      	ldrb	r2, [r2, #0]
 8004696:	701a      	strb	r2, [r3, #0]
					while (*arg)
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d1f3      	bne.n	8004688 <ts_formatstring+0xa2>
					}
				}
				break;
 80046a0:	e01c      	b.n	80046dc <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	1d1a      	adds	r2, r3, #4
 80046a6:	607a      	str	r2, [r7, #4]
 80046a8:	6819      	ldr	r1, [r3, #0]
 80046aa:	f107 030c 	add.w	r3, r7, #12
 80046ae:	220a      	movs	r2, #10
 80046b0:	4618      	mov	r0, r3
 80046b2:	f7ff ff4f 	bl	8004554 <ts_itoa>
				break;
 80046b6:	e011      	b.n	80046dc <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	1d1a      	adds	r2, r3, #4
 80046bc:	607a      	str	r2, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4619      	mov	r1, r3
 80046c2:	f107 030c 	add.w	r3, r7, #12
 80046c6:	2210      	movs	r2, #16
 80046c8:	4618      	mov	r0, r3
 80046ca:	f7ff ff43 	bl	8004554 <ts_itoa>
				break;
 80046ce:	e005      	b.n	80046dc <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	1c5a      	adds	r2, r3, #1
 80046d4:	60fa      	str	r2, [r7, #12]
 80046d6:	2225      	movs	r2, #37	; 0x25
 80046d8:	701a      	strb	r2, [r3, #0]
				  break;
 80046da:	bf00      	nop
			}
			fmt++;
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	3301      	adds	r3, #1
 80046e0:	60bb      	str	r3, [r7, #8]
 80046e2:	e007      	b.n	80046f4 <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	1c5a      	adds	r2, r3, #1
 80046e8:	60fa      	str	r2, [r7, #12]
 80046ea:	68ba      	ldr	r2, [r7, #8]
 80046ec:	1c51      	adds	r1, r2, #1
 80046ee:	60b9      	str	r1, [r7, #8]
 80046f0:	7812      	ldrb	r2, [r2, #0]
 80046f2:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	f47f af7d 	bne.w	80045f8 <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2200      	movs	r2, #0
 8004702:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	461a      	mov	r2, r3
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	1ad3      	subs	r3, r2, r3
}
 800470c:	4618      	mov	r0, r3
 800470e:	3720      	adds	r7, #32
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}

08004714 <ts_formatlength>:
**            format string and va_list va
**  Returns:  Maximum length
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
 8004714:	b480      	push	{r7}
 8004716:	b085      	sub	sp, #20
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]
	int length = 0;
 800471e:	2300      	movs	r3, #0
 8004720:	60fb      	str	r3, [r7, #12]
	while (*fmt)
 8004722:	e081      	b.n	8004828 <ts_formatlength+0x114>
	{
		if (*fmt == '%')
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	2b25      	cmp	r3, #37	; 0x25
 800472a:	d177      	bne.n	800481c <ts_formatlength+0x108>
		{
			++fmt;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	3301      	adds	r3, #1
 8004730:	607b      	str	r3, [r7, #4]
			switch (*fmt)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	781b      	ldrb	r3, [r3, #0]
 8004736:	3b58      	subs	r3, #88	; 0x58
 8004738:	2b20      	cmp	r3, #32
 800473a:	d86a      	bhi.n	8004812 <ts_formatlength+0xfe>
 800473c:	a201      	add	r2, pc, #4	; (adr r2, 8004744 <ts_formatlength+0x30>)
 800473e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004742:	bf00      	nop
 8004744:	08004805 	.word	0x08004805
 8004748:	08004813 	.word	0x08004813
 800474c:	08004813 	.word	0x08004813
 8004750:	08004813 	.word	0x08004813
 8004754:	08004813 	.word	0x08004813
 8004758:	08004813 	.word	0x08004813
 800475c:	08004813 	.word	0x08004813
 8004760:	08004813 	.word	0x08004813
 8004764:	08004813 	.word	0x08004813
 8004768:	08004813 	.word	0x08004813
 800476c:	08004813 	.word	0x08004813
 8004770:	080047c9 	.word	0x080047c9
 8004774:	080047d7 	.word	0x080047d7
 8004778:	08004813 	.word	0x08004813
 800477c:	08004813 	.word	0x08004813
 8004780:	08004813 	.word	0x08004813
 8004784:	08004813 	.word	0x08004813
 8004788:	080047d7 	.word	0x080047d7
 800478c:	08004813 	.word	0x08004813
 8004790:	08004813 	.word	0x08004813
 8004794:	08004813 	.word	0x08004813
 8004798:	08004813 	.word	0x08004813
 800479c:	08004813 	.word	0x08004813
 80047a0:	08004813 	.word	0x08004813
 80047a4:	08004813 	.word	0x08004813
 80047a8:	08004813 	.word	0x08004813
 80047ac:	08004813 	.word	0x08004813
 80047b0:	080047e5 	.word	0x080047e5
 80047b4:	08004813 	.word	0x08004813
 80047b8:	080047d7 	.word	0x080047d7
 80047bc:	08004813 	.word	0x08004813
 80047c0:	08004813 	.word	0x08004813
 80047c4:	08004805 	.word	0x08004805
			{
			  case 'c':
		  		  va_arg(va, int);
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	3304      	adds	r3, #4
 80047cc:	603b      	str	r3, [r7, #0]
				  ++length;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	3301      	adds	r3, #1
 80047d2:	60fb      	str	r3, [r7, #12]
				  break;
 80047d4:	e025      	b.n	8004822 <ts_formatlength+0x10e>
			  case 'd':
			  case 'i':
			  case 'u':
				  /* 32 bits integer is max 11 characters with minus sign */
				  length += 11;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	330b      	adds	r3, #11
 80047da:	60fb      	str	r3, [r7, #12]
				  va_arg(va, int);
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	3304      	adds	r3, #4
 80047e0:	603b      	str	r3, [r7, #0]
				  break;
 80047e2:	e01e      	b.n	8004822 <ts_formatlength+0x10e>
			  case 's':
			  	  {
			  		  char * str = va_arg(va, char *);
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	1d1a      	adds	r2, r3, #4
 80047e8:	603a      	str	r2, [r7, #0]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	60bb      	str	r3, [r7, #8]
			  		  while (*str++)
 80047ee:	e002      	b.n	80047f6 <ts_formatlength+0xe2>
			  			  ++length;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	3301      	adds	r3, #1
 80047f4:	60fb      	str	r3, [r7, #12]
			  		  while (*str++)
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	1c5a      	adds	r2, r3, #1
 80047fa:	60ba      	str	r2, [r7, #8]
 80047fc:	781b      	ldrb	r3, [r3, #0]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d1f6      	bne.n	80047f0 <ts_formatlength+0xdc>
			  	  }
				  break;
 8004802:	e00e      	b.n	8004822 <ts_formatlength+0x10e>
			  case 'x':
			  case 'X':
				  /* 32 bits integer as hex is max 8 characters */
				  length += 8;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	3308      	adds	r3, #8
 8004808:	60fb      	str	r3, [r7, #12]
				  va_arg(va, unsigned int);
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	3304      	adds	r3, #4
 800480e:	603b      	str	r3, [r7, #0]
				  break;
 8004810:	e007      	b.n	8004822 <ts_formatlength+0x10e>
			  default:
				  ++length;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	3301      	adds	r3, #1
 8004816:	60fb      	str	r3, [r7, #12]
				  break;
 8004818:	bf00      	nop
 800481a:	e002      	b.n	8004822 <ts_formatlength+0x10e>
			}
		}
		else
		{
			++length;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	3301      	adds	r3, #1
 8004820:	60fb      	str	r3, [r7, #12]
		}
		++fmt;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	3301      	adds	r3, #1
 8004826:	607b      	str	r3, [r7, #4]
	while (*fmt)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	781b      	ldrb	r3, [r3, #0]
 800482c:	2b00      	cmp	r3, #0
 800482e:	f47f af79 	bne.w	8004724 <ts_formatlength+0x10>
	}
	return length;
 8004832:	68fb      	ldr	r3, [r7, #12]
}
 8004834:	4618      	mov	r0, r3
 8004836:	3714      	adds	r7, #20
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <printf>:
**  Returns:  Number of bytes written
**
**===========================================================================
*/
int printf(const char *fmt, ...)
{
 8004840:	b40f      	push	{r0, r1, r2, r3}
 8004842:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004846:	b085      	sub	sp, #20
 8004848:	af00      	add	r7, sp, #0
	int length = 0;
 800484a:	2300      	movs	r3, #0
 800484c:	60fb      	str	r3, [r7, #12]
	va_list va;
	va_start(va, fmt);
 800484e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004852:	603b      	str	r3, [r7, #0]
	length = ts_formatlength(fmt, va);
 8004854:	6839      	ldr	r1, [r7, #0]
 8004856:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004858:	f7ff ff5c 	bl	8004714 <ts_formatlength>
 800485c:	60f8      	str	r0, [r7, #12]
	va_end(va);
	{
 800485e:	466b      	mov	r3, sp
 8004860:	461e      	mov	r6, r3
		char buf[length];
 8004862:	68f9      	ldr	r1, [r7, #12]
 8004864:	1e4b      	subs	r3, r1, #1
 8004866:	60bb      	str	r3, [r7, #8]
 8004868:	460b      	mov	r3, r1
 800486a:	461a      	mov	r2, r3
 800486c:	f04f 0300 	mov.w	r3, #0
 8004870:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 8004874:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 8004878:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 800487c:	460b      	mov	r3, r1
 800487e:	461a      	mov	r2, r3
 8004880:	f04f 0300 	mov.w	r3, #0
 8004884:	00dd      	lsls	r5, r3, #3
 8004886:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800488a:	00d4      	lsls	r4, r2, #3
 800488c:	460b      	mov	r3, r1
 800488e:	3307      	adds	r3, #7
 8004890:	08db      	lsrs	r3, r3, #3
 8004892:	00db      	lsls	r3, r3, #3
 8004894:	ebad 0d03 	sub.w	sp, sp, r3
 8004898:	466b      	mov	r3, sp
 800489a:	3300      	adds	r3, #0
 800489c:	607b      	str	r3, [r7, #4]
		va_start(va, fmt);
 800489e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80048a2:	603b      	str	r3, [r7, #0]
		length = ts_formatstring(buf, fmt, va);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	683a      	ldr	r2, [r7, #0]
 80048a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80048aa:	4618      	mov	r0, r3
 80048ac:	f7ff fe9b 	bl	80045e6 <ts_formatstring>
 80048b0:	60f8      	str	r0, [r7, #12]
		length = _write(1, buf, length);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	68fa      	ldr	r2, [r7, #12]
 80048b6:	4619      	mov	r1, r3
 80048b8:	2001      	movs	r0, #1
 80048ba:	f7ff fcff 	bl	80042bc <_write>
 80048be:	60f8      	str	r0, [r7, #12]
 80048c0:	46b5      	mov	sp, r6
		va_end(va);
	}
	return length;
 80048c2:	68fb      	ldr	r3, [r7, #12]
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3714      	adds	r7, #20
 80048c8:	46bd      	mov	sp, r7
 80048ca:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80048ce:	b004      	add	sp, #16
 80048d0:	4770      	bx	lr
 80048d2:	0000      	movs	r0, r0
 80048d4:	0000      	movs	r0, r0
	...

080048d8 <floor>:
 80048d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048dc:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80048e0:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80048e4:	2e13      	cmp	r6, #19
 80048e6:	4602      	mov	r2, r0
 80048e8:	460b      	mov	r3, r1
 80048ea:	4680      	mov	r8, r0
 80048ec:	460c      	mov	r4, r1
 80048ee:	4605      	mov	r5, r0
 80048f0:	dc36      	bgt.n	8004960 <floor+0x88>
 80048f2:	2e00      	cmp	r6, #0
 80048f4:	da17      	bge.n	8004926 <floor+0x4e>
 80048f6:	a336      	add	r3, pc, #216	; (adr r3, 80049d0 <floor+0xf8>)
 80048f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048fc:	f7fb fc6e 	bl	80001dc <__adddf3>
 8004900:	2200      	movs	r2, #0
 8004902:	2300      	movs	r3, #0
 8004904:	f7fb fe9a 	bl	800063c <__aeabi_dcmpgt>
 8004908:	b150      	cbz	r0, 8004920 <floor+0x48>
 800490a:	2c00      	cmp	r4, #0
 800490c:	da5a      	bge.n	80049c4 <floor+0xec>
 800490e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8004912:	ea53 0308 	orrs.w	r3, r3, r8
 8004916:	4b30      	ldr	r3, [pc, #192]	; (80049d8 <floor+0x100>)
 8004918:	f04f 0500 	mov.w	r5, #0
 800491c:	bf18      	it	ne
 800491e:	461c      	movne	r4, r3
 8004920:	4623      	mov	r3, r4
 8004922:	462a      	mov	r2, r5
 8004924:	e025      	b.n	8004972 <floor+0x9a>
 8004926:	4f2d      	ldr	r7, [pc, #180]	; (80049dc <floor+0x104>)
 8004928:	4137      	asrs	r7, r6
 800492a:	ea01 0e07 	and.w	lr, r1, r7
 800492e:	ea5e 0e00 	orrs.w	lr, lr, r0
 8004932:	d01e      	beq.n	8004972 <floor+0x9a>
 8004934:	a326      	add	r3, pc, #152	; (adr r3, 80049d0 <floor+0xf8>)
 8004936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800493a:	f7fb fc4f 	bl	80001dc <__adddf3>
 800493e:	2200      	movs	r2, #0
 8004940:	2300      	movs	r3, #0
 8004942:	f7fb fe7b 	bl	800063c <__aeabi_dcmpgt>
 8004946:	2800      	cmp	r0, #0
 8004948:	d0ea      	beq.n	8004920 <floor+0x48>
 800494a:	2c00      	cmp	r4, #0
 800494c:	bfbe      	ittt	lt
 800494e:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8004952:	fa43 f606 	asrlt.w	r6, r3, r6
 8004956:	19a4      	addlt	r4, r4, r6
 8004958:	ea24 0407 	bic.w	r4, r4, r7
 800495c:	2500      	movs	r5, #0
 800495e:	e7df      	b.n	8004920 <floor+0x48>
 8004960:	2e33      	cmp	r6, #51	; 0x33
 8004962:	dd0a      	ble.n	800497a <floor+0xa2>
 8004964:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8004968:	d103      	bne.n	8004972 <floor+0x9a>
 800496a:	f7fb fc37 	bl	80001dc <__adddf3>
 800496e:	4602      	mov	r2, r0
 8004970:	460b      	mov	r3, r1
 8004972:	4610      	mov	r0, r2
 8004974:	4619      	mov	r1, r3
 8004976:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800497a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800497e:	f04f 3eff 	mov.w	lr, #4294967295
 8004982:	fa2e f707 	lsr.w	r7, lr, r7
 8004986:	4238      	tst	r0, r7
 8004988:	d0f3      	beq.n	8004972 <floor+0x9a>
 800498a:	a311      	add	r3, pc, #68	; (adr r3, 80049d0 <floor+0xf8>)
 800498c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004990:	f7fb fc24 	bl	80001dc <__adddf3>
 8004994:	2200      	movs	r2, #0
 8004996:	2300      	movs	r3, #0
 8004998:	f7fb fe50 	bl	800063c <__aeabi_dcmpgt>
 800499c:	2800      	cmp	r0, #0
 800499e:	d0bf      	beq.n	8004920 <floor+0x48>
 80049a0:	2c00      	cmp	r4, #0
 80049a2:	da02      	bge.n	80049aa <floor+0xd2>
 80049a4:	2e14      	cmp	r6, #20
 80049a6:	d103      	bne.n	80049b0 <floor+0xd8>
 80049a8:	3401      	adds	r4, #1
 80049aa:	ea25 0507 	bic.w	r5, r5, r7
 80049ae:	e7b7      	b.n	8004920 <floor+0x48>
 80049b0:	2301      	movs	r3, #1
 80049b2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80049b6:	fa03 f606 	lsl.w	r6, r3, r6
 80049ba:	4435      	add	r5, r6
 80049bc:	45a8      	cmp	r8, r5
 80049be:	bf88      	it	hi
 80049c0:	18e4      	addhi	r4, r4, r3
 80049c2:	e7f2      	b.n	80049aa <floor+0xd2>
 80049c4:	2500      	movs	r5, #0
 80049c6:	462c      	mov	r4, r5
 80049c8:	e7aa      	b.n	8004920 <floor+0x48>
 80049ca:	bf00      	nop
 80049cc:	f3af 8000 	nop.w
 80049d0:	8800759c 	.word	0x8800759c
 80049d4:	7e37e43c 	.word	0x7e37e43c
 80049d8:	bff00000 	.word	0xbff00000
 80049dc:	000fffff 	.word	0x000fffff

080049e0 <__libc_init_array>:
 80049e0:	b570      	push	{r4, r5, r6, lr}
 80049e2:	4e0d      	ldr	r6, [pc, #52]	; (8004a18 <__libc_init_array+0x38>)
 80049e4:	4c0d      	ldr	r4, [pc, #52]	; (8004a1c <__libc_init_array+0x3c>)
 80049e6:	1ba4      	subs	r4, r4, r6
 80049e8:	10a4      	asrs	r4, r4, #2
 80049ea:	2500      	movs	r5, #0
 80049ec:	42a5      	cmp	r5, r4
 80049ee:	d109      	bne.n	8004a04 <__libc_init_array+0x24>
 80049f0:	4e0b      	ldr	r6, [pc, #44]	; (8004a20 <__libc_init_array+0x40>)
 80049f2:	4c0c      	ldr	r4, [pc, #48]	; (8004a24 <__libc_init_array+0x44>)
 80049f4:	f000 fe66 	bl	80056c4 <_init>
 80049f8:	1ba4      	subs	r4, r4, r6
 80049fa:	10a4      	asrs	r4, r4, #2
 80049fc:	2500      	movs	r5, #0
 80049fe:	42a5      	cmp	r5, r4
 8004a00:	d105      	bne.n	8004a0e <__libc_init_array+0x2e>
 8004a02:	bd70      	pop	{r4, r5, r6, pc}
 8004a04:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004a08:	4798      	blx	r3
 8004a0a:	3501      	adds	r5, #1
 8004a0c:	e7ee      	b.n	80049ec <__libc_init_array+0xc>
 8004a0e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004a12:	4798      	blx	r3
 8004a14:	3501      	adds	r5, #1
 8004a16:	e7f2      	b.n	80049fe <__libc_init_array+0x1e>
 8004a18:	080056dc 	.word	0x080056dc
 8004a1c:	080056dc 	.word	0x080056dc
 8004a20:	080056dc 	.word	0x080056dc
 8004a24:	080056e0 	.word	0x080056e0

08004a28 <memcpy>:
 8004a28:	b510      	push	{r4, lr}
 8004a2a:	1e43      	subs	r3, r0, #1
 8004a2c:	440a      	add	r2, r1
 8004a2e:	4291      	cmp	r1, r2
 8004a30:	d100      	bne.n	8004a34 <memcpy+0xc>
 8004a32:	bd10      	pop	{r4, pc}
 8004a34:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a38:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a3c:	e7f7      	b.n	8004a2e <memcpy+0x6>

08004a3e <memset>:
 8004a3e:	4402      	add	r2, r0
 8004a40:	4603      	mov	r3, r0
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d100      	bne.n	8004a48 <memset+0xa>
 8004a46:	4770      	bx	lr
 8004a48:	f803 1b01 	strb.w	r1, [r3], #1
 8004a4c:	e7f9      	b.n	8004a42 <memset+0x4>
	...

08004a50 <_puts_r>:
 8004a50:	b570      	push	{r4, r5, r6, lr}
 8004a52:	460e      	mov	r6, r1
 8004a54:	4605      	mov	r5, r0
 8004a56:	b118      	cbz	r0, 8004a60 <_puts_r+0x10>
 8004a58:	6983      	ldr	r3, [r0, #24]
 8004a5a:	b90b      	cbnz	r3, 8004a60 <_puts_r+0x10>
 8004a5c:	f000 fa48 	bl	8004ef0 <__sinit>
 8004a60:	69ab      	ldr	r3, [r5, #24]
 8004a62:	68ac      	ldr	r4, [r5, #8]
 8004a64:	b913      	cbnz	r3, 8004a6c <_puts_r+0x1c>
 8004a66:	4628      	mov	r0, r5
 8004a68:	f000 fa42 	bl	8004ef0 <__sinit>
 8004a6c:	4b23      	ldr	r3, [pc, #140]	; (8004afc <_puts_r+0xac>)
 8004a6e:	429c      	cmp	r4, r3
 8004a70:	d117      	bne.n	8004aa2 <_puts_r+0x52>
 8004a72:	686c      	ldr	r4, [r5, #4]
 8004a74:	89a3      	ldrh	r3, [r4, #12]
 8004a76:	071b      	lsls	r3, r3, #28
 8004a78:	d51d      	bpl.n	8004ab6 <_puts_r+0x66>
 8004a7a:	6923      	ldr	r3, [r4, #16]
 8004a7c:	b1db      	cbz	r3, 8004ab6 <_puts_r+0x66>
 8004a7e:	3e01      	subs	r6, #1
 8004a80:	68a3      	ldr	r3, [r4, #8]
 8004a82:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004a86:	3b01      	subs	r3, #1
 8004a88:	60a3      	str	r3, [r4, #8]
 8004a8a:	b9e9      	cbnz	r1, 8004ac8 <_puts_r+0x78>
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	da2e      	bge.n	8004aee <_puts_r+0x9e>
 8004a90:	4622      	mov	r2, r4
 8004a92:	210a      	movs	r1, #10
 8004a94:	4628      	mov	r0, r5
 8004a96:	f000 f879 	bl	8004b8c <__swbuf_r>
 8004a9a:	3001      	adds	r0, #1
 8004a9c:	d011      	beq.n	8004ac2 <_puts_r+0x72>
 8004a9e:	200a      	movs	r0, #10
 8004aa0:	bd70      	pop	{r4, r5, r6, pc}
 8004aa2:	4b17      	ldr	r3, [pc, #92]	; (8004b00 <_puts_r+0xb0>)
 8004aa4:	429c      	cmp	r4, r3
 8004aa6:	d101      	bne.n	8004aac <_puts_r+0x5c>
 8004aa8:	68ac      	ldr	r4, [r5, #8]
 8004aaa:	e7e3      	b.n	8004a74 <_puts_r+0x24>
 8004aac:	4b15      	ldr	r3, [pc, #84]	; (8004b04 <_puts_r+0xb4>)
 8004aae:	429c      	cmp	r4, r3
 8004ab0:	bf08      	it	eq
 8004ab2:	68ec      	ldreq	r4, [r5, #12]
 8004ab4:	e7de      	b.n	8004a74 <_puts_r+0x24>
 8004ab6:	4621      	mov	r1, r4
 8004ab8:	4628      	mov	r0, r5
 8004aba:	f000 f8b9 	bl	8004c30 <__swsetup_r>
 8004abe:	2800      	cmp	r0, #0
 8004ac0:	d0dd      	beq.n	8004a7e <_puts_r+0x2e>
 8004ac2:	f04f 30ff 	mov.w	r0, #4294967295
 8004ac6:	bd70      	pop	{r4, r5, r6, pc}
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	da04      	bge.n	8004ad6 <_puts_r+0x86>
 8004acc:	69a2      	ldr	r2, [r4, #24]
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	db06      	blt.n	8004ae0 <_puts_r+0x90>
 8004ad2:	290a      	cmp	r1, #10
 8004ad4:	d004      	beq.n	8004ae0 <_puts_r+0x90>
 8004ad6:	6823      	ldr	r3, [r4, #0]
 8004ad8:	1c5a      	adds	r2, r3, #1
 8004ada:	6022      	str	r2, [r4, #0]
 8004adc:	7019      	strb	r1, [r3, #0]
 8004ade:	e7cf      	b.n	8004a80 <_puts_r+0x30>
 8004ae0:	4622      	mov	r2, r4
 8004ae2:	4628      	mov	r0, r5
 8004ae4:	f000 f852 	bl	8004b8c <__swbuf_r>
 8004ae8:	3001      	adds	r0, #1
 8004aea:	d1c9      	bne.n	8004a80 <_puts_r+0x30>
 8004aec:	e7e9      	b.n	8004ac2 <_puts_r+0x72>
 8004aee:	6823      	ldr	r3, [r4, #0]
 8004af0:	200a      	movs	r0, #10
 8004af2:	1c5a      	adds	r2, r3, #1
 8004af4:	6022      	str	r2, [r4, #0]
 8004af6:	7018      	strb	r0, [r3, #0]
 8004af8:	bd70      	pop	{r4, r5, r6, pc}
 8004afa:	bf00      	nop
 8004afc:	08005680 	.word	0x08005680
 8004b00:	080056a0 	.word	0x080056a0
 8004b04:	08005660 	.word	0x08005660

08004b08 <puts>:
 8004b08:	4b02      	ldr	r3, [pc, #8]	; (8004b14 <puts+0xc>)
 8004b0a:	4601      	mov	r1, r0
 8004b0c:	6818      	ldr	r0, [r3, #0]
 8004b0e:	f7ff bf9f 	b.w	8004a50 <_puts_r>
 8004b12:	bf00      	nop
 8004b14:	20000018 	.word	0x20000018

08004b18 <rand>:
 8004b18:	4b19      	ldr	r3, [pc, #100]	; (8004b80 <rand+0x68>)
 8004b1a:	b510      	push	{r4, lr}
 8004b1c:	681c      	ldr	r4, [r3, #0]
 8004b1e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004b20:	b9d3      	cbnz	r3, 8004b58 <rand+0x40>
 8004b22:	2018      	movs	r0, #24
 8004b24:	f000 fad2 	bl	80050cc <malloc>
 8004b28:	f243 330e 	movw	r3, #13070	; 0x330e
 8004b2c:	63a0      	str	r0, [r4, #56]	; 0x38
 8004b2e:	8003      	strh	r3, [r0, #0]
 8004b30:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 8004b34:	8043      	strh	r3, [r0, #2]
 8004b36:	f241 2334 	movw	r3, #4660	; 0x1234
 8004b3a:	8083      	strh	r3, [r0, #4]
 8004b3c:	f24e 636d 	movw	r3, #58989	; 0xe66d
 8004b40:	80c3      	strh	r3, [r0, #6]
 8004b42:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 8004b46:	8103      	strh	r3, [r0, #8]
 8004b48:	2305      	movs	r3, #5
 8004b4a:	8143      	strh	r3, [r0, #10]
 8004b4c:	230b      	movs	r3, #11
 8004b4e:	8183      	strh	r3, [r0, #12]
 8004b50:	2201      	movs	r2, #1
 8004b52:	2300      	movs	r3, #0
 8004b54:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8004b58:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004b5a:	480a      	ldr	r0, [pc, #40]	; (8004b84 <rand+0x6c>)
 8004b5c:	690a      	ldr	r2, [r1, #16]
 8004b5e:	694b      	ldr	r3, [r1, #20]
 8004b60:	4c09      	ldr	r4, [pc, #36]	; (8004b88 <rand+0x70>)
 8004b62:	4350      	muls	r0, r2
 8004b64:	fb04 0003 	mla	r0, r4, r3, r0
 8004b68:	fba2 2304 	umull	r2, r3, r2, r4
 8004b6c:	3201      	adds	r2, #1
 8004b6e:	4403      	add	r3, r0
 8004b70:	f143 0300 	adc.w	r3, r3, #0
 8004b74:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8004b78:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8004b7c:	bd10      	pop	{r4, pc}
 8004b7e:	bf00      	nop
 8004b80:	20000018 	.word	0x20000018
 8004b84:	5851f42d 	.word	0x5851f42d
 8004b88:	4c957f2d 	.word	0x4c957f2d

08004b8c <__swbuf_r>:
 8004b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b8e:	460e      	mov	r6, r1
 8004b90:	4614      	mov	r4, r2
 8004b92:	4605      	mov	r5, r0
 8004b94:	b118      	cbz	r0, 8004b9e <__swbuf_r+0x12>
 8004b96:	6983      	ldr	r3, [r0, #24]
 8004b98:	b90b      	cbnz	r3, 8004b9e <__swbuf_r+0x12>
 8004b9a:	f000 f9a9 	bl	8004ef0 <__sinit>
 8004b9e:	4b21      	ldr	r3, [pc, #132]	; (8004c24 <__swbuf_r+0x98>)
 8004ba0:	429c      	cmp	r4, r3
 8004ba2:	d12a      	bne.n	8004bfa <__swbuf_r+0x6e>
 8004ba4:	686c      	ldr	r4, [r5, #4]
 8004ba6:	69a3      	ldr	r3, [r4, #24]
 8004ba8:	60a3      	str	r3, [r4, #8]
 8004baa:	89a3      	ldrh	r3, [r4, #12]
 8004bac:	071a      	lsls	r2, r3, #28
 8004bae:	d52e      	bpl.n	8004c0e <__swbuf_r+0x82>
 8004bb0:	6923      	ldr	r3, [r4, #16]
 8004bb2:	b363      	cbz	r3, 8004c0e <__swbuf_r+0x82>
 8004bb4:	6923      	ldr	r3, [r4, #16]
 8004bb6:	6820      	ldr	r0, [r4, #0]
 8004bb8:	1ac0      	subs	r0, r0, r3
 8004bba:	6963      	ldr	r3, [r4, #20]
 8004bbc:	b2f6      	uxtb	r6, r6
 8004bbe:	4298      	cmp	r0, r3
 8004bc0:	4637      	mov	r7, r6
 8004bc2:	db04      	blt.n	8004bce <__swbuf_r+0x42>
 8004bc4:	4621      	mov	r1, r4
 8004bc6:	4628      	mov	r0, r5
 8004bc8:	f000 f928 	bl	8004e1c <_fflush_r>
 8004bcc:	bb28      	cbnz	r0, 8004c1a <__swbuf_r+0x8e>
 8004bce:	68a3      	ldr	r3, [r4, #8]
 8004bd0:	3b01      	subs	r3, #1
 8004bd2:	60a3      	str	r3, [r4, #8]
 8004bd4:	6823      	ldr	r3, [r4, #0]
 8004bd6:	1c5a      	adds	r2, r3, #1
 8004bd8:	6022      	str	r2, [r4, #0]
 8004bda:	701e      	strb	r6, [r3, #0]
 8004bdc:	6963      	ldr	r3, [r4, #20]
 8004bde:	3001      	adds	r0, #1
 8004be0:	4298      	cmp	r0, r3
 8004be2:	d004      	beq.n	8004bee <__swbuf_r+0x62>
 8004be4:	89a3      	ldrh	r3, [r4, #12]
 8004be6:	07db      	lsls	r3, r3, #31
 8004be8:	d519      	bpl.n	8004c1e <__swbuf_r+0x92>
 8004bea:	2e0a      	cmp	r6, #10
 8004bec:	d117      	bne.n	8004c1e <__swbuf_r+0x92>
 8004bee:	4621      	mov	r1, r4
 8004bf0:	4628      	mov	r0, r5
 8004bf2:	f000 f913 	bl	8004e1c <_fflush_r>
 8004bf6:	b190      	cbz	r0, 8004c1e <__swbuf_r+0x92>
 8004bf8:	e00f      	b.n	8004c1a <__swbuf_r+0x8e>
 8004bfa:	4b0b      	ldr	r3, [pc, #44]	; (8004c28 <__swbuf_r+0x9c>)
 8004bfc:	429c      	cmp	r4, r3
 8004bfe:	d101      	bne.n	8004c04 <__swbuf_r+0x78>
 8004c00:	68ac      	ldr	r4, [r5, #8]
 8004c02:	e7d0      	b.n	8004ba6 <__swbuf_r+0x1a>
 8004c04:	4b09      	ldr	r3, [pc, #36]	; (8004c2c <__swbuf_r+0xa0>)
 8004c06:	429c      	cmp	r4, r3
 8004c08:	bf08      	it	eq
 8004c0a:	68ec      	ldreq	r4, [r5, #12]
 8004c0c:	e7cb      	b.n	8004ba6 <__swbuf_r+0x1a>
 8004c0e:	4621      	mov	r1, r4
 8004c10:	4628      	mov	r0, r5
 8004c12:	f000 f80d 	bl	8004c30 <__swsetup_r>
 8004c16:	2800      	cmp	r0, #0
 8004c18:	d0cc      	beq.n	8004bb4 <__swbuf_r+0x28>
 8004c1a:	f04f 37ff 	mov.w	r7, #4294967295
 8004c1e:	4638      	mov	r0, r7
 8004c20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c22:	bf00      	nop
 8004c24:	08005680 	.word	0x08005680
 8004c28:	080056a0 	.word	0x080056a0
 8004c2c:	08005660 	.word	0x08005660

08004c30 <__swsetup_r>:
 8004c30:	4b32      	ldr	r3, [pc, #200]	; (8004cfc <__swsetup_r+0xcc>)
 8004c32:	b570      	push	{r4, r5, r6, lr}
 8004c34:	681d      	ldr	r5, [r3, #0]
 8004c36:	4606      	mov	r6, r0
 8004c38:	460c      	mov	r4, r1
 8004c3a:	b125      	cbz	r5, 8004c46 <__swsetup_r+0x16>
 8004c3c:	69ab      	ldr	r3, [r5, #24]
 8004c3e:	b913      	cbnz	r3, 8004c46 <__swsetup_r+0x16>
 8004c40:	4628      	mov	r0, r5
 8004c42:	f000 f955 	bl	8004ef0 <__sinit>
 8004c46:	4b2e      	ldr	r3, [pc, #184]	; (8004d00 <__swsetup_r+0xd0>)
 8004c48:	429c      	cmp	r4, r3
 8004c4a:	d10f      	bne.n	8004c6c <__swsetup_r+0x3c>
 8004c4c:	686c      	ldr	r4, [r5, #4]
 8004c4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c52:	b29a      	uxth	r2, r3
 8004c54:	0715      	lsls	r5, r2, #28
 8004c56:	d42c      	bmi.n	8004cb2 <__swsetup_r+0x82>
 8004c58:	06d0      	lsls	r0, r2, #27
 8004c5a:	d411      	bmi.n	8004c80 <__swsetup_r+0x50>
 8004c5c:	2209      	movs	r2, #9
 8004c5e:	6032      	str	r2, [r6, #0]
 8004c60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c64:	81a3      	strh	r3, [r4, #12]
 8004c66:	f04f 30ff 	mov.w	r0, #4294967295
 8004c6a:	bd70      	pop	{r4, r5, r6, pc}
 8004c6c:	4b25      	ldr	r3, [pc, #148]	; (8004d04 <__swsetup_r+0xd4>)
 8004c6e:	429c      	cmp	r4, r3
 8004c70:	d101      	bne.n	8004c76 <__swsetup_r+0x46>
 8004c72:	68ac      	ldr	r4, [r5, #8]
 8004c74:	e7eb      	b.n	8004c4e <__swsetup_r+0x1e>
 8004c76:	4b24      	ldr	r3, [pc, #144]	; (8004d08 <__swsetup_r+0xd8>)
 8004c78:	429c      	cmp	r4, r3
 8004c7a:	bf08      	it	eq
 8004c7c:	68ec      	ldreq	r4, [r5, #12]
 8004c7e:	e7e6      	b.n	8004c4e <__swsetup_r+0x1e>
 8004c80:	0751      	lsls	r1, r2, #29
 8004c82:	d512      	bpl.n	8004caa <__swsetup_r+0x7a>
 8004c84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c86:	b141      	cbz	r1, 8004c9a <__swsetup_r+0x6a>
 8004c88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c8c:	4299      	cmp	r1, r3
 8004c8e:	d002      	beq.n	8004c96 <__swsetup_r+0x66>
 8004c90:	4630      	mov	r0, r6
 8004c92:	f000 fa23 	bl	80050dc <_free_r>
 8004c96:	2300      	movs	r3, #0
 8004c98:	6363      	str	r3, [r4, #52]	; 0x34
 8004c9a:	89a3      	ldrh	r3, [r4, #12]
 8004c9c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004ca0:	81a3      	strh	r3, [r4, #12]
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	6063      	str	r3, [r4, #4]
 8004ca6:	6923      	ldr	r3, [r4, #16]
 8004ca8:	6023      	str	r3, [r4, #0]
 8004caa:	89a3      	ldrh	r3, [r4, #12]
 8004cac:	f043 0308 	orr.w	r3, r3, #8
 8004cb0:	81a3      	strh	r3, [r4, #12]
 8004cb2:	6923      	ldr	r3, [r4, #16]
 8004cb4:	b94b      	cbnz	r3, 8004cca <__swsetup_r+0x9a>
 8004cb6:	89a3      	ldrh	r3, [r4, #12]
 8004cb8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004cbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cc0:	d003      	beq.n	8004cca <__swsetup_r+0x9a>
 8004cc2:	4621      	mov	r1, r4
 8004cc4:	4630      	mov	r0, r6
 8004cc6:	f000 f9c1 	bl	800504c <__smakebuf_r>
 8004cca:	89a2      	ldrh	r2, [r4, #12]
 8004ccc:	f012 0301 	ands.w	r3, r2, #1
 8004cd0:	d00c      	beq.n	8004cec <__swsetup_r+0xbc>
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	60a3      	str	r3, [r4, #8]
 8004cd6:	6963      	ldr	r3, [r4, #20]
 8004cd8:	425b      	negs	r3, r3
 8004cda:	61a3      	str	r3, [r4, #24]
 8004cdc:	6923      	ldr	r3, [r4, #16]
 8004cde:	b953      	cbnz	r3, 8004cf6 <__swsetup_r+0xc6>
 8004ce0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ce4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004ce8:	d1ba      	bne.n	8004c60 <__swsetup_r+0x30>
 8004cea:	bd70      	pop	{r4, r5, r6, pc}
 8004cec:	0792      	lsls	r2, r2, #30
 8004cee:	bf58      	it	pl
 8004cf0:	6963      	ldrpl	r3, [r4, #20]
 8004cf2:	60a3      	str	r3, [r4, #8]
 8004cf4:	e7f2      	b.n	8004cdc <__swsetup_r+0xac>
 8004cf6:	2000      	movs	r0, #0
 8004cf8:	e7f7      	b.n	8004cea <__swsetup_r+0xba>
 8004cfa:	bf00      	nop
 8004cfc:	20000018 	.word	0x20000018
 8004d00:	08005680 	.word	0x08005680
 8004d04:	080056a0 	.word	0x080056a0
 8004d08:	08005660 	.word	0x08005660

08004d0c <__sflush_r>:
 8004d0c:	898a      	ldrh	r2, [r1, #12]
 8004d0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d12:	4605      	mov	r5, r0
 8004d14:	0710      	lsls	r0, r2, #28
 8004d16:	460c      	mov	r4, r1
 8004d18:	d45a      	bmi.n	8004dd0 <__sflush_r+0xc4>
 8004d1a:	684b      	ldr	r3, [r1, #4]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	dc05      	bgt.n	8004d2c <__sflush_r+0x20>
 8004d20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	dc02      	bgt.n	8004d2c <__sflush_r+0x20>
 8004d26:	2000      	movs	r0, #0
 8004d28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004d2e:	2e00      	cmp	r6, #0
 8004d30:	d0f9      	beq.n	8004d26 <__sflush_r+0x1a>
 8004d32:	2300      	movs	r3, #0
 8004d34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004d38:	682f      	ldr	r7, [r5, #0]
 8004d3a:	602b      	str	r3, [r5, #0]
 8004d3c:	d033      	beq.n	8004da6 <__sflush_r+0x9a>
 8004d3e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004d40:	89a3      	ldrh	r3, [r4, #12]
 8004d42:	075a      	lsls	r2, r3, #29
 8004d44:	d505      	bpl.n	8004d52 <__sflush_r+0x46>
 8004d46:	6863      	ldr	r3, [r4, #4]
 8004d48:	1ac0      	subs	r0, r0, r3
 8004d4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004d4c:	b10b      	cbz	r3, 8004d52 <__sflush_r+0x46>
 8004d4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004d50:	1ac0      	subs	r0, r0, r3
 8004d52:	2300      	movs	r3, #0
 8004d54:	4602      	mov	r2, r0
 8004d56:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004d58:	6a21      	ldr	r1, [r4, #32]
 8004d5a:	4628      	mov	r0, r5
 8004d5c:	47b0      	blx	r6
 8004d5e:	1c43      	adds	r3, r0, #1
 8004d60:	89a3      	ldrh	r3, [r4, #12]
 8004d62:	d106      	bne.n	8004d72 <__sflush_r+0x66>
 8004d64:	6829      	ldr	r1, [r5, #0]
 8004d66:	291d      	cmp	r1, #29
 8004d68:	d84b      	bhi.n	8004e02 <__sflush_r+0xf6>
 8004d6a:	4a2b      	ldr	r2, [pc, #172]	; (8004e18 <__sflush_r+0x10c>)
 8004d6c:	40ca      	lsrs	r2, r1
 8004d6e:	07d6      	lsls	r6, r2, #31
 8004d70:	d547      	bpl.n	8004e02 <__sflush_r+0xf6>
 8004d72:	2200      	movs	r2, #0
 8004d74:	6062      	str	r2, [r4, #4]
 8004d76:	04d9      	lsls	r1, r3, #19
 8004d78:	6922      	ldr	r2, [r4, #16]
 8004d7a:	6022      	str	r2, [r4, #0]
 8004d7c:	d504      	bpl.n	8004d88 <__sflush_r+0x7c>
 8004d7e:	1c42      	adds	r2, r0, #1
 8004d80:	d101      	bne.n	8004d86 <__sflush_r+0x7a>
 8004d82:	682b      	ldr	r3, [r5, #0]
 8004d84:	b903      	cbnz	r3, 8004d88 <__sflush_r+0x7c>
 8004d86:	6560      	str	r0, [r4, #84]	; 0x54
 8004d88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d8a:	602f      	str	r7, [r5, #0]
 8004d8c:	2900      	cmp	r1, #0
 8004d8e:	d0ca      	beq.n	8004d26 <__sflush_r+0x1a>
 8004d90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d94:	4299      	cmp	r1, r3
 8004d96:	d002      	beq.n	8004d9e <__sflush_r+0x92>
 8004d98:	4628      	mov	r0, r5
 8004d9a:	f000 f99f 	bl	80050dc <_free_r>
 8004d9e:	2000      	movs	r0, #0
 8004da0:	6360      	str	r0, [r4, #52]	; 0x34
 8004da2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004da6:	6a21      	ldr	r1, [r4, #32]
 8004da8:	2301      	movs	r3, #1
 8004daa:	4628      	mov	r0, r5
 8004dac:	47b0      	blx	r6
 8004dae:	1c41      	adds	r1, r0, #1
 8004db0:	d1c6      	bne.n	8004d40 <__sflush_r+0x34>
 8004db2:	682b      	ldr	r3, [r5, #0]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d0c3      	beq.n	8004d40 <__sflush_r+0x34>
 8004db8:	2b1d      	cmp	r3, #29
 8004dba:	d001      	beq.n	8004dc0 <__sflush_r+0xb4>
 8004dbc:	2b16      	cmp	r3, #22
 8004dbe:	d101      	bne.n	8004dc4 <__sflush_r+0xb8>
 8004dc0:	602f      	str	r7, [r5, #0]
 8004dc2:	e7b0      	b.n	8004d26 <__sflush_r+0x1a>
 8004dc4:	89a3      	ldrh	r3, [r4, #12]
 8004dc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004dca:	81a3      	strh	r3, [r4, #12]
 8004dcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004dd0:	690f      	ldr	r7, [r1, #16]
 8004dd2:	2f00      	cmp	r7, #0
 8004dd4:	d0a7      	beq.n	8004d26 <__sflush_r+0x1a>
 8004dd6:	0793      	lsls	r3, r2, #30
 8004dd8:	680e      	ldr	r6, [r1, #0]
 8004dda:	bf08      	it	eq
 8004ddc:	694b      	ldreq	r3, [r1, #20]
 8004dde:	600f      	str	r7, [r1, #0]
 8004de0:	bf18      	it	ne
 8004de2:	2300      	movne	r3, #0
 8004de4:	eba6 0807 	sub.w	r8, r6, r7
 8004de8:	608b      	str	r3, [r1, #8]
 8004dea:	f1b8 0f00 	cmp.w	r8, #0
 8004dee:	dd9a      	ble.n	8004d26 <__sflush_r+0x1a>
 8004df0:	4643      	mov	r3, r8
 8004df2:	463a      	mov	r2, r7
 8004df4:	6a21      	ldr	r1, [r4, #32]
 8004df6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004df8:	4628      	mov	r0, r5
 8004dfa:	47b0      	blx	r6
 8004dfc:	2800      	cmp	r0, #0
 8004dfe:	dc07      	bgt.n	8004e10 <__sflush_r+0x104>
 8004e00:	89a3      	ldrh	r3, [r4, #12]
 8004e02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e06:	81a3      	strh	r3, [r4, #12]
 8004e08:	f04f 30ff 	mov.w	r0, #4294967295
 8004e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e10:	4407      	add	r7, r0
 8004e12:	eba8 0800 	sub.w	r8, r8, r0
 8004e16:	e7e8      	b.n	8004dea <__sflush_r+0xde>
 8004e18:	20400001 	.word	0x20400001

08004e1c <_fflush_r>:
 8004e1c:	b538      	push	{r3, r4, r5, lr}
 8004e1e:	690b      	ldr	r3, [r1, #16]
 8004e20:	4605      	mov	r5, r0
 8004e22:	460c      	mov	r4, r1
 8004e24:	b1db      	cbz	r3, 8004e5e <_fflush_r+0x42>
 8004e26:	b118      	cbz	r0, 8004e30 <_fflush_r+0x14>
 8004e28:	6983      	ldr	r3, [r0, #24]
 8004e2a:	b90b      	cbnz	r3, 8004e30 <_fflush_r+0x14>
 8004e2c:	f000 f860 	bl	8004ef0 <__sinit>
 8004e30:	4b0c      	ldr	r3, [pc, #48]	; (8004e64 <_fflush_r+0x48>)
 8004e32:	429c      	cmp	r4, r3
 8004e34:	d109      	bne.n	8004e4a <_fflush_r+0x2e>
 8004e36:	686c      	ldr	r4, [r5, #4]
 8004e38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e3c:	b17b      	cbz	r3, 8004e5e <_fflush_r+0x42>
 8004e3e:	4621      	mov	r1, r4
 8004e40:	4628      	mov	r0, r5
 8004e42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e46:	f7ff bf61 	b.w	8004d0c <__sflush_r>
 8004e4a:	4b07      	ldr	r3, [pc, #28]	; (8004e68 <_fflush_r+0x4c>)
 8004e4c:	429c      	cmp	r4, r3
 8004e4e:	d101      	bne.n	8004e54 <_fflush_r+0x38>
 8004e50:	68ac      	ldr	r4, [r5, #8]
 8004e52:	e7f1      	b.n	8004e38 <_fflush_r+0x1c>
 8004e54:	4b05      	ldr	r3, [pc, #20]	; (8004e6c <_fflush_r+0x50>)
 8004e56:	429c      	cmp	r4, r3
 8004e58:	bf08      	it	eq
 8004e5a:	68ec      	ldreq	r4, [r5, #12]
 8004e5c:	e7ec      	b.n	8004e38 <_fflush_r+0x1c>
 8004e5e:	2000      	movs	r0, #0
 8004e60:	bd38      	pop	{r3, r4, r5, pc}
 8004e62:	bf00      	nop
 8004e64:	08005680 	.word	0x08005680
 8004e68:	080056a0 	.word	0x080056a0
 8004e6c:	08005660 	.word	0x08005660

08004e70 <_cleanup_r>:
 8004e70:	4901      	ldr	r1, [pc, #4]	; (8004e78 <_cleanup_r+0x8>)
 8004e72:	f000 b8a9 	b.w	8004fc8 <_fwalk_reent>
 8004e76:	bf00      	nop
 8004e78:	08004e1d 	.word	0x08004e1d

08004e7c <std.isra.0>:
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	b510      	push	{r4, lr}
 8004e80:	4604      	mov	r4, r0
 8004e82:	6003      	str	r3, [r0, #0]
 8004e84:	6043      	str	r3, [r0, #4]
 8004e86:	6083      	str	r3, [r0, #8]
 8004e88:	8181      	strh	r1, [r0, #12]
 8004e8a:	6643      	str	r3, [r0, #100]	; 0x64
 8004e8c:	81c2      	strh	r2, [r0, #14]
 8004e8e:	6103      	str	r3, [r0, #16]
 8004e90:	6143      	str	r3, [r0, #20]
 8004e92:	6183      	str	r3, [r0, #24]
 8004e94:	4619      	mov	r1, r3
 8004e96:	2208      	movs	r2, #8
 8004e98:	305c      	adds	r0, #92	; 0x5c
 8004e9a:	f7ff fdd0 	bl	8004a3e <memset>
 8004e9e:	4b05      	ldr	r3, [pc, #20]	; (8004eb4 <std.isra.0+0x38>)
 8004ea0:	6263      	str	r3, [r4, #36]	; 0x24
 8004ea2:	4b05      	ldr	r3, [pc, #20]	; (8004eb8 <std.isra.0+0x3c>)
 8004ea4:	62a3      	str	r3, [r4, #40]	; 0x28
 8004ea6:	4b05      	ldr	r3, [pc, #20]	; (8004ebc <std.isra.0+0x40>)
 8004ea8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004eaa:	4b05      	ldr	r3, [pc, #20]	; (8004ec0 <std.isra.0+0x44>)
 8004eac:	6224      	str	r4, [r4, #32]
 8004eae:	6323      	str	r3, [r4, #48]	; 0x30
 8004eb0:	bd10      	pop	{r4, pc}
 8004eb2:	bf00      	nop
 8004eb4:	08005255 	.word	0x08005255
 8004eb8:	08005277 	.word	0x08005277
 8004ebc:	080052af 	.word	0x080052af
 8004ec0:	080052d3 	.word	0x080052d3

08004ec4 <__sfmoreglue>:
 8004ec4:	b570      	push	{r4, r5, r6, lr}
 8004ec6:	1e4a      	subs	r2, r1, #1
 8004ec8:	2568      	movs	r5, #104	; 0x68
 8004eca:	4355      	muls	r5, r2
 8004ecc:	460e      	mov	r6, r1
 8004ece:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004ed2:	f000 f951 	bl	8005178 <_malloc_r>
 8004ed6:	4604      	mov	r4, r0
 8004ed8:	b140      	cbz	r0, 8004eec <__sfmoreglue+0x28>
 8004eda:	2100      	movs	r1, #0
 8004edc:	e880 0042 	stmia.w	r0, {r1, r6}
 8004ee0:	300c      	adds	r0, #12
 8004ee2:	60a0      	str	r0, [r4, #8]
 8004ee4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004ee8:	f7ff fda9 	bl	8004a3e <memset>
 8004eec:	4620      	mov	r0, r4
 8004eee:	bd70      	pop	{r4, r5, r6, pc}

08004ef0 <__sinit>:
 8004ef0:	6983      	ldr	r3, [r0, #24]
 8004ef2:	b510      	push	{r4, lr}
 8004ef4:	4604      	mov	r4, r0
 8004ef6:	bb33      	cbnz	r3, 8004f46 <__sinit+0x56>
 8004ef8:	6483      	str	r3, [r0, #72]	; 0x48
 8004efa:	64c3      	str	r3, [r0, #76]	; 0x4c
 8004efc:	6503      	str	r3, [r0, #80]	; 0x50
 8004efe:	4b12      	ldr	r3, [pc, #72]	; (8004f48 <__sinit+0x58>)
 8004f00:	4a12      	ldr	r2, [pc, #72]	; (8004f4c <__sinit+0x5c>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	6282      	str	r2, [r0, #40]	; 0x28
 8004f06:	4298      	cmp	r0, r3
 8004f08:	bf04      	itt	eq
 8004f0a:	2301      	moveq	r3, #1
 8004f0c:	6183      	streq	r3, [r0, #24]
 8004f0e:	f000 f81f 	bl	8004f50 <__sfp>
 8004f12:	6060      	str	r0, [r4, #4]
 8004f14:	4620      	mov	r0, r4
 8004f16:	f000 f81b 	bl	8004f50 <__sfp>
 8004f1a:	60a0      	str	r0, [r4, #8]
 8004f1c:	4620      	mov	r0, r4
 8004f1e:	f000 f817 	bl	8004f50 <__sfp>
 8004f22:	2200      	movs	r2, #0
 8004f24:	60e0      	str	r0, [r4, #12]
 8004f26:	2104      	movs	r1, #4
 8004f28:	6860      	ldr	r0, [r4, #4]
 8004f2a:	f7ff ffa7 	bl	8004e7c <std.isra.0>
 8004f2e:	2201      	movs	r2, #1
 8004f30:	2109      	movs	r1, #9
 8004f32:	68a0      	ldr	r0, [r4, #8]
 8004f34:	f7ff ffa2 	bl	8004e7c <std.isra.0>
 8004f38:	2202      	movs	r2, #2
 8004f3a:	2112      	movs	r1, #18
 8004f3c:	68e0      	ldr	r0, [r4, #12]
 8004f3e:	f7ff ff9d 	bl	8004e7c <std.isra.0>
 8004f42:	2301      	movs	r3, #1
 8004f44:	61a3      	str	r3, [r4, #24]
 8004f46:	bd10      	pop	{r4, pc}
 8004f48:	080056c0 	.word	0x080056c0
 8004f4c:	08004e71 	.word	0x08004e71

08004f50 <__sfp>:
 8004f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f52:	4b1c      	ldr	r3, [pc, #112]	; (8004fc4 <__sfp+0x74>)
 8004f54:	681e      	ldr	r6, [r3, #0]
 8004f56:	69b3      	ldr	r3, [r6, #24]
 8004f58:	4607      	mov	r7, r0
 8004f5a:	b913      	cbnz	r3, 8004f62 <__sfp+0x12>
 8004f5c:	4630      	mov	r0, r6
 8004f5e:	f7ff ffc7 	bl	8004ef0 <__sinit>
 8004f62:	3648      	adds	r6, #72	; 0x48
 8004f64:	68b4      	ldr	r4, [r6, #8]
 8004f66:	6873      	ldr	r3, [r6, #4]
 8004f68:	3b01      	subs	r3, #1
 8004f6a:	d503      	bpl.n	8004f74 <__sfp+0x24>
 8004f6c:	6833      	ldr	r3, [r6, #0]
 8004f6e:	b133      	cbz	r3, 8004f7e <__sfp+0x2e>
 8004f70:	6836      	ldr	r6, [r6, #0]
 8004f72:	e7f7      	b.n	8004f64 <__sfp+0x14>
 8004f74:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004f78:	b16d      	cbz	r5, 8004f96 <__sfp+0x46>
 8004f7a:	3468      	adds	r4, #104	; 0x68
 8004f7c:	e7f4      	b.n	8004f68 <__sfp+0x18>
 8004f7e:	2104      	movs	r1, #4
 8004f80:	4638      	mov	r0, r7
 8004f82:	f7ff ff9f 	bl	8004ec4 <__sfmoreglue>
 8004f86:	6030      	str	r0, [r6, #0]
 8004f88:	2800      	cmp	r0, #0
 8004f8a:	d1f1      	bne.n	8004f70 <__sfp+0x20>
 8004f8c:	230c      	movs	r3, #12
 8004f8e:	603b      	str	r3, [r7, #0]
 8004f90:	4604      	mov	r4, r0
 8004f92:	4620      	mov	r0, r4
 8004f94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004f9a:	81e3      	strh	r3, [r4, #14]
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	81a3      	strh	r3, [r4, #12]
 8004fa0:	6665      	str	r5, [r4, #100]	; 0x64
 8004fa2:	6025      	str	r5, [r4, #0]
 8004fa4:	60a5      	str	r5, [r4, #8]
 8004fa6:	6065      	str	r5, [r4, #4]
 8004fa8:	6125      	str	r5, [r4, #16]
 8004faa:	6165      	str	r5, [r4, #20]
 8004fac:	61a5      	str	r5, [r4, #24]
 8004fae:	2208      	movs	r2, #8
 8004fb0:	4629      	mov	r1, r5
 8004fb2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004fb6:	f7ff fd42 	bl	8004a3e <memset>
 8004fba:	6365      	str	r5, [r4, #52]	; 0x34
 8004fbc:	63a5      	str	r5, [r4, #56]	; 0x38
 8004fbe:	64a5      	str	r5, [r4, #72]	; 0x48
 8004fc0:	64e5      	str	r5, [r4, #76]	; 0x4c
 8004fc2:	e7e6      	b.n	8004f92 <__sfp+0x42>
 8004fc4:	080056c0 	.word	0x080056c0

08004fc8 <_fwalk_reent>:
 8004fc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fcc:	4680      	mov	r8, r0
 8004fce:	4689      	mov	r9, r1
 8004fd0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004fd4:	2600      	movs	r6, #0
 8004fd6:	b914      	cbnz	r4, 8004fde <_fwalk_reent+0x16>
 8004fd8:	4630      	mov	r0, r6
 8004fda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004fde:	68a5      	ldr	r5, [r4, #8]
 8004fe0:	6867      	ldr	r7, [r4, #4]
 8004fe2:	3f01      	subs	r7, #1
 8004fe4:	d501      	bpl.n	8004fea <_fwalk_reent+0x22>
 8004fe6:	6824      	ldr	r4, [r4, #0]
 8004fe8:	e7f5      	b.n	8004fd6 <_fwalk_reent+0xe>
 8004fea:	89ab      	ldrh	r3, [r5, #12]
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d907      	bls.n	8005000 <_fwalk_reent+0x38>
 8004ff0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004ff4:	3301      	adds	r3, #1
 8004ff6:	d003      	beq.n	8005000 <_fwalk_reent+0x38>
 8004ff8:	4629      	mov	r1, r5
 8004ffa:	4640      	mov	r0, r8
 8004ffc:	47c8      	blx	r9
 8004ffe:	4306      	orrs	r6, r0
 8005000:	3568      	adds	r5, #104	; 0x68
 8005002:	e7ee      	b.n	8004fe2 <_fwalk_reent+0x1a>

08005004 <__swhatbuf_r>:
 8005004:	b570      	push	{r4, r5, r6, lr}
 8005006:	460e      	mov	r6, r1
 8005008:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800500c:	2900      	cmp	r1, #0
 800500e:	b090      	sub	sp, #64	; 0x40
 8005010:	4614      	mov	r4, r2
 8005012:	461d      	mov	r5, r3
 8005014:	da07      	bge.n	8005026 <__swhatbuf_r+0x22>
 8005016:	2300      	movs	r3, #0
 8005018:	602b      	str	r3, [r5, #0]
 800501a:	89b3      	ldrh	r3, [r6, #12]
 800501c:	061a      	lsls	r2, r3, #24
 800501e:	d410      	bmi.n	8005042 <__swhatbuf_r+0x3e>
 8005020:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005024:	e00e      	b.n	8005044 <__swhatbuf_r+0x40>
 8005026:	aa01      	add	r2, sp, #4
 8005028:	f000 f97a 	bl	8005320 <_fstat_r>
 800502c:	2800      	cmp	r0, #0
 800502e:	dbf2      	blt.n	8005016 <__swhatbuf_r+0x12>
 8005030:	9a02      	ldr	r2, [sp, #8]
 8005032:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005036:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800503a:	425a      	negs	r2, r3
 800503c:	415a      	adcs	r2, r3
 800503e:	602a      	str	r2, [r5, #0]
 8005040:	e7ee      	b.n	8005020 <__swhatbuf_r+0x1c>
 8005042:	2340      	movs	r3, #64	; 0x40
 8005044:	2000      	movs	r0, #0
 8005046:	6023      	str	r3, [r4, #0]
 8005048:	b010      	add	sp, #64	; 0x40
 800504a:	bd70      	pop	{r4, r5, r6, pc}

0800504c <__smakebuf_r>:
 800504c:	898b      	ldrh	r3, [r1, #12]
 800504e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005050:	079d      	lsls	r5, r3, #30
 8005052:	4606      	mov	r6, r0
 8005054:	460c      	mov	r4, r1
 8005056:	d507      	bpl.n	8005068 <__smakebuf_r+0x1c>
 8005058:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800505c:	6023      	str	r3, [r4, #0]
 800505e:	6123      	str	r3, [r4, #16]
 8005060:	2301      	movs	r3, #1
 8005062:	6163      	str	r3, [r4, #20]
 8005064:	b002      	add	sp, #8
 8005066:	bd70      	pop	{r4, r5, r6, pc}
 8005068:	ab01      	add	r3, sp, #4
 800506a:	466a      	mov	r2, sp
 800506c:	f7ff ffca 	bl	8005004 <__swhatbuf_r>
 8005070:	9900      	ldr	r1, [sp, #0]
 8005072:	4605      	mov	r5, r0
 8005074:	4630      	mov	r0, r6
 8005076:	f000 f87f 	bl	8005178 <_malloc_r>
 800507a:	b948      	cbnz	r0, 8005090 <__smakebuf_r+0x44>
 800507c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005080:	059a      	lsls	r2, r3, #22
 8005082:	d4ef      	bmi.n	8005064 <__smakebuf_r+0x18>
 8005084:	f023 0303 	bic.w	r3, r3, #3
 8005088:	f043 0302 	orr.w	r3, r3, #2
 800508c:	81a3      	strh	r3, [r4, #12]
 800508e:	e7e3      	b.n	8005058 <__smakebuf_r+0xc>
 8005090:	4b0d      	ldr	r3, [pc, #52]	; (80050c8 <__smakebuf_r+0x7c>)
 8005092:	62b3      	str	r3, [r6, #40]	; 0x28
 8005094:	89a3      	ldrh	r3, [r4, #12]
 8005096:	6020      	str	r0, [r4, #0]
 8005098:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800509c:	81a3      	strh	r3, [r4, #12]
 800509e:	9b00      	ldr	r3, [sp, #0]
 80050a0:	6163      	str	r3, [r4, #20]
 80050a2:	9b01      	ldr	r3, [sp, #4]
 80050a4:	6120      	str	r0, [r4, #16]
 80050a6:	b15b      	cbz	r3, 80050c0 <__smakebuf_r+0x74>
 80050a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80050ac:	4630      	mov	r0, r6
 80050ae:	f000 f949 	bl	8005344 <_isatty_r>
 80050b2:	b128      	cbz	r0, 80050c0 <__smakebuf_r+0x74>
 80050b4:	89a3      	ldrh	r3, [r4, #12]
 80050b6:	f023 0303 	bic.w	r3, r3, #3
 80050ba:	f043 0301 	orr.w	r3, r3, #1
 80050be:	81a3      	strh	r3, [r4, #12]
 80050c0:	89a3      	ldrh	r3, [r4, #12]
 80050c2:	431d      	orrs	r5, r3
 80050c4:	81a5      	strh	r5, [r4, #12]
 80050c6:	e7cd      	b.n	8005064 <__smakebuf_r+0x18>
 80050c8:	08004e71 	.word	0x08004e71

080050cc <malloc>:
 80050cc:	4b02      	ldr	r3, [pc, #8]	; (80050d8 <malloc+0xc>)
 80050ce:	4601      	mov	r1, r0
 80050d0:	6818      	ldr	r0, [r3, #0]
 80050d2:	f000 b851 	b.w	8005178 <_malloc_r>
 80050d6:	bf00      	nop
 80050d8:	20000018 	.word	0x20000018

080050dc <_free_r>:
 80050dc:	b538      	push	{r3, r4, r5, lr}
 80050de:	4605      	mov	r5, r0
 80050e0:	2900      	cmp	r1, #0
 80050e2:	d045      	beq.n	8005170 <_free_r+0x94>
 80050e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050e8:	1f0c      	subs	r4, r1, #4
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	bfb8      	it	lt
 80050ee:	18e4      	addlt	r4, r4, r3
 80050f0:	f000 f94a 	bl	8005388 <__malloc_lock>
 80050f4:	4a1f      	ldr	r2, [pc, #124]	; (8005174 <_free_r+0x98>)
 80050f6:	6813      	ldr	r3, [r2, #0]
 80050f8:	4610      	mov	r0, r2
 80050fa:	b933      	cbnz	r3, 800510a <_free_r+0x2e>
 80050fc:	6063      	str	r3, [r4, #4]
 80050fe:	6014      	str	r4, [r2, #0]
 8005100:	4628      	mov	r0, r5
 8005102:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005106:	f000 b940 	b.w	800538a <__malloc_unlock>
 800510a:	42a3      	cmp	r3, r4
 800510c:	d90c      	bls.n	8005128 <_free_r+0x4c>
 800510e:	6821      	ldr	r1, [r4, #0]
 8005110:	1862      	adds	r2, r4, r1
 8005112:	4293      	cmp	r3, r2
 8005114:	bf04      	itt	eq
 8005116:	681a      	ldreq	r2, [r3, #0]
 8005118:	685b      	ldreq	r3, [r3, #4]
 800511a:	6063      	str	r3, [r4, #4]
 800511c:	bf04      	itt	eq
 800511e:	1852      	addeq	r2, r2, r1
 8005120:	6022      	streq	r2, [r4, #0]
 8005122:	6004      	str	r4, [r0, #0]
 8005124:	e7ec      	b.n	8005100 <_free_r+0x24>
 8005126:	4613      	mov	r3, r2
 8005128:	685a      	ldr	r2, [r3, #4]
 800512a:	b10a      	cbz	r2, 8005130 <_free_r+0x54>
 800512c:	42a2      	cmp	r2, r4
 800512e:	d9fa      	bls.n	8005126 <_free_r+0x4a>
 8005130:	6819      	ldr	r1, [r3, #0]
 8005132:	1858      	adds	r0, r3, r1
 8005134:	42a0      	cmp	r0, r4
 8005136:	d10b      	bne.n	8005150 <_free_r+0x74>
 8005138:	6820      	ldr	r0, [r4, #0]
 800513a:	4401      	add	r1, r0
 800513c:	1858      	adds	r0, r3, r1
 800513e:	4282      	cmp	r2, r0
 8005140:	6019      	str	r1, [r3, #0]
 8005142:	d1dd      	bne.n	8005100 <_free_r+0x24>
 8005144:	6810      	ldr	r0, [r2, #0]
 8005146:	6852      	ldr	r2, [r2, #4]
 8005148:	605a      	str	r2, [r3, #4]
 800514a:	4401      	add	r1, r0
 800514c:	6019      	str	r1, [r3, #0]
 800514e:	e7d7      	b.n	8005100 <_free_r+0x24>
 8005150:	d902      	bls.n	8005158 <_free_r+0x7c>
 8005152:	230c      	movs	r3, #12
 8005154:	602b      	str	r3, [r5, #0]
 8005156:	e7d3      	b.n	8005100 <_free_r+0x24>
 8005158:	6820      	ldr	r0, [r4, #0]
 800515a:	1821      	adds	r1, r4, r0
 800515c:	428a      	cmp	r2, r1
 800515e:	bf04      	itt	eq
 8005160:	6811      	ldreq	r1, [r2, #0]
 8005162:	6852      	ldreq	r2, [r2, #4]
 8005164:	6062      	str	r2, [r4, #4]
 8005166:	bf04      	itt	eq
 8005168:	1809      	addeq	r1, r1, r0
 800516a:	6021      	streq	r1, [r4, #0]
 800516c:	605c      	str	r4, [r3, #4]
 800516e:	e7c7      	b.n	8005100 <_free_r+0x24>
 8005170:	bd38      	pop	{r3, r4, r5, pc}
 8005172:	bf00      	nop
 8005174:	20001e04 	.word	0x20001e04

08005178 <_malloc_r>:
 8005178:	b570      	push	{r4, r5, r6, lr}
 800517a:	1ccd      	adds	r5, r1, #3
 800517c:	f025 0503 	bic.w	r5, r5, #3
 8005180:	3508      	adds	r5, #8
 8005182:	2d0c      	cmp	r5, #12
 8005184:	bf38      	it	cc
 8005186:	250c      	movcc	r5, #12
 8005188:	2d00      	cmp	r5, #0
 800518a:	4606      	mov	r6, r0
 800518c:	db01      	blt.n	8005192 <_malloc_r+0x1a>
 800518e:	42a9      	cmp	r1, r5
 8005190:	d903      	bls.n	800519a <_malloc_r+0x22>
 8005192:	230c      	movs	r3, #12
 8005194:	6033      	str	r3, [r6, #0]
 8005196:	2000      	movs	r0, #0
 8005198:	bd70      	pop	{r4, r5, r6, pc}
 800519a:	f000 f8f5 	bl	8005388 <__malloc_lock>
 800519e:	4a23      	ldr	r2, [pc, #140]	; (800522c <_malloc_r+0xb4>)
 80051a0:	6814      	ldr	r4, [r2, #0]
 80051a2:	4621      	mov	r1, r4
 80051a4:	b991      	cbnz	r1, 80051cc <_malloc_r+0x54>
 80051a6:	4c22      	ldr	r4, [pc, #136]	; (8005230 <_malloc_r+0xb8>)
 80051a8:	6823      	ldr	r3, [r4, #0]
 80051aa:	b91b      	cbnz	r3, 80051b4 <_malloc_r+0x3c>
 80051ac:	4630      	mov	r0, r6
 80051ae:	f000 f841 	bl	8005234 <_sbrk_r>
 80051b2:	6020      	str	r0, [r4, #0]
 80051b4:	4629      	mov	r1, r5
 80051b6:	4630      	mov	r0, r6
 80051b8:	f000 f83c 	bl	8005234 <_sbrk_r>
 80051bc:	1c43      	adds	r3, r0, #1
 80051be:	d126      	bne.n	800520e <_malloc_r+0x96>
 80051c0:	230c      	movs	r3, #12
 80051c2:	6033      	str	r3, [r6, #0]
 80051c4:	4630      	mov	r0, r6
 80051c6:	f000 f8e0 	bl	800538a <__malloc_unlock>
 80051ca:	e7e4      	b.n	8005196 <_malloc_r+0x1e>
 80051cc:	680b      	ldr	r3, [r1, #0]
 80051ce:	1b5b      	subs	r3, r3, r5
 80051d0:	d41a      	bmi.n	8005208 <_malloc_r+0x90>
 80051d2:	2b0b      	cmp	r3, #11
 80051d4:	d90f      	bls.n	80051f6 <_malloc_r+0x7e>
 80051d6:	600b      	str	r3, [r1, #0]
 80051d8:	50cd      	str	r5, [r1, r3]
 80051da:	18cc      	adds	r4, r1, r3
 80051dc:	4630      	mov	r0, r6
 80051de:	f000 f8d4 	bl	800538a <__malloc_unlock>
 80051e2:	f104 000b 	add.w	r0, r4, #11
 80051e6:	1d23      	adds	r3, r4, #4
 80051e8:	f020 0007 	bic.w	r0, r0, #7
 80051ec:	1ac3      	subs	r3, r0, r3
 80051ee:	d01b      	beq.n	8005228 <_malloc_r+0xb0>
 80051f0:	425a      	negs	r2, r3
 80051f2:	50e2      	str	r2, [r4, r3]
 80051f4:	bd70      	pop	{r4, r5, r6, pc}
 80051f6:	428c      	cmp	r4, r1
 80051f8:	bf0d      	iteet	eq
 80051fa:	6863      	ldreq	r3, [r4, #4]
 80051fc:	684b      	ldrne	r3, [r1, #4]
 80051fe:	6063      	strne	r3, [r4, #4]
 8005200:	6013      	streq	r3, [r2, #0]
 8005202:	bf18      	it	ne
 8005204:	460c      	movne	r4, r1
 8005206:	e7e9      	b.n	80051dc <_malloc_r+0x64>
 8005208:	460c      	mov	r4, r1
 800520a:	6849      	ldr	r1, [r1, #4]
 800520c:	e7ca      	b.n	80051a4 <_malloc_r+0x2c>
 800520e:	1cc4      	adds	r4, r0, #3
 8005210:	f024 0403 	bic.w	r4, r4, #3
 8005214:	42a0      	cmp	r0, r4
 8005216:	d005      	beq.n	8005224 <_malloc_r+0xac>
 8005218:	1a21      	subs	r1, r4, r0
 800521a:	4630      	mov	r0, r6
 800521c:	f000 f80a 	bl	8005234 <_sbrk_r>
 8005220:	3001      	adds	r0, #1
 8005222:	d0cd      	beq.n	80051c0 <_malloc_r+0x48>
 8005224:	6025      	str	r5, [r4, #0]
 8005226:	e7d9      	b.n	80051dc <_malloc_r+0x64>
 8005228:	bd70      	pop	{r4, r5, r6, pc}
 800522a:	bf00      	nop
 800522c:	20001e04 	.word	0x20001e04
 8005230:	20001e08 	.word	0x20001e08

08005234 <_sbrk_r>:
 8005234:	b538      	push	{r3, r4, r5, lr}
 8005236:	4c06      	ldr	r4, [pc, #24]	; (8005250 <_sbrk_r+0x1c>)
 8005238:	2300      	movs	r3, #0
 800523a:	4605      	mov	r5, r0
 800523c:	4608      	mov	r0, r1
 800523e:	6023      	str	r3, [r4, #0]
 8005240:	f7ff f85a 	bl	80042f8 <_sbrk>
 8005244:	1c43      	adds	r3, r0, #1
 8005246:	d102      	bne.n	800524e <_sbrk_r+0x1a>
 8005248:	6823      	ldr	r3, [r4, #0]
 800524a:	b103      	cbz	r3, 800524e <_sbrk_r+0x1a>
 800524c:	602b      	str	r3, [r5, #0]
 800524e:	bd38      	pop	{r3, r4, r5, pc}
 8005250:	20001eec 	.word	0x20001eec

08005254 <__sread>:
 8005254:	b510      	push	{r4, lr}
 8005256:	460c      	mov	r4, r1
 8005258:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800525c:	f000 f896 	bl	800538c <_read_r>
 8005260:	2800      	cmp	r0, #0
 8005262:	bfab      	itete	ge
 8005264:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005266:	89a3      	ldrhlt	r3, [r4, #12]
 8005268:	181b      	addge	r3, r3, r0
 800526a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800526e:	bfac      	ite	ge
 8005270:	6563      	strge	r3, [r4, #84]	; 0x54
 8005272:	81a3      	strhlt	r3, [r4, #12]
 8005274:	bd10      	pop	{r4, pc}

08005276 <__swrite>:
 8005276:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800527a:	461f      	mov	r7, r3
 800527c:	898b      	ldrh	r3, [r1, #12]
 800527e:	05db      	lsls	r3, r3, #23
 8005280:	4605      	mov	r5, r0
 8005282:	460c      	mov	r4, r1
 8005284:	4616      	mov	r6, r2
 8005286:	d505      	bpl.n	8005294 <__swrite+0x1e>
 8005288:	2302      	movs	r3, #2
 800528a:	2200      	movs	r2, #0
 800528c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005290:	f000 f868 	bl	8005364 <_lseek_r>
 8005294:	89a3      	ldrh	r3, [r4, #12]
 8005296:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800529a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800529e:	81a3      	strh	r3, [r4, #12]
 80052a0:	4632      	mov	r2, r6
 80052a2:	463b      	mov	r3, r7
 80052a4:	4628      	mov	r0, r5
 80052a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80052aa:	f000 b817 	b.w	80052dc <_write_r>

080052ae <__sseek>:
 80052ae:	b510      	push	{r4, lr}
 80052b0:	460c      	mov	r4, r1
 80052b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052b6:	f000 f855 	bl	8005364 <_lseek_r>
 80052ba:	1c43      	adds	r3, r0, #1
 80052bc:	89a3      	ldrh	r3, [r4, #12]
 80052be:	bf15      	itete	ne
 80052c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80052c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80052c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80052ca:	81a3      	strheq	r3, [r4, #12]
 80052cc:	bf18      	it	ne
 80052ce:	81a3      	strhne	r3, [r4, #12]
 80052d0:	bd10      	pop	{r4, pc}

080052d2 <__sclose>:
 80052d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052d6:	f000 b813 	b.w	8005300 <_close_r>
	...

080052dc <_write_r>:
 80052dc:	b538      	push	{r3, r4, r5, lr}
 80052de:	4c07      	ldr	r4, [pc, #28]	; (80052fc <_write_r+0x20>)
 80052e0:	4605      	mov	r5, r0
 80052e2:	4608      	mov	r0, r1
 80052e4:	4611      	mov	r1, r2
 80052e6:	2200      	movs	r2, #0
 80052e8:	6022      	str	r2, [r4, #0]
 80052ea:	461a      	mov	r2, r3
 80052ec:	f7fe ffe6 	bl	80042bc <_write>
 80052f0:	1c43      	adds	r3, r0, #1
 80052f2:	d102      	bne.n	80052fa <_write_r+0x1e>
 80052f4:	6823      	ldr	r3, [r4, #0]
 80052f6:	b103      	cbz	r3, 80052fa <_write_r+0x1e>
 80052f8:	602b      	str	r3, [r5, #0]
 80052fa:	bd38      	pop	{r3, r4, r5, pc}
 80052fc:	20001eec 	.word	0x20001eec

08005300 <_close_r>:
 8005300:	b538      	push	{r3, r4, r5, lr}
 8005302:	4c06      	ldr	r4, [pc, #24]	; (800531c <_close_r+0x1c>)
 8005304:	2300      	movs	r3, #0
 8005306:	4605      	mov	r5, r0
 8005308:	4608      	mov	r0, r1
 800530a:	6023      	str	r3, [r4, #0]
 800530c:	f7ff f814 	bl	8004338 <_close>
 8005310:	1c43      	adds	r3, r0, #1
 8005312:	d102      	bne.n	800531a <_close_r+0x1a>
 8005314:	6823      	ldr	r3, [r4, #0]
 8005316:	b103      	cbz	r3, 800531a <_close_r+0x1a>
 8005318:	602b      	str	r3, [r5, #0]
 800531a:	bd38      	pop	{r3, r4, r5, pc}
 800531c:	20001eec 	.word	0x20001eec

08005320 <_fstat_r>:
 8005320:	b538      	push	{r3, r4, r5, lr}
 8005322:	4c07      	ldr	r4, [pc, #28]	; (8005340 <_fstat_r+0x20>)
 8005324:	2300      	movs	r3, #0
 8005326:	4605      	mov	r5, r0
 8005328:	4608      	mov	r0, r1
 800532a:	4611      	mov	r1, r2
 800532c:	6023      	str	r3, [r4, #0]
 800532e:	f7ff f815 	bl	800435c <_fstat>
 8005332:	1c43      	adds	r3, r0, #1
 8005334:	d102      	bne.n	800533c <_fstat_r+0x1c>
 8005336:	6823      	ldr	r3, [r4, #0]
 8005338:	b103      	cbz	r3, 800533c <_fstat_r+0x1c>
 800533a:	602b      	str	r3, [r5, #0]
 800533c:	bd38      	pop	{r3, r4, r5, pc}
 800533e:	bf00      	nop
 8005340:	20001eec 	.word	0x20001eec

08005344 <_isatty_r>:
 8005344:	b538      	push	{r3, r4, r5, lr}
 8005346:	4c06      	ldr	r4, [pc, #24]	; (8005360 <_isatty_r+0x1c>)
 8005348:	2300      	movs	r3, #0
 800534a:	4605      	mov	r5, r0
 800534c:	4608      	mov	r0, r1
 800534e:	6023      	str	r3, [r4, #0]
 8005350:	f7ff f816 	bl	8004380 <_isatty>
 8005354:	1c43      	adds	r3, r0, #1
 8005356:	d102      	bne.n	800535e <_isatty_r+0x1a>
 8005358:	6823      	ldr	r3, [r4, #0]
 800535a:	b103      	cbz	r3, 800535e <_isatty_r+0x1a>
 800535c:	602b      	str	r3, [r5, #0]
 800535e:	bd38      	pop	{r3, r4, r5, pc}
 8005360:	20001eec 	.word	0x20001eec

08005364 <_lseek_r>:
 8005364:	b538      	push	{r3, r4, r5, lr}
 8005366:	4c07      	ldr	r4, [pc, #28]	; (8005384 <_lseek_r+0x20>)
 8005368:	4605      	mov	r5, r0
 800536a:	4608      	mov	r0, r1
 800536c:	4611      	mov	r1, r2
 800536e:	2200      	movs	r2, #0
 8005370:	6022      	str	r2, [r4, #0]
 8005372:	461a      	mov	r2, r3
 8005374:	f7ff f814 	bl	80043a0 <_lseek>
 8005378:	1c43      	adds	r3, r0, #1
 800537a:	d102      	bne.n	8005382 <_lseek_r+0x1e>
 800537c:	6823      	ldr	r3, [r4, #0]
 800537e:	b103      	cbz	r3, 8005382 <_lseek_r+0x1e>
 8005380:	602b      	str	r3, [r5, #0]
 8005382:	bd38      	pop	{r3, r4, r5, pc}
 8005384:	20001eec 	.word	0x20001eec

08005388 <__malloc_lock>:
 8005388:	4770      	bx	lr

0800538a <__malloc_unlock>:
 800538a:	4770      	bx	lr

0800538c <_read_r>:
 800538c:	b538      	push	{r3, r4, r5, lr}
 800538e:	4c07      	ldr	r4, [pc, #28]	; (80053ac <_read_r+0x20>)
 8005390:	4605      	mov	r5, r0
 8005392:	4608      	mov	r0, r1
 8005394:	4611      	mov	r1, r2
 8005396:	2200      	movs	r2, #0
 8005398:	6022      	str	r2, [r4, #0]
 800539a:	461a      	mov	r2, r3
 800539c:	f7ff f814 	bl	80043c8 <_read>
 80053a0:	1c43      	adds	r3, r0, #1
 80053a2:	d102      	bne.n	80053aa <_read_r+0x1e>
 80053a4:	6823      	ldr	r3, [r4, #0]
 80053a6:	b103      	cbz	r3, 80053aa <_read_r+0x1e>
 80053a8:	602b      	str	r3, [r5, #0]
 80053aa:	bd38      	pop	{r3, r4, r5, pc}
 80053ac:	20001eec 	.word	0x20001eec
 80053b0:	454c4449 	.word	0x454c4449
 80053b4:	00000000 	.word	0x00000000
 80053b8:	20726d54 	.word	0x20726d54
 80053bc:	00637653 	.word	0x00637653
 80053c0:	51726d54 	.word	0x51726d54
 80053c4:	00000000 	.word	0x00000000
 80053c8:	45455247 	.word	0x45455247
 80053cc:	694c204e 	.word	0x694c204e
 80053d0:	20746867 	.word	0x20746867
 80053d4:	2c46464f 	.word	0x2c46464f
 80053d8:	424d4120 	.word	0x424d4120
 80053dc:	6c205245 	.word	0x6c205245
 80053e0:	74686769 	.word	0x74686769
 80053e4:	006e4f20 	.word	0x006e4f20
 80053e8:	4c4c4559 	.word	0x4c4c4559
 80053ec:	4c20574f 	.word	0x4c20574f
 80053f0:	74686769 	.word	0x74686769
 80053f4:	46464f20 	.word	0x46464f20
 80053f8:	4552202c 	.word	0x4552202c
 80053fc:	696c2044 	.word	0x696c2044
 8005400:	20746867 	.word	0x20746867
 8005404:	00006e4f 	.word	0x00006e4f
 8005408:	20444552 	.word	0x20444552
 800540c:	6867694c 	.word	0x6867694c
 8005410:	464f2074 	.word	0x464f2074
 8005414:	47202c46 	.word	0x47202c46
 8005418:	4e454552 	.word	0x4e454552
 800541c:	67696c20 	.word	0x67696c20
 8005420:	4f207468 	.word	0x4f207468
 8005424:	0000006e 	.word	0x0000006e
 8005428:	4d4d4f43 	.word	0x4d4d4f43
 800542c:	49434e45 	.word	0x49434e45
 8005430:	5420474e 	.word	0x5420474e
 8005434:	46464152 	.word	0x46464152
 8005438:	46204349 	.word	0x46204349
 800543c:	20574f4c 	.word	0x20574f4c
 8005440:	4b534154 	.word	0x4b534154
 8005444:	00000000 	.word	0x00000000
 8005448:	776f6c46 	.word	0x776f6c46
 800544c:	61725420 	.word	0x61725420
 8005450:	7469736e 	.word	0x7469736e
 8005454:	206e6f69 	.word	0x206e6f69
 8005458:	7525203d 	.word	0x7525203d
 800545c:	7254202c 	.word	0x7254202c
 8005460:	69666661 	.word	0x69666661
 8005464:	6c462063 	.word	0x6c462063
 8005468:	3d20776f 	.word	0x3d20776f
 800546c:	20752520 	.word	0x20752520
 8005470:	0000200a 	.word	0x0000200a
 8005474:	4d4d4f43 	.word	0x4d4d4f43
 8005478:	49434e45 	.word	0x49434e45
 800547c:	5420474e 	.word	0x5420474e
 8005480:	46464152 	.word	0x46464152
 8005484:	47204349 	.word	0x47204349
 8005488:	52454e45 	.word	0x52454e45
 800548c:	524f5441 	.word	0x524f5441
 8005490:	53415420 	.word	0x53415420
 8005494:	0000204b 	.word	0x0000204b
 8005498:	6867694c 	.word	0x6867694c
 800549c:	61532074 	.word	0x61532074
 80054a0:	20737574 	.word	0x20737574
 80054a4:	7525203d 	.word	0x7525203d
 80054a8:	0000000a 	.word	0x0000000a
 80054ac:	6f6c4620 	.word	0x6f6c4620
 80054b0:	61442077 	.word	0x61442077
 80054b4:	20206174 	.word	0x20206174
 80054b8:	2520203a 	.word	0x2520203a
 80054bc:	200a2075 	.word	0x200a2075
 80054c0:	00000000 	.word	0x00000000
 80054c4:	657a6953 	.word	0x657a6953
 80054c8:	20666f20 	.word	0x20666f20
 80054cc:	20524143 	.word	0x20524143
 80054d0:	20525241 	.word	0x20525241
 80054d4:	7525203d 	.word	0x7525203d
 80054d8:	00000a20 	.word	0x00000a20
 80054dc:	77654e20 	.word	0x77654e20
 80054e0:	46726143 	.word	0x46726143
 80054e4:	2067616c 	.word	0x2067616c
 80054e8:	2520203a 	.word	0x2520203a
 80054ec:	200a2075 	.word	0x200a2075
 80054f0:	00000000 	.word	0x00000000
 80054f4:	4d4d4f43 	.word	0x4d4d4f43
 80054f8:	49434e45 	.word	0x49434e45
 80054fc:	4c20474e 	.word	0x4c20474e
 8005500:	54484749 	.word	0x54484749
 8005504:	41545320 	.word	0x41545320
 8005508:	54204554 	.word	0x54204554
 800550c:	004b5341 	.word	0x004b5341
 8005510:	776f6c46 	.word	0x776f6c46
 8005514:	74615220 	.word	0x74615220
 8005518:	203d2065 	.word	0x203d2065
 800551c:	0a207525 	.word	0x0a207525
 8005520:	00000000 	.word	0x00000000
 8005524:	4847494c 	.word	0x4847494c
 8005528:	54532054 	.word	0x54532054
 800552c:	53555441 	.word	0x53555441
 8005530:	4720203a 	.word	0x4720203a
 8005534:	4e454552 	.word	0x4e454552
 8005538:	00000020 	.word	0x00000020
 800553c:	4847494c 	.word	0x4847494c
 8005540:	54532054 	.word	0x54532054
 8005544:	53555441 	.word	0x53555441
 8005548:	5920203a 	.word	0x5920203a
 800554c:	4f4c4c45 	.word	0x4f4c4c45
 8005550:	00002057 	.word	0x00002057
 8005554:	4847494c 	.word	0x4847494c
 8005558:	54532054 	.word	0x54532054
 800555c:	53555441 	.word	0x53555441
 8005560:	5220203a 	.word	0x5220203a
 8005564:	00204445 	.word	0x00204445
 8005568:	4d4d4f43 	.word	0x4d4d4f43
 800556c:	49434e45 	.word	0x49434e45
 8005570:	5320474e 	.word	0x5320474e
 8005574:	45545359 	.word	0x45545359
 8005578:	4944204d 	.word	0x4944204d
 800557c:	4c415053 	.word	0x4c415053
 8005580:	41542059 	.word	0x41542059
 8005584:	00204b53 	.word	0x00204b53
 8005588:	65657247 	.word	0x65657247
 800558c:	6174536e 	.word	0x6174536e
 8005590:	54737574 	.word	0x54737574
 8005594:	72656d69 	.word	0x72656d69
 8005598:	00000000 	.word	0x00000000
 800559c:	4c4c4559 	.word	0x4c4c4559
 80055a0:	7453574f 	.word	0x7453574f
 80055a4:	73757461 	.word	0x73757461
 80055a8:	656d6954 	.word	0x656d6954
 80055ac:	00000072 	.word	0x00000072
 80055b0:	53444552 	.word	0x53444552
 80055b4:	75746174 	.word	0x75746174
 80055b8:	6d695473 	.word	0x6d695473
 80055bc:	00007265 	.word	0x00007265
 80055c0:	6867694c 	.word	0x6867694c
 80055c4:	61745374 	.word	0x61745374
 80055c8:	5f737574 	.word	0x5f737574
 80055cc:	00000051 	.word	0x00000051
 80055d0:	776f6c46 	.word	0x776f6c46
 80055d4:	65746152 	.word	0x65746152
 80055d8:	0000515f 	.word	0x0000515f
 80055dc:	66617254 	.word	0x66617254
 80055e0:	5f636966 	.word	0x5f636966
 80055e4:	00000051 	.word	0x00000051
 80055e8:	66617254 	.word	0x66617254
 80055ec:	46636966 	.word	0x46636966
 80055f0:	00776f6c 	.word	0x00776f6c
 80055f4:	66617254 	.word	0x66617254
 80055f8:	47636966 	.word	0x47636966
 80055fc:	00006e65 	.word	0x00006e65
 8005600:	66617254 	.word	0x66617254
 8005604:	44636966 	.word	0x44636966
 8005608:	61707369 	.word	0x61707369
 800560c:	0000796c 	.word	0x0000796c
 8005610:	6867694c 	.word	0x6867694c
 8005614:	74615374 	.word	0x74615374
 8005618:	00000065 	.word	0x00000065
 800561c:	69676542 	.word	0x69676542
 8005620:	6e696e6e 	.word	0x6e696e6e
 8005624:	72502067 	.word	0x72502067
 8005628:	6172676f 	.word	0x6172676f
 800562c:	2021216d 	.word	0x2021216d
 8005630:	00000000 	.word	0x00000000
 8005634:	72617453 	.word	0x72617453
 8005638:	676e6974 	.word	0x676e6974
 800563c:	68635320 	.word	0x68635320
 8005640:	6c756465 	.word	0x6c756465
 8005644:	2e2e7265 	.word	0x2e2e7265
 8005648:	0000002e 	.word	0x0000002e
 800564c:	676f7250 	.word	0x676f7250
 8005650:	206d6172 	.word	0x206d6172
 8005654:	706d6f43 	.word	0x706d6f43
 8005658:	6574656c 	.word	0x6574656c
 800565c:	00000064 	.word	0x00000064

08005660 <__sf_fake_stderr>:
	...

08005680 <__sf_fake_stdin>:
	...

080056a0 <__sf_fake_stdout>:
	...

080056c0 <_global_impure_ptr>:
 80056c0:	2000001c                                ... 

080056c4 <_init>:
 80056c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056c6:	bf00      	nop
 80056c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056ca:	bc08      	pop	{r3}
 80056cc:	469e      	mov	lr, r3
 80056ce:	4770      	bx	lr

080056d0 <_fini>:
 80056d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056d2:	bf00      	nop
 80056d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056d6:	bc08      	pop	{r3}
 80056d8:	469e      	mov	lr, r3
 80056da:	4770      	bx	lr
